
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Security, TwigExtension, TwigFunctionExtension, TwigFunctionMethod,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Security = use('/app/config/security');

TwigExtension = use('@Konsserto/Vendor/Twig/Extension/TwigExtension');

TwigFunctionMethod = use('@Konsserto/Vendor/Twig/Extension/TwigFunctionMethod');

TwigFunctionExtension = (function(_super) {
  __extends(TwigFunctionExtension, _super);

  function TwigFunctionExtension(router, application) {
    this.router = router;
    this.application = application;
    this.formRest = __bind(this.formRest, this);
    this.formEnd = __bind(this.formEnd, this);
    this.formRow = __bind(this.formRow, this);
    this.formWidget = __bind(this.formWidget, this);
    this.formLabel = __bind(this.formLabel, this);
    this.formError = __bind(this.formError, this);
    this.formErrors = __bind(this.formErrors, this);
    this.formStart = __bind(this.formStart, this);
    this.asset = __bind(this.asset, this);
    this.path = __bind(this.path, this);
    this.echo = __bind(this.echo, this);
    this.socket = __bind(this.socket, this);
    this.getFunctions = __bind(this.getFunctions, this);
    TwigFunctionExtension.__super__.constructor.call(this, constructor);
  }

  TwigFunctionExtension.prototype.getFunctions = function() {
    return [
      {
        name: 'echo',
        access: new TwigFunctionMethod(this.echo)
      }, {
        name: 'path',
        access: new TwigFunctionMethod(this.path)
      }, {
        name: 'asset',
        access: new TwigFunctionMethod(this.asset)
      }, {
        name: 'socket',
        access: new TwigFunctionMethod(this.socket)
      }, {
        name: 'form_start',
        access: new TwigFunctionMethod(this.formStart)
      }, {
        name: 'form_label',
        access: new TwigFunctionMethod(this.formLabel)
      }, {
        name: 'form_errors',
        access: new TwigFunctionMethod(this.formErrors)
      }, {
        name: 'form_error',
        access: new TwigFunctionMethod(this.formError)
      }, {
        name: 'form_widget',
        access: new TwigFunctionMethod(this.formWidget)
      }, {
        name: 'form_row',
        access: new TwigFunctionMethod(this.formRow)
      }, {
        name: 'form_end',
        access: new TwigFunctionMethod(this.formEnd)
      }, {
        name: 'form_rest',
        access: new TwigFunctionMethod(this.formRest)
      }
    ];
  };

  TwigFunctionExtension.prototype.socket = function() {
    return '<script src="/socket.io/socket.io.js"></script>';
  };

  TwigFunctionExtension.prototype.echo = function(str) {
    return '<pre>Echo : ' + str + '</pre>';
  };

  TwigFunctionExtension.prototype.path = function(name, args) {
    return this.router.generate(name, args);
  };

  TwigFunctionExtension.prototype.asset = function(file) {
    var protocol;
    protocol = this.application.sslActive() ? 'https' : 'http';
    return protocol + '://' + this.router.getHost() + '/web/' + file;
  };

  TwigFunctionExtension.prototype.formStart = function(form, options, view) {
    return form.formStart(options, view);
  };

  TwigFunctionExtension.prototype.formErrors = function(form, view) {
    return form.formErrors(view);
  };

  TwigFunctionExtension.prototype.formError = function(form, field, view) {
    return form.formError(field, view);
  };

  TwigFunctionExtension.prototype.formLabel = function(form, field, view) {
    return form.formLabel(field, view);
  };

  TwigFunctionExtension.prototype.formWidget = function(form, field, view) {
    if (field != null) {
      return form.formWidget(field, view);
    } else {
      return form.formWidgets();
    }
  };

  TwigFunctionExtension.prototype.formRow = function(form, field, view) {
    return form.formRow(field, view);
  };

  TwigFunctionExtension.prototype.formEnd = function(form, view) {
    return form.formEnd(view);
  };

  TwigFunctionExtension.prototype.formRest = function(form) {
    return form.formRest();
  };

  return TwigFunctionExtension;

})(TwigExtension);

module.exports = TwigFunctionExtension;
