
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Command, Filesystem, GenerateEntityCommand, InputArgument, InputOption, Table, Tools, cc, file_helper, path,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

cc = use('cli-color');

file_helper = use('fs');

path = use('path');

Table = use('cli-table');

Command = use('@Konsserto/Component/Console/Command');

Filesystem = use('@Konsserto/Component/Filesystem/Filesystem');

InputArgument = use('@Konsserto/Component/Console/Input/InputArgument');

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

Tools = use('@Konsserto/Component/Static/Tools');

GenerateEntityCommand = (function(_super) {
  __extends(GenerateEntityCommand, _super);

  function GenerateEntityCommand() {
    return GenerateEntityCommand.__super__.constructor.apply(this, arguments);
  }

  GenerateEntityCommand.prototype.create = function() {
    this.setName('generate:entity');
    this.setDescription('Generate an entity for persistence');
    this.setDefinition([new InputArgument('target', InputArgument.OPTIONAL, 'The target directory', 'web')]);
    return this.setHelp('  The command %command.name% installs bundle assets into a given directory.\n Example:\n  %command.full_name% web');
  };

  GenerateEntityCommand.prototype.execute = function(input) {
    this.nl();
    return process.exit(0);
  };

  GenerateEntityCommand.prototype.interact = function(input) {
    var application, bundle, entity, entity_split, field, fieldItem, fieldList, fieldTypeAvailable, fields, match, name, objBundle, options, table, type, values, _i, _len, _loop;
    table = new Table({
      chars: this.getArrayChars()
    });
    table.push(['Konsserto Entity Generator']);
    this.write('\n\n' + table.toString() + '\n');
    this.write("This command allow you to generate a skeleton for a Node ORM 2 entity\n\nChoose a bundle and write the entity name (like FooBundleBlogBundle:Post).");
    application = this.getContainer().get('Application');
    bundle = '';
    name = '';
    fields = [];
    fieldTypeAvailable = ['text', 'textarea', 'number', 'integer', 'boolean', 'date', 'datetime', 'enum', 'object', 'point', 'binary', 'serial'];
    _loop = true;
    while (_loop) {
      entity = this.ask('\nEntity name : ');
      if (entity === 'exit' || entity === 'quit' || entity === '!q') {
        _loop = false;
        process.exit(0);
      }
      match = entity.match('^([a-zA-Z0-9]+):([a-zA-Z0-9]+)$');
      entity_split = entity.split(':');
      bundle = entity_split[0];
      name = entity_split[1];
      if (match === void 0 || match === null || match.length <= 0) {
        this.write('  The entity name is invalid.');
        continue;
      }
      if (!application.hasBundle(bundle)) {
        this.write('  The bundle \'' + bundle + '\' doesn\'t exists.');
        continue;
      }
      _loop = false;
    }
    objBundle = application.getBundle(bundle);
    fieldList = '';
    for (_i = 0, _len = fieldTypeAvailable.length; _i < _len; _i++) {
      fieldItem = fieldTypeAvailable[_i];
      fieldList += cc.bgBlue.white(fieldItem) + ',';
    }
    fieldList = fieldList.substr(0, fieldList.length - 1);
    table = new Table({
      chars: this.getArrayChars()
    });
    table.push(['Available field types']);
    this.write('\n' + table.toString() + '\n');
    this.write(fieldList);
    while ((field = this.ask('\nNew field name (press <return> to stop adding fields): ')) !== '') {
      match = field.match('^([a-zA-Z0-9_]+)$');
      if (match === void 0 || match === null || match.length <= 0) {
        this.write('  The field name contains invalid characters.');
        continue;
      } else {
        while ((type = this.askCombo('Field type [text]: ', 'text', fieldTypeAvailable))) {
          options = null;
          switch (type) {
            case 'text':
              while (true) {
                options = this.askAndValidate('Field length [255]: ', '255');
                match = parseInt(options);
                if ((match != null) && match >= 0 && match <= 255) {
                  break;
                } else {
                  continue;
                }
              }
              break;
            case 'enum':
              values = [];
              while ((options = this.ask('\nField add value (press <return> to stop adding value): ')) !== '') {
                values.push(options);
              }
              options = values;
              break;
            case 'datetime':
              options = 'time';
              type = 'date';
          }
          fields.push({
            name: field,
            type: type,
            options: options
          });
          break;
        }
      }
    }
    this.registerEntity(name, bundle, objBundle, fields);
    this.registerRepository(name, bundle, objBundle, fields);
    return 0;
  };

  GenerateEntityCommand.prototype.registerEntity = function(name, bundle, objBundle, fields) {
    var ccName, ccNameUC, field, file, option, outFields, outGetSet, repository, size, value, values, _i, _j, _len, _len1, _ref;
    path = Filesystem.mktree(process.cwd() + '/', objBundle.getEntityPath('').replace(/\\/, '/').split('/'), 755, false);
    file = path + name + '.coffee';
    repository = (objBundle.getRepositoryNamespace() + '/' + name + 'Repository').replace(/\\/, '/');
    outFields = '';
    outGetSet = '';
    for (_i = 0, _len = fields.length; _i < _len; _i++) {
      field = fields[_i];
      ccNameUC = Tools.camelCase(field.name, true);
      ccName = Tools.camelCase(field.name);
      option = '';
      switch (field.type) {
        case 'text':
          size = parseInt(field.options);
          if ((field.options != null) && size > 0) {
            option = ', size: ' + size;
          }
          break;
        case 'enum':
          values = '';
          _ref = field.options;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            value = _ref[_j];
            values += "'" + value + "'";
            if (_j !== (field.options.length - 1)) {
              values += ',';
            }
          }
          if (field.options != null) {
            option = ', values: [' + values + ']';
          }
          break;
        case 'date':
          if (field.options != null) {
            option = ', time: true';
          } else {
            option = ', time: false';
          }
          break;
        case 'textarea':
          field.type = 'text';
          option = ', big: true';
      }
      outFields += "\t\t\t" + ccName + ": {type: '" + field.type + "'" + option + "}";
      if (_i !== (fields.length - 1)) {
        outFields += ',\n';
      }
      outGetSet += "\tget" + ccNameUC + ":() ->\n	\treturn @" + ccName + "\n\n\tset" + ccNameUC + ":(@" + ccName + ") ->\n	\treturn this\n\n";
    }
    return file_helper.writeFileSync(file, "class " + name + "\n\n\n	@model = {\n		table: '" + (name.toLowerCase()) + "',\n		repository: '" + repository + "',\n		fields: {\n			id: { type: \"serial\", key: true },\n" + outFields + "\n		},\n		associations: {\n			hasOne: [],\n			hasMany: []\n		}\n\n	}\n\n	constructor: ()->\n		return this\n\n" + outGetSet + "\n\nmodule.exports = " + name);
  };

  GenerateEntityCommand.prototype.registerRepository = function(name, bundle, objBundle, fields) {
    var file_repository, path_repository;
    path_repository = Filesystem.mktree(process.cwd() + '/', objBundle.getRepositoryPath('').replace(/\\/, '/').split('/'), 755, false);
    file_repository = path_repository + name + 'Repository.coffee';
    return file_helper.writeFileSync(file_repository, "EntityRepository = use('@Konsserto/Component/ORM/EntityRepository')\n\nclass " + name + "Repository extends EntityRepository\n\n\n\n\nmodule.exports = " + name + "Repository");
  };

  return GenerateEntityCommand;

})(Command);

module.exports = GenerateEntityCommand;
