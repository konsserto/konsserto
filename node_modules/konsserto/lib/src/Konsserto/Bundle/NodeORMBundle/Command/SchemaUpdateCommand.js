
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Command, Database, Filesystem, InputArgument, InputOption, Q, SchemaUpdateCommand, Table, Tools, cc, file_helper, path,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

cc = use('cli-color');

file_helper = use('fs');

path = use('path');

Q = use('q');

Table = use('cli-table');

Command = use('@Konsserto/Component/Console/Command');

Database = use('@Konsserto/Component/ORM/Database');

Filesystem = use('@Konsserto/Component/Filesystem/Filesystem');

InputArgument = use('@Konsserto/Component/Console/Input/InputArgument');

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

Tools = use('@Konsserto/Component/Static/Tools');

SchemaUpdateCommand = (function(_super) {
  __extends(SchemaUpdateCommand, _super);

  function SchemaUpdateCommand() {
    return SchemaUpdateCommand.__super__.constructor.apply(this, arguments);
  }

  SchemaUpdateCommand.prototype.create = function() {
    this.setName('schema:update');
    this.setDescription('Generate schema in database');
    return this.setHelp('  The command %command.name% create the schema into the database.\n Example:\n  %command.full_name%');
  };

  SchemaUpdateCommand.prototype.execute = function(input) {
    var db, em, table;
    table = new Table({
      chars: this.getArrayChars()
    });
    table.push(['Konsserto Schema Update']);
    this.write('\n' + table.toString() + '\n');
    this.write("Sync database " + cc.green("start"));
    em = this.getContainer().get('entity_manager');
    db = this.getContainer().get('database');
    return db.asyncConnect((function(_this) {
      return function() {
        var entities, entityInstance, ets, index;
        entities = em.getEntitiesInstance();
        ets = [];
        for (path in entities) {
          entityInstance = entities[path];
          ets.push({
            path: path,
            model: entityInstance.getModelInstance()
          });
        }
        index = 0;
        return Tools.promiseWhile(function() {
          return index < ets.length;
        }, function() {
          var model;
          path = ets[index].path;
          model = ets[index].model;
          model.sync(function(err) {
            if (err) {
              return _this.write(err);
            } else {
              return _this.write('Sync ' + path + ' ' + cc.green('[Updated !]'));
            }
          });
          index++;
          return Q.delay(500);
        }).then(function() {
          _this.write("Sync database " + cc.red("finished"));
          return process.exit(0);
        }).done();
      };
    })(this));
  };

  return SchemaUpdateCommand;

})(Command);

module.exports = SchemaUpdateCommand;
