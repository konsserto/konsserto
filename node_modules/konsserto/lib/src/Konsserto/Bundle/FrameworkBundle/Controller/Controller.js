
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Controller;

Controller = (function() {
  function Controller() {
    return this;
  }

  Controller.prototype.getRequest = function() {
    return this.container.get('Request_Stack').getCurrentRequest();
  };

  Controller.prototype.getResponse = function() {
    return this.response;
  };

  Controller.prototype.setRequest = function(request) {
    this.request = request;
    return this;
  };

  Controller.prototype.setResponse = function(response) {
    this.response = response;
    return this;
  };

  Controller.prototype.setContainer = function(container) {
    this.container = container;
    return this;
  };

  Controller.prototype.getContainer = function() {
    return this.container;
  };

  Controller.prototype.getApplication = function() {
    return this.application;
  };

  Controller.prototype.setApplication = function(app) {
    this.app = app;
    return this;
  };

  Controller.prototype.get = function(name) {
    return this.container.get(name);
  };

  Controller.prototype.setNext = function(next) {
    this.next = next;
    return this;
  };

  Controller.prototype.render = function(view, options) {
    return this.container.get('Templating').renderResponse(view, options, this.getResponse());
  };

  Controller.prototype.renderView = function(view, options) {
    return this.container.get('Templating').render(view, options);
  };

  Controller.prototype.generateUrl = function(route, parameters, referenceType) {
    return this.container.get('Router').generate(route, parameters, referenceType);
  };

  Controller.prototype.redirect = function(url, status) {
    if (status == null) {
      status = 302;
    }
    return this.response.redirect(status, url);
  };

  Controller.prototype.createForm = function(name, data, options) {
    if (data == null) {
      data = null;
    }
    if (options == null) {
      options = {};
    }
    return this.container.get('Form_Factory').createBuilder(name, data, options);
  };

  Controller.prototype.createFormBuilder = function(data, options) {
    if (data == null) {
      data = null;
    }
    if (options == null) {
      options = {};
    }
    return this.container.get('Form_Factory').createBuilder('form', data, options);
  };

  Controller.prototype.has = function(name) {
    return this.container.has(name);
  };

  Controller.prototype.next = function() {
    return this.next;
  };

  return Controller;

})();

module.exports = Controller;
