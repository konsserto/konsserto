
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var AssetsInstallCommand, Command, Filesystem, InputArgument, InputOption, Table, Tools, cc, filesystem, path,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

cc = use('cli-color');

filesystem = use('fs');

path = use('path');

Table = use('cli-table');

Command = use('@Konsserto/Component/Console/Command');

Filesystem = use('@Konsserto/Component/Filesystem/Filesystem');

InputArgument = use('@Konsserto/Component/Console/Input/InputArgument');

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

Tools = use('@Konsserto/Component/Static/Tools');

AssetsInstallCommand = (function(_super) {
  __extends(AssetsInstallCommand, _super);

  function AssetsInstallCommand() {
    return AssetsInstallCommand.__super__.constructor.apply(this, arguments);
  }

  AssetsInstallCommand.prototype.create = function() {
    this.setName('assets:install');
    this.setDescription('Manage assets and installs bundles web assets under a public web directory');
    this.setDefinition([new InputArgument('target', InputArgument.OPTIONAL, 'The target directory', 'web')]);
    return this.setHelp('  The command %command.name% installs bundle assets into a given directory.\n Example:\n  %command.full_name% web');
  };

  AssetsInstallCommand.prototype.execute = function(input) {
    var bundle, bundlePublic, bundleTarget, name, table, target, _ref;
    target = path.normalize(process.cwd() + '/' + input.getArgument('target') + '/');
    table = new Table({
      chars: this.getArrayChars()
    });
    table.push(['Konsserto Assets Installation']);
    this.write('\n\n' + table.toString() + '\n');
    if (filesystem.existsSync(target)) {
      target = target + 'bundles/';
      Filesystem.mkdir(target, 755, true);
      _ref = this.getContainer().get('Application').getBundles();
      for (name in _ref) {
        bundle = _ref[name];
        bundleTarget = path.normalize(target + Tools.replaceFinalOccurence(bundle.getName().toLowerCase(), 'bundle'));
        bundlePublic = bundle.getPublicPath();
        if (filesystem.existsSync(bundlePublic)) {
          Filesystem.mkdir(bundleTarget, 755);
          Filesystem.copytree(bundle.getPublicPath(), bundleTarget);
        }
      }
    } else {
      throw new Error('Directory doesn\'t exists : ' + target);
    }
    return 0;
  };

  return AssetsInstallCommand;

})(Command);

module.exports = AssetsInstallCommand;
