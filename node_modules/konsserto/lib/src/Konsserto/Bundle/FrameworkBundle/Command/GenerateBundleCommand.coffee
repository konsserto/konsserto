###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

cc = use('cli-color')
file_helper = use('fs')
path_helper = use('path')
Table = use('cli-table');

Command = use('@Konsserto/Component/Console/Command')
Filesystem = use('@Konsserto/Component/Filesystem/Filesystem')
InputArgument = use('@Konsserto/Component/Console/Input/InputArgument')
InputOption = use('@Konsserto/Component/Console/Input/InputOption')
Tools = use('@Konsserto/Component/Static/Tools');

#
# GenerateBundleCommand
#
# @author Jessym Reziga <jessym@konsserto.com>
#

InputOption = use('@Konsserto/Component/Console/Input/InputOption')

class GenerateBundleCommand extends Command


	create: () ->
		@setName('generate:bundle')
		@setDescription('Generate a bundle')
		@setDefinition([new InputOption('--empty','e',InputOption.VALUE_NONE,'Doesn\'t generate example')])
		@setHelp('  The command %command.name% generate the whole bundle directory tree. Example:\n  %command.full_name% JohnSmithBundle')

	execute: (input) ->
		@nl()
		return 0

	interact: (input)->
		empty = input.getOption('empty')

		table = new Table({chars:@getArrayChars()});
		table.push(['Konsserto Bundle Generator'])
		@write('\n\n'+table.toString()+'\n')
		@write("""Bundle or not to Bundle, that is the question.
		Luckily in Konsserto, all is about bundles.

		Each bundle is hosted under a namespace (like Foo/Bundle/(...)/BlogBundle).

		The namespace should begin with a vendor name like your company name, your project name, or your client name, followed by one or more optional category sub-namespaces, and it should end with the bundle name itself (which must have 'Bundle' as a suffix).
		""")

		bundle = ''
		name = ''
		_loop = true

		while _loop
			bundle = @ask('\nBundle namespace : ')
			match = bundle.match('^([a-zA-Z0-9/]+)$')

			if bundle == 'exit' || bundle == 'quit' || bundle == '!q'
				process.exit(0)

			if match == undefined || match == null || match.length <= 0
				@write('  The namespace contains invalid characters.')
				continue
			if !Tools.endsWith(bundle,'Bundle')
				@write('  The namespace must end with \'Bundle\'.')
				continue
			if bundle.indexOf('/') <= 0
				@write('  You must specify a vendor name (Example: VendorName/'+bundle+').')
				continue
			_loop = false

		_loop = true

		while _loop
			name = @ask('\nBundle name ['+bundle.replace(/\//g,'')+']: ')
			match = name.match('^([a-zA-Z0-9/]+)$')

			if name == 'exit' || name == 'quit' || name == '!q'
				process.exit(0)

			if name == ''
				name = bundle.replace(/\//g,'')
				break
			if match == undefined || match == null || match.length <= 0
				@write('  The namespace contains invalid characters.')
				continue
			if !Tools.endsWith(name,'Bundle')
				@write('  The namespace must end with \'Bundle\'.')
				continue
			_loop = false

		root = Filesystem.mktree(process.cwd()+'/'+sourceDir+'/',bundle.split('/'))

		bundleDirs = {
			':files':{}
			'Command': null,
			'Controller': {
				':files': {
					'HelloController.coffee':@getControllerClassContent(name)
				}
			},
			'Entity': null,
			'Repository': null,
			'Resources': {
				'config':{
					':files':{
						'routing.js':@getRoutingContent(name,bundle,empty),
						'services.js':@getServiceContent(name,bundle,empty),
						'socket.js':@getSocketContent()
					}
				},
				'views':{
					'Hello':{
						':files':{
							'index.html.twig':'Hello {{ name }}!'
						}
					}
				}
			},
			'Services': null
		}

		if empty
			bundleDirs['Controller'] = null
			bundleDirs['Resources']['views'] = null

		bundleDirs[':files'][name+'.coffee'] = @getBundleClassContent(name)

		Filesystem.mktree(root,bundleDirs)

		@registerBundle(name,bundle)
		@registerRoutes(name,bundle)
		@registerSockets(name,bundle)

		return 0

	registerBundle:(name,bundle) ->
		file = process.cwd() + '/app/config/bundles.js'
		arrayFile = file_helper.readFileSync(file).toString().split('\n')
		newBundle = 'use(\'@'+bundle+'/'+name+'\')'

		oldBundleWithSameLine = false
		moduleExportAtLine = -1

		for line in arrayFile
			if line.trim().indexOf(newBundle) >= 0
				oldBundleWithSameLine = true

			if line.trim().indexOf('module.exports') == 0
				moduleExportAtLine = _i

		if moduleExportAtLine != -1 & !oldBundleWithSameLine
			arrayFile[moduleExportAtLine] = 'bundles.push('+newBundle+');\nmodule.exports = bundles;'
			file_helper.writeFileSync(file,arrayFile.join('\n'))

	registerRoutes:(name,bundle,shortname = '') ->
		file = process.cwd() + '/app/config/routing.js'
		arrayFile = file_helper.readFileSync(file).toString().split('\n')
		newRoutes = "resource: '@"+bundle+"/Resources/config/routing.js'"

		bundle = bundle.replace(/Bundle/g,'')
		path = bundle.split('/')
		shortname += part+'_' for part in path

		newRoutesExtended = "{\n
			\tname: '"+shortname.toLowerCase()+"import',\n
			\t"+newRoutes+"\n
		}"

		oldRoutesWithSameLine = false
		moduleExportAtLine = -1

		for line in arrayFile
			if line.trim().indexOf(newRoutes) >= 0
				oldRoutesWithSameLine = true

			if line.trim().indexOf('module.exports') == 0
				moduleExportAtLine = _j

		if moduleExportAtLine != -1 & !oldRoutesWithSameLine
			arrayFile[moduleExportAtLine] = 'routing.push('+newRoutesExtended+');\nmodule.exports = routing;'
			file_helper.writeFileSync(file,arrayFile.join('\n'))

	registerSockets:(name,bundle,shortname = '') ->
		file = process.cwd() + '/app/config/socket.js'
		arrayFile = file_helper.readFileSync(file).toString().split('\n')
		newSockets = "resource: '@"+bundle+"/Resources/config/socket.js'"

		bundle = bundle.replace(/Bundle/g,'')
		path = bundle.split('/')
		shortname += part+'_' for part in path

		newSocketsExtended = "{\n
					\tname: '"+shortname.toLowerCase()+"import',\n
					\t"+newSockets+"\n
				}"

		oldSocketsWithSameLine = false
		moduleExportAtLine = -1

		for line in arrayFile
			if line.trim().indexOf(newSockets) >= 0
				oldSocketsWithSameLine = true

			if line.trim().indexOf('module.exports') == 0
				moduleExportAtLine = _j

		if moduleExportAtLine != -1 & !oldSocketsWithSameLine
			arrayFile[moduleExportAtLine] = 'socket.push('+newSocketsExtended+');\nmodule.exports = socket;'
			file_helper.writeFileSync(file,arrayFile.join('\n'))

	getBundleClassContent:(name) ->
		return """
			Bundle = use('@Konsserto/Component/Bundle/Bundle')\n
			class #{name} extends Bundle\n\n\n\n
			module.exports = new #{name}
		"""

	getControllerClassContent:(name) ->
		return """
			Controller = use('@Konsserto/Bundle/FrameworkBundle/Controller/Controller')\n
			class HelloController extends Controller\n\n
			\tindexAction:(name) =>\n
			\t\t@render('#{name}:Hello:index.html.twig',{name:name})\n\n
			module.exports = HelloController
		"""

	getRoutingContent:(name,bundle,empty = false,route = '') ->
		bundle = bundle.replace(/Bundle/g,'')
		path = bundle.split('/')
		route += part+'_' for part in path

		if empty
			return """
				var routing = [
				\n
				];\n\n
				module.exports = routing;
			"""

		return """
			var routing = [
			\t{name: '#{route.toLowerCase()}homepage', pattern: '/hello/{name}', controller: '#{name}:Hello:index', method: 'get'}\n
			];\n\n
			module.exports = routing;
		"""

	getServiceContent:(name,bundle,empty = false,service = '') ->
		include = (bundle)
		bundle = bundle.replace(/Bundle/g,'')
		path = bundle.split('/')
		service += part+'_' for part in path

		if empty
			return """
				var services = [
				\n
				];\n\n
				module.exports = services;
			"""

		return """
			var services = [
			\t//{name: '#{service.toLowerCase()}service', _class: '@#{include}/Services/#{name}Service'}\n
			];\n\n
			module.exports = services;
		"""

	getSocketContent:() ->
		return """
			var socket = [
			\n
			];\n\n
			module.exports = socket;
		"""


module.exports = GenerateBundleCommand;

