###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

filesystem = use('fs');
path_helper = use('path');
Tools = use('@Konsserto/Component/Static/Tools');

# Filesystem contains helper to generate and manage directory/file tree
#
# @author Jessym Reziga <jessym@konsserto.com>
class Filesystem


  # Trace the output stack
  # @param {Object} object The object concern by the trace
  @traceOutput: (object) ->
    out = object.replace(/\\/g, '/')
    root = process.cwd()
    root = root.replace(/\\/g, '/')
    out = out.replace(root, '')
    return out

  # Make tree
  # @param {String} root The root directory
  # @param {Object} tree The tree object
  # @param {Number} chmod The access right on the directory
  # @param {Boolean} verbose Should the mktree be logged ?
  # @return {Boolean} True if created, false in the other cases
  @mktree: (root, tree, chmod = 755, verbose = true) ->
    if tree.constructor.name == 'Array'
      for dir,index in tree
        root += dir + '/'

        if verbose
          console.info('Generated directory : [' + @traceOutput(root) + ']')

        try
          filesystem.mkdirSync(root, chmod)
        catch e
          if e.code != 'EEXIST' then throw e

      return path_helper.normalize(root)

    else if tree.constructor.name == 'Object'
      for name,content of tree
        if name == ':files'
          Filesystem.mkfiles(root, content)
        else
          dir = root + name + '/'

          try
            filesystem.mkdirSync(dir, chmod)
          catch e
            if e.code != 'EEXIST' then throw e

          if verbose
            console.info('Generated directory : [' + @traceOutput(dir) + ']')

          if content != false && content != null && content != undefined
            Filesystem.mktree(dir, content)

      return true

  # Make files
  # @param {String} root The root directory
  # @param [Object] files The files to make
  @mkfiles: (root, files) ->
    for file,content of files
      if content.indexOf('@file:') == 0
        filesystem.createReadStream(content.replace('@file:', '')).pipe(filesystem.createWriteStream(root + file));
      else
        try
          buffFile = filesystem.createWriteStream(root + file)
          buffFile.write(content);
          buffFile.close();
          console.info('Generated file : [' + @traceOutput(root + file) + ']')
        catch e
          throw e

  # Make directory
  # @param {String} dir The directory to make
  # @param {Number} chmod The chmod used to create
  # @param {Boolean} Should the directory be deleted before ? Default is false
  @mkdir: (dir, chmod, del = false) ->
    if del
      @rmtree(dir)
    filesystem.mkdirSync(dir, chmod) if !filesystem.existsSync(dir)


  # Remove tree
  # @param {String} dir The directory to remove
  @rmtree: (dir) ->
    if filesystem.existsSync(dir)
      list = filesystem.readdirSync(dir)
      for i in [0..list.length]
        if list[i]?
          filename = path.join(dir, list[i])
          stat = filesystem.statSync(filename)

          if filename == "." || filename == ".."
            continue
          else if stat.isDirectory()
            @rmtree(filename)
          else
            filesystem.unlinkSync(filename)

      try
        filesystem.rmdirSync(dir)
      catch e
        throw e if e.errno != 53


  # Copy tree
  # @param {String} src The directory to copy
  # @param {String} dst The destination folder
  @copytree: (src, dst) ->
    @mktree(dst + '/', @generatetree(src))


  # Generate a  tree
  # @param {String} src The dsource directory where to gene
  # @param {Object} root The root object
  # @return {Object} The root object
  @generatetree: (src, root = {}) ->
    if filesystem.existsSync(src)
      list = filesystem.readdirSync(src)
      for i in [0..list.length]
        if list[i]?
          filename = path.join(src, list[i])
          stat = filesystem.statSync(filename)

          if filename == "." || filename == ".."
            continue
          else if stat.isDirectory()
            root[path.basename(filename)] = {}
            @generatetree(filename, root[path.basename(filename)])
          else
            root ?= {}
            root[':files'] ?= {}
            root[':files'][path.basename(filename)] = '@file:' + filename
    return root


module.exports = Filesystem;

