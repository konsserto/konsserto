###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

filesystem = use('fs');
path_helper = use('path');
Tools = use('@Konsserto/Component/Static/Tools');

#
# Filesystem contains helper to generate and manage directory/file tree
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class Filesystem


	@traceOutput:(object) ->
		out = object.replace(/\\/g,'/')
		root = process.cwd()
		root = root.replace(/\\/g,'/')
		out = out.replace(root,'')
		return out

	@mktree:(root,tree, chmod = 755, verbose = true) ->

		if tree.constructor.name == 'Array'
			for dir,index in tree
				root += dir+'/'

				if verbose
					console.info('Generated directory : ['+@traceOutput(root)+']')

				try
					filesystem.mkdirSync(root,chmod)
				catch e
					if e.code != 'EEXIST' then throw e

			return path_helper.normalize(root)

		else if tree.constructor.name == 'Object'
			for name,content of tree
				if name == ':files'
					Filesystem.mkfiles(root,content)
				else
					dir = root+name+'/'

					try
						filesystem.mkdirSync(dir,chmod)
					catch e
						if e.code != 'EEXIST' then throw e

					if verbose
						console.info('Generated directory : ['+@traceOutput(dir)+']')

					if content != false && content != null && content != undefined
						Filesystem.mktree(dir,content)

			return true

	@mkfiles:(root,files) ->

		for file,content of files
			if content.indexOf('@file:') == 0
				filesystem.createReadStream(content.replace('@file:','')).pipe(filesystem.createWriteStream(root+file));
			else
				try
					buffFile = filesystem.createWriteStream(root+file)
					buffFile.write(content);
					buffFile.close();
					console.info('Generated file : ['+@traceOutput(root+file)+']')
				catch e
					throw e

	@mkdir:(dir, chmod, del = false) ->

		if del
			@rmtree(dir)

		filesystem.mkdirSync(dir,chmod) if !filesystem.existsSync(dir)

	@rmtree:(dir) ->
		if filesystem.existsSync(dir)
			list = filesystem.readdirSync(dir)
			for i in [0..list.length]
				if list[i]?
					filename = path.join(dir,list[i])
					stat = filesystem.statSync(filename)

					if filename == "." || filename == ".."
						continue
					else if stat.isDirectory()
						@rmtree(filename)
					else
						filesystem.unlinkSync(filename)

			try
				filesystem.rmdirSync(dir)
			catch e
				throw e if e.errno != 53


	@copytree:(src,dst) ->
		@mktree(dst+'/',@generatetree(src))

	@generatetree:(src, root = {}) ->
		if filesystem.existsSync(src)
			list = filesystem.readdirSync(src)
			for i in [0..list.length]
				if list[i]?
					filename = path.join(src,list[i])
					stat = filesystem.statSync(filename)

					if filename == "." || filename == ".."
						continue
					else if stat.isDirectory()
						root[path.basename(filename)] = {}
						@generatetree(filename,root[path.basename(filename)])
					else
						root ?= {}
						root[':files'] ?= {}
						root[':files'][path.basename(filename)] = '@file:'+filename

		return root



module.exports = Filesystem;

