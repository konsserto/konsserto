###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

Tools = use('@Konsserto/Component/Static/Tools')

# MiddlewareInstance
#
# @author Jessym Reziga <jessym@konsserto.com>
class MiddlewareInstance

  # Class constructor
  # @param {MiddlewareDefinition} middlewareDefinition The middleware definition object
  # @param {Controller} controllerDefinition The controller definition object
  constructor: (@middlewareDefinition, @controllerDefinition) ->
    @controller = new controllerDefinition
    console.log('[Middleware] middleware: ' + @getControllerName() + ':' + @getMethod())

  # @param {Controller} controller The controller
  setController: (@controller) ->
    return this

  # @param {MiddlewareDefinition} middlewareDefinition The middleware definition
  setMiddlewareDefinition: (@middlewareDefinition) ->
    return this

  # @param {Controller} controller The controller definition
  setControllerDefinition: (@controllerDefinition) ->
    return this

  # @return {MiddlewareDefinition} The middleware definition
  getDefinition: () ->
    return @middlewareDefinition

  # @return {Controller} The controller
  getController: () ->
    return @controller

  # @return {String} The controller name
  getControllerName: () ->
    return @getController().constructor.name

  # @return {Controller} The controller definition
  getControllerDefinition: () ->
    return @controllerDefinition

  # @return {String} The controller definition method name
  getMethod: () ->
    return @getDefinition().getMethodName() + 'Action'

  # @return {Object} The current request of the middleware
  getRequest: () ->
    return @request

  # @return {Object} The current response of the middleware
  getResponse: () ->
    return @response

  # @param {Object} request The current request of the middleware
  setRequest: (@request) ->
    @getController().setRequest(@request)
    return this

  # @param {Object} response The current response of the middleware
  setResponse: (@response) ->
    @getController().setResponse(@response)
    return this

  # @param {Object} next The current next object of the middleware
  setNext: (@next) ->
    @getController().setNext(@next)
    return this

  # @return {Object} The current next object of the middleware
  getNext: () ->
    return @next

  # @return {Boolean} Check if the action method exists
  methodExists: () ->
    method = @getMethod()
    if !method? || !@getController()[method]?
      return false
    return true

  # @return {Object} The actual method of the controller
  getMethodInstance: () ->
    if @getController()[@getMethod()]?
      return @getController()[@getMethod()]

    throw new Error('No method ' + @getMethod() + ' in middleware ' + @getDefinition().getMiddlewareName())

  # @return {Object} The response of the middleware
  getResponse: () ->
    return Tools.call(@getMethodInstance(), {})

module.exports = MiddlewareInstance