###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

Tools = use('@Konsserto/Component/Static/Tools')

# RouteInstance
# @author Jessym Reziga <jessym@konsserto.com>
class RouteInstance


  # Class constructor
  # @param {RouteDefinition} routeDefinition The route definition
  # @param {Controller} controllerDefinition The controller definition
  constructor: (@routeDefinition, @controllerDefinition) ->
    @controller = new controllerDefinition
    route = @getDefinition()
    console.log('[Route] ' + @getControllerName() + ':' + @getMethod() + ' | pattern: ' + route.getRawPattern())

  # @param {Controller} controller The controller
  setController: (@controller) ->
    return this

  # @param {RouteDefinition} routeDefinition The route definition
  setRouteDefinition: (@routeDefinition) ->
    return this

  # @param {Object} request The request
  setRequest: (@request) ->
    @getController().setRequest(@request)
    return this

  # @param {Object} response The response
  setResponse: (@response) ->
    @getController().setResponse(@response)
    return this

  # @param {Controller} controllerDefinition The controller definition
  setControllerDefinition: (@controllerDefinition) ->
    return this

  # @return {RouteDefinition} The route definition
  getDefinition: () ->
    return @routeDefinition

  # @return {Controller} The controller
  getController: () ->
    return @controller

  # @return {String} The controller name
  getControllerName: () ->
    return @getController().constructor.name

  # @return {Object} The request
  getRequest: () ->
    return @request

  # @return {Object} The response
  getResponse: () ->
    return @response

  # @param {Object} next The next object
  setNext: (@next) ->
    @getController().setNext(@next)
    return this

  # @return {Object} The next object
  getNext: () ->
    return @next

  # @return {Controller} The controller definition
  getControllerDefinition: () ->
    return @controllerDefinition

  # @return {String} The method of the controller
  getMethod: () ->
    return @getDefinition().getMethodName() + 'Action'

  # Check if a method exists in a controller
  # @return {Boolean} True if the method exists or false in the other cases
  methodExists: () ->
    method = @getMethod()
    if !method? || !@getController()[method]?
      return false
    return true


  # Get the method arguments
  # @return [Object] The arguments matching the method
  getMethodArguments: () ->
    chainArgs = []
    definition = @getDefinition()
    args = Tools.getFunctionParameters(@getControllerDefinition().prototype[@getMethod()])
    params = @getRequest().params
    for arg in args
      if params[arg]?
        chainArgs.push(params[arg])
      else if definition.hasDefaultArg(arg)
        chainArgs.push(definition.getDefaultValueForArg(arg))
      else
        chainArgs.push(null)
    return chainArgs

  # Get the method  object from the controller
  # @return {Object} The method object
  getMethodInstance: () ->
    if @getController()[@getMethod()]?
      return @getController()[@getMethod()]
    throw new Error('No method ' + @getMethod() + ' in controller ' + @getDefinition().getControllerName())

  # @return {Object} The response from the Tools call
  getResponse: () ->
    return Tools.call(@getMethodInstance(), @getMethodArguments())

module.exports = RouteInstance