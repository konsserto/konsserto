
/*
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Rooms;

Rooms = (function() {
  function Rooms() {
    this.rooms = [];
  }

  Rooms.prototype.exists = function(room) {
    if (this.rooms[room]) {
      return true;
    }
    return false;
  };

  Rooms.prototype.contains = function(room, socket) {
    var r, _i, _len, _ref;
    if (this.rooms[room]) {
      _ref = this.rooms[room];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        if (socket.id = r.id) {
          return true;
        }
      }
    }
    return false;
  };

  Rooms.prototype.join = function(room, socket) {
    this.create(room);
    if (!this.contains(room, socket)) {
      socket.join(room);
      return this.rooms[room].push(socket);
    }
  };

  Rooms.prototype.leave = function(room, socket) {
    if (this.contains(room, socket)) {
      this.rooms[room].splice(this.rooms[room].indexOf(socket), 1);
      return socket.leave(room);
    }
  };

  Rooms.prototype.create = function(room) {
    if (!this.exists(room)) {
      return this.rooms[room] = [];
    }
  };

  Rooms.prototype["delete"] = function(room) {
    if (this.exists(room)) {
      if (this.rooms[room].size === 0) {
        return this.rooms.splice(this.rooms.indexOf(room), 1);
      }
    }
  };

  Rooms.prototype.get = function(room) {
    if (this.rooms[room]) {
      return this.rooms[room];
    }
    return void 0;
  };

  Rooms.prototype.getAll = function() {
    return this.rooms;
  };

  return Rooms;

})();

module.exports = Rooms;
