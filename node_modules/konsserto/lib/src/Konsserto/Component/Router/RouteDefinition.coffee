###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

RouteArgument = use('@Konsserto/Component/Router/RouteArgument')

#
# RouteDefinition
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class RouteDefinition


	constructor:(@registeredRoute, prefix) ->
		@defaultArgs = {}
		@arguments = {}
		controller = @registeredRoute.controller.split ':'
		@name = @registeredRoute.name
		@bundleName = controller[0]
		@controllerName = controller[1]
		@methodName = controller[2]
		@async = @registeredRoute.async ? false
		@prefix = prefix
		@rawPattern = @registeredRoute.pattern
		@httpMethod = @registeredRoute.method ? 'all'
		@rawArguments = @registeredRoute.arguments ? {}

		@needPrefix = true
		@needPrefix = false if @registeredRoute.prefix? && !@registeredRoute.prefix

		@extractArgumentsFromRawPattern()
		@pattern = @addPrefixOnRoute(prefix)

	addArgument:(name) ->
		requirements = @rawArguments[name] ? {}
		routeArgument = new RouteArgument(name,requirements)
		@arguments[name] = routeArgument

		if routeArgument.hasDefault()
			@defaultArgs[name] = routeArgument

		return routeArgument

	extractArgumentsFromRawPattern:() ->
		@pattern = @rawPattern
		args = @rawPattern.match(/({([a-zA-Z0-9-_]+)}+)/g)

		if args?
			for arg in args
				name = arg.replace(/{/g,'').replace(/}/g,'')
				routeArgument = @addArgument(name)
				@pattern = @pattern.replace(arg,routeArgument.getMatch())


	addPrefixOnRoute:(prefix) ->
		if prefix? && @needPrefix
			return prefix + @pattern

		return @pattern

	setPattern:(@pattern) ->
		return this

	setBundleName:(@bundleName) ->
		return this

	setControllerName:(@controllerName) ->
		return this

	setMethodName:(@methodName) ->
		return this

	setAsync:(@async) ->
		return this

	setHttpMethod:(@httpMethod) ->
		return this

	setName:(@name) ->
		return this

	isAsynchronous:() ->
		return @async

	getPattern:() ->
		return @pattern

	getRawPattern:() ->
		return @rawPattern

	getBundleName:() ->
		return @bundleName

	getControllerName:() ->
		return @controllerName

	getMethodName:() ->
		return @methodName

	getHttpMethod:() ->
		return @httpMethod

	getName:() ->
		return @name

	getDefaultArgs:() ->
		return @defaultArgs

	getArgs:() ->
		return @arguments

	getDefaultValueForArg:(name) ->
		if @defaultArgs[name]?
			return @defaultArgs[name].getDefaultValue()

		return null

	hasDefaultArg:(name) ->
		if @defaultArgs[name]?
			return true

		return false

	inflateArguments:(args) ->
		path = @prefix + @rawPattern

		for name,arg of @arguments
			fullname = '{'+name+'}'

			if args? && args[name]?
				path = path.replace(fullname,args[name])
			else if @hasDefaultArg(name)
				path = path.replace(fullname,@getDefaultValueForArg(name))
			else
				path = path.replace(fullname,'')

		return path

module.exports = RouteDefinition