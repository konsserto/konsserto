###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

RouteArgument = use('@Konsserto/Component/Router/RouteArgument')

# RouteDefinition
# @author Jessym Reziga <jessym@konsserto.com>
class RouteDefinition


  # Class constructor
  # @param {Object} registeredRoute The registered route in the config/route file
  # @param {String} prefix The prefix of the route
  constructor: (@registeredRoute, prefix) ->
    @defaultArgs = {}
    @arguments = {}
    controller = @registeredRoute.controller.split ':'
    @name = @registeredRoute.name
    @bundleName = controller[0]
    @controllerName = controller[1]
    @methodName = controller[2]
    @async = @registeredRoute.async ? false
    @prefix = prefix
    @rawPattern = @registeredRoute.pattern
    @httpMethod = @registeredRoute.method ? 'all'
    @rawArguments = @registeredRoute.arguments ? {}
    @needPrefix = true
    @needPrefix = false if @registeredRoute.prefix? && !@registeredRoute.prefix
    @extractArgumentsFromRawPattern()
    @pattern = @addPrefixOnRoute(prefix)

  # Add an argument to the route
  # @param {String} name The name of the parameter
  # @retturn {RouteArgument} The route argument object
  addArgument: (name) ->
    requirements = @rawArguments[name] ? {}
    routeArgument = new RouteArgument(name, requirements)
    @arguments[name] = routeArgument
    if routeArgument.hasDefault()
      @defaultArgs[name] = routeArgument
    return routeArgument

  # Extract the arguments from the raw pattern
  extractArgumentsFromRawPattern: () ->
    @pattern = @rawPattern
    args = @rawPattern.match(/({([a-zA-Z0-9-_]+)}+)/g)
    if args?
      for arg in args
        name = arg.replace(/{/g, '').replace(/}/g, '')
        routeArgument = @addArgument(name)
        @pattern = @pattern.replace(arg, routeArgument.getMatch())


  # Add the prefix on the routes
  # @param {String} prefix The prefix to add
  # @return {String} The prefix + the pattern
  addPrefixOnRoute: (prefix) ->
    if prefix? && @needPrefix
      return prefix + @pattern
    return @pattern

  # @param {String} pattern The pattern of the route
  setPattern: (@pattern) ->
    return this

  # @param {String} bundleName The bundle name associated with the route
  setBundleName: (@bundleName) ->
    return this

  # @param {String} controllerName The controller name associated with the route
  setControllerName: (@controllerName) ->
    return this

  # @param {String} methodName The method name associated with the route
  setMethodName: (@methodName) ->
    return this

  # @param {Boolean} async The route asynchronous state
  setAsync: (@async) ->
    return this

  # @param {String} httpMethod The http method associated with the route
  setHttpMethod: (@httpMethod) ->
    return this

  # @param {String} name The name of the route
  setName: (@name) ->
    return this

  # @return {Boolean} Is the route asynchroneous ?
  isAsynchronous: () ->
    return @async

  # @return {String} The pattern of the route
  getPattern: () ->
    return @pattern

  # @return {String} The raw pattern of the route
  getRawPattern: () ->
    return @rawPattern

  # @return {String} The bundle name associated with the route
  getBundleName: () ->
    return @bundleName

  # @return {String} The controller name associated with the route
  getControllerName: () ->
    return @controllerName

  # @return {String} The method name associated with the route
  getMethodName: () ->
    return @methodName

  # @return {String} The http method associated with the route
  getHttpMethod: () ->
    return @httpMethod

  # @return {String} The name of the route
  getName: () ->
    return @name

  # @return [String] The default arguments of the route
  getDefaultArgs: () ->
    return @defaultArgs

  # @return [RouteArgument] The route arguments of the route
  getArgs: () ->
    return @arguments

  # @param {String} name The name of the argument
  # @return {String} The default value for an argument
  getDefaultValueForArg: (name) ->
    if @defaultArgs[name]?
      return @defaultArgs[name].getDefaultValue()
    return null

  # @param {String} name The name of the argument
  # @return {Boolean} Does the route contain a default arguments called 'name' ?
  hasDefaultArg: (name) ->
    if @defaultArgs[name]?
      return true
    return false

  # Inflate the arguments
  # @param [String] args The arguments
  # @return {String} The path of the argument matching
  inflateArguments: (args) ->
    path = @prefix + @rawPattern
    for name,arg of @arguments
      fullname = '{' + name + '}'
      if args? && args[name]?
        path = path.replace(fullname, args[name])
      else if @hasDefaultArg(name)
        path = path.replace(fullname, @getDefaultValueForArg(name))
      else
        path = path.replace(fullname, '')
    return path

module.exports = RouteDefinition