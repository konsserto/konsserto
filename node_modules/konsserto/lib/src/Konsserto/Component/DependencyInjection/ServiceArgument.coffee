###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

CONFIG = use('/app/config/config')

# ServiceArgument
#
# @author Jessym Reziga <jessym@konsserto.com>
class ServiceArgument

  # Class Constructor
  # @param {String} value Value of the ServiceArgument
  constructor: (@value) ->
    return this

  # @return {String} The value of the ServiceArgument
  getValue: () ->
    return @value

  # @param {String} Value of the ServiceArgument
  setValue: (@value) ->
    return this

  #  Is the value a configuration ?
  isConfiguration: () ->
    if @getValue().charAt(0) == '%'
      return true
    return false

  # @return {String} The configuration value
  getConfigurationValue: () ->
    value = @getValue()
    value.substr(1, value.length - 2)
    if CONFIG[value]?
      return CONFIG[value].replace(/'/g, "\\'")
    return 'null'

  # Get the configuration value or throw an error
  getConfiguration: () ->
    if (@isConfiguration())
      @getConfigurationValue()
    else
      throw new Error('You can\'t get the configuration dependency \'' + @getValue() + '\', because the argument is not wrapped by %')

  # @param {String} parameterContainer The parameter container
  # @return {String} The parameter container with the configuration value
  getCompilerArgument: (parameterContainer) ->
    if @isConfiguration()
      return @getConfiguration()
    else
      return parameterContainer + ".get('" + @getValue().toLowerCase() + "')"


module.exports = ServiceArgument