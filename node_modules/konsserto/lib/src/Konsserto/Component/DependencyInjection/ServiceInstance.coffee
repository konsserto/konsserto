###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

cc = use('cli-color')

Tools = use('@Konsserto/Component/Static/Tools')

#
# ServiceInstance
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class ServiceInstance


  # Class constructor
  # @param {ServiceDefinition} serviceDefinition The service definition of the service
  constructor: (@serviceDefinition) ->
    console.log('[Service] Setup ' + @getLabel() + ' Service : ' + cc.green('[' + @getDefinition().getName() + ']'))

  # @return {ServiceDefinition} The service definition of the service
  getDefinition: () ->
    return @serviceDefinition

  # @return {String} The label (type) of the service
  getLabel: () ->
    switch @getDefinition().getType()
      when 'kernel' then return 'Core'
      when 'konsserto' then return 'Konsserto'
      when 'global' then return 'Global'
      else
        return 'Bundle'

  # @param {ServiceDefinition} The service definition of the service instance
  setServiceDefinition: (@serviceDefinition) ->
    return this

  # @return {Object} The service instance concerned by the definition or throw an error
  getService: () ->
    try
      return use(@getDefinition().getClassName())
    catch e
      throw new Error('An error occured in ' + @getDefinition().getClassName() + '\n' + e.message)

  # @param {Object} instance The instance of the service
  setInstance: (@instance) ->
    return this

  # @return {Object} The instance of the service
  getInstance: () ->
    return @instance

  # @return {Boolean} Is the service instanciated ?
  instanceExists: () ->
    if @getInstance()?
      return true
    return false

  # Evaluate the instance of the service and set the instance
  # @param {ServiceContainer} container The service container
  evaluateInstance: (container) ->
    serviceNamespace = @getService()
    eval("instance = new serviceNamespace(" + @getDefinition().getCompilerArguments('container') + ");")
    @setInstance(instance)


module.exports = ServiceInstance