###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

ServiceArgument = use('@Konsserto/Component/DependencyInjection/ServiceArgument')

#
# ServiceDefinition
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class ServiceDefinition


	constructor:(@registeredService, @type = 'bundle') ->
		@name = @registeredService.name.toLowerCase()
		@className = @registeredService._class
		@rawArguments = @registeredService.args ? []
		@arguments = []

		for argument in @rawArguments
			@arguments.push(new ServiceArgument(argument))

	setName:(@name) ->
		return this

	setClassName:(@className) ->
		return this

	setRawArguments:(@rawArguments) ->
		return this

	setArguments:(@arguments) ->
		return this

	getName:() ->
		return @name.toLowerCase()

	getType:() ->
		return @type

	getClassName:() ->
		return @className

	getRawArguments:() ->
		return @rawArguments

	getArguments:() ->
		return @arguments

	addArguments:(serviceArgument) ->
		@arguments.push(serviceArgument)

	getCompilerArguments:(parameterContainer) ->
		args = []

		for argument in @arguments
			args.push(argument.getCompilerArgument(parameterContainer))

		return args

	getServiceArgumentsOnly:() ->
		args = []

		for argument in @arguments
			if !argument.isConfiguration()
				args.push(argument)

		return args


module.exports = ServiceDefinition