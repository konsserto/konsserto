###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

ServiceArgument = use('@Konsserto/Component/DependencyInjection/ServiceArgument')

# ServiceDefinition
#
# @author Jessym Reziga <jessym@konsserto.com>
class ServiceDefinition


  # Class constructor
  # @param {Object} registeredService Service in the config/services file
  constructor: (@registeredService, @type = 'bundle') ->
    @name = @registeredService.name.toLowerCase()
    @className = @registeredService._class
    @rawArguments = @registeredService.args ? []
    @arguments = []
    for argument in @rawArguments
      @arguments.push(new ServiceArgument(argument))

  # @param {String} name The name of the service
  setName: (@name) ->
    return this

  # @param {String} className The class name of the service
  setClassName: (@className) ->
    return this

  # @param [String] rawArguments The raw arguments of the service
  setRawArguments: (@rawArguments) ->
    return this

  # @param [String] arguments The arguments of the service
  setArguments: (@arguments) ->
    return this

  # @return {String} The name of the service
  getName: () ->
    return @name.toLowerCase()

  # @return {String} The type of the service
  getType: () ->
    return @type

  # @return {String} The class name of the service
  getClassName: () ->
    return @className

  # @return [String] The raw arguments of the service
  getRawArguments: () ->
    return @rawArguments

  # @return [String] The arguments of the service
  getArguments: () ->
    return @arguments

  # @param {String} serviceArgument Add a new serviceArgument to the service
  addArguments: (serviceArgument) ->
    @arguments.push(serviceArgument)

  # Get the arguments compiler
  # @param {Object} parameterContainer The parameters container
  # @return [Object] The args compiled
  getCompilerArguments: (parameterContainer) ->
    args = []
    for argument in @arguments
      args.push(argument.getCompilerArgument(parameterContainer))
    return args

  # Get the service arguments only (not the configurations)
  # @return [Object] The args concerned
  getServiceArgumentsOnly: () ->
    args = []
    for argument in @arguments
      if !argument.isConfiguration()
        args.push(argument)
    return args


module.exports = ServiceDefinition