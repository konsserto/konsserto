
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var CONFIG, ServiceArgument;

CONFIG = use('/app/config/config');

ServiceArgument = (function() {
  function ServiceArgument(value) {
    this.value = value;
  }

  ServiceArgument.prototype.getValue = function() {
    return this.value;
  };

  ServiceArgument.prototype.setValue = function(value) {
    this.value = value;
    return this;
  };

  ServiceArgument.prototype.isConfiguration = function() {
    if (this.getValue().charAt(0) === '%') {
      return true;
    }
    return false;
  };

  ServiceArgument.prototype.getConfigurationValue = function() {
    var value;
    value = this.getValue();
    value.substr(1, value.length - 2);
    if (CONFIG[value] != null) {
      return CONFIG[value].replace(/'/g, "\\'");
    }
    return 'null';
  };

  ServiceArgument.prototype.getConfiguration = function() {
    if (this.isConfiguration()) {
      return this.getConfigurationValue();
    } else {
      throw new Error('You can\'t get the configuration dependency \'' + this.getValue() + '\', because the argument is not wrapped by %');
    }
  };

  ServiceArgument.prototype.getCompilerArgument = function(parameterContainer) {
    if (this.isConfiguration()) {
      return this.getConfiguration();
    } else {
      return parameterContainer + ".get('" + this.getValue().toLowerCase() + "')";
    }
  };

  return ServiceArgument;

})();

module.exports = ServiceArgument;
