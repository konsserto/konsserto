
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var ServiceArgument, ServiceDefinition;

ServiceArgument = use('@Konsserto/Component/DependencyInjection/ServiceArgument');

ServiceDefinition = (function() {
  function ServiceDefinition(registeredService, type) {
    var argument, _i, _len, _ref, _ref1;
    this.registeredService = registeredService;
    this.type = type != null ? type : 'bundle';
    this.name = this.registeredService.name.toLowerCase();
    this.className = this.registeredService._class;
    this.rawArguments = (_ref = this.registeredService.args) != null ? _ref : [];
    this["arguments"] = [];
    _ref1 = this.rawArguments;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      argument = _ref1[_i];
      this["arguments"].push(new ServiceArgument(argument));
    }
  }

  ServiceDefinition.prototype.setName = function(name) {
    this.name = name;
    return this;
  };

  ServiceDefinition.prototype.setClassName = function(className) {
    this.className = className;
    return this;
  };

  ServiceDefinition.prototype.setRawArguments = function(rawArguments) {
    this.rawArguments = rawArguments;
    return this;
  };

  ServiceDefinition.prototype.setArguments = function(_arguments) {
    this["arguments"] = _arguments;
    return this;
  };

  ServiceDefinition.prototype.getName = function() {
    return this.name.toLowerCase();
  };

  ServiceDefinition.prototype.getType = function() {
    return this.type;
  };

  ServiceDefinition.prototype.getClassName = function() {
    return this.className;
  };

  ServiceDefinition.prototype.getRawArguments = function() {
    return this.rawArguments;
  };

  ServiceDefinition.prototype.getArguments = function() {
    return this["arguments"];
  };

  ServiceDefinition.prototype.addArguments = function(serviceArgument) {
    return this["arguments"].push(serviceArgument);
  };

  ServiceDefinition.prototype.getCompilerArguments = function(parameterContainer) {
    var args, argument, _i, _len, _ref;
    args = [];
    _ref = this["arguments"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      argument = _ref[_i];
      args.push(argument.getCompilerArgument(parameterContainer));
    }
    return args;
  };

  ServiceDefinition.prototype.getServiceArgumentsOnly = function() {
    var args, argument, _i, _len, _ref;
    args = [];
    _ref = this["arguments"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      argument = _ref[_i];
      if (!argument.isConfiguration()) {
        args.push(argument);
      }
    }
    return args;
  };

  return ServiceDefinition;

})();

module.exports = ServiceDefinition;
