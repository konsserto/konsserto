###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

filesystem = use('fs')

GLOBAL_SERVICES = use('/app/config/services')
KERNEL_SERVICES = use('@Konsserto/Component/DependencyInjection/services/services')
ServiceDefinition = use('@Konsserto/Component/DependencyInjection/ServiceDefinition')
ServiceInstance = use('@Konsserto/Component/DependencyInjection/ServiceInstance')

#
# ServiceContainer injects services in a container accessible on an application
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class ServiceContainer


	constructor:(@kernel) ->
		@services = {}
		@loaded = {}
		@set('Kernel',@kernel)
		@set('Container',this)
		@setupKernel()
		@setupGlobalAndBundles()
		console.log '[Container] DI Services OK'

	setupKernel:() ->
		@addServiceInstance(KERNEL_SERVICES,'konsserto')
		@updateForInjectors()

	setupGlobalAndBundles:() ->
		# /app/config/services.js
		@addServiceInstance(GLOBAL_SERVICES,'global')

		# /src/bundles/.../config/services.js
		bundles = @get('Application').getBundles()

		for bundleName,bundle of bundles
			if filesystem.existsSync(bundle.getConfigPath() + '/services.js')
				services = use(bundle.getConfigNamespace() + '/services')
				@addServiceInstance(services)

		@updateForInjectors()

	addServiceInstance:(services,type = null) ->
		for service in services
			serviceDefinition = new ServiceDefinition(service,type)
			serviceInstance = new ServiceInstance(serviceDefinition)
			@services[serviceDefinition.getName()] = serviceInstance

	compile:(service) ->
		for serviceArgument in service.getDefinition().getServiceArgumentsOnly()
			@compile(@getServiceInstance(serviceArgument.getValue()))

		if (!service.instanceExists())
			service.evaluateInstance(this)

	# Check if old services (with args) need dependencies from latest registered services /!\ For Kernel purpose only !
	updateForInjectors:() =>
		for name, service of @services
			@compile(service)

	# Inject a service manually => Need to updateForInjectors after /!\ For Kernel purpose only !
	inject:(serviceDefinition,value) =>
		serviceInstance = new ServiceInstance(serviceDefinition)
		serviceInstance.setInstance(value)
		@services[serviceDefinition.getName()] = serviceInstance

	# Get service by name
	get:(name,debug = true) =>
		formatName = name.toLowerCase()

		if @has(formatName)
			return @services[formatName].getInstance()

		if debug
			throw new Error('Can\'t get the service : '+ name)

		return false

	has:(name) =>
		formatName = name.toLowerCase()

		if @services[formatName]?
			return true
		return false

	getServiceDefinition:(name) =>
		formatName = name.toLowerCase()

		if @has(formatName)
			return @getServiceInstance(formatName).getDefinition()
		return null

	getServiceInstance:(name) =>
		formatName = name.toLowerCase()

		if @has(formatName)
			return @services[formatName]
		return null

	set:(name,value,args = []) ->
		if @has(name)
			throw new Error('The service '+name+' is already registered in container')

		service = value.constructor

		if service._fromUsed? && service._fromUsed.charAt(0) == '@'
			serviceDefinition = new ServiceDefinition({
				name:name,
				_class:service._fromUsed,
				args:args
			},'kernel')
			@inject(serviceDefinition,value)
		else
			throw new Error('The definition of service '+name+' is not a Konsserto Service')


module.exports = ServiceContainer
