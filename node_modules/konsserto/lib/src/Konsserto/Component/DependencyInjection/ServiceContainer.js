
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var GLOBAL_SERVICES, KERNEL_SERVICES, ServiceContainer, ServiceDefinition, ServiceInstance, filesystem,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

filesystem = use('fs');

GLOBAL_SERVICES = use('/app/config/services');

KERNEL_SERVICES = use('@Konsserto/Component/DependencyInjection/services/services');

ServiceDefinition = use('@Konsserto/Component/DependencyInjection/ServiceDefinition');

ServiceInstance = use('@Konsserto/Component/DependencyInjection/ServiceInstance');

ServiceContainer = (function() {
  function ServiceContainer(kernel) {
    this.kernel = kernel;
    this.getServiceInstance = __bind(this.getServiceInstance, this);
    this.getServiceDefinition = __bind(this.getServiceDefinition, this);
    this.has = __bind(this.has, this);
    this.get = __bind(this.get, this);
    this.inject = __bind(this.inject, this);
    this.updateForInjectors = __bind(this.updateForInjectors, this);
    this.services = {};
    this.loaded = {};
    this.set('Kernel', this.kernel);
    this.set('Container', this);
    this.setupKernel();
    this.setupGlobalAndBundles();
    console.log('[Container] DI Services OK');
  }

  ServiceContainer.prototype.setupKernel = function() {
    this.addServiceInstance(KERNEL_SERVICES, 'konsserto');
    return this.updateForInjectors();
  };

  ServiceContainer.prototype.setupGlobalAndBundles = function() {
    var bundle, bundleName, bundles, services;
    this.addServiceInstance(GLOBAL_SERVICES, 'global');
    bundles = this.get('Application').getBundles();
    for (bundleName in bundles) {
      bundle = bundles[bundleName];
      if (filesystem.existsSync(bundle.getConfigPath() + '/services.js')) {
        services = use(bundle.getConfigNamespace() + '/services');
        this.addServiceInstance(services);
      }
    }
    return this.updateForInjectors();
  };

  ServiceContainer.prototype.addServiceInstance = function(services, type) {
    var service, serviceDefinition, serviceInstance, _i, _len, _results;
    if (type == null) {
      type = null;
    }
    _results = [];
    for (_i = 0, _len = services.length; _i < _len; _i++) {
      service = services[_i];
      serviceDefinition = new ServiceDefinition(service, type);
      serviceInstance = new ServiceInstance(serviceDefinition);
      _results.push(this.services[serviceDefinition.getName()] = serviceInstance);
    }
    return _results;
  };

  ServiceContainer.prototype.compile = function(service) {
    var serviceArgument, _i, _len, _ref;
    _ref = service.getDefinition().getServiceArgumentsOnly();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      serviceArgument = _ref[_i];
      this.compile(this.getServiceInstance(serviceArgument.getValue()));
    }
    if (!service.instanceExists()) {
      return service.evaluateInstance(this);
    }
  };

  ServiceContainer.prototype.updateForInjectors = function() {
    var name, service, _ref, _results;
    _ref = this.services;
    _results = [];
    for (name in _ref) {
      service = _ref[name];
      _results.push(this.compile(service));
    }
    return _results;
  };

  ServiceContainer.prototype.inject = function(serviceDefinition, value) {
    var serviceInstance;
    serviceInstance = new ServiceInstance(serviceDefinition);
    serviceInstance.setInstance(value);
    return this.services[serviceDefinition.getName()] = serviceInstance;
  };

  ServiceContainer.prototype.get = function(name, debug) {
    var formatName;
    if (debug == null) {
      debug = true;
    }
    formatName = name.toLowerCase();
    if (this.has(formatName)) {
      return this.services[formatName].getInstance();
    }
    if (debug) {
      throw new Error('Can\'t get the service : ' + name);
    }
    return false;
  };

  ServiceContainer.prototype.has = function(name) {
    var formatName;
    formatName = name.toLowerCase();
    if (this.services[formatName] != null) {
      return true;
    }
    return false;
  };

  ServiceContainer.prototype.getServiceDefinition = function(name) {
    var formatName;
    formatName = name.toLowerCase();
    if (this.has(formatName)) {
      return this.getServiceInstance(formatName).getDefinition();
    }
    return null;
  };

  ServiceContainer.prototype.getServiceInstance = function(name) {
    var formatName;
    formatName = name.toLowerCase();
    if (this.has(formatName)) {
      return this.services[formatName];
    }
    return null;
  };

  ServiceContainer.prototype.set = function(name, value, args) {
    var service, serviceDefinition;
    if (args == null) {
      args = [];
    }
    if (this.has(name)) {
      throw new Error('The service ' + name + ' is already registered in container');
    }
    service = value.constructor;
    if ((service._fromUsed != null) && service._fromUsed.charAt(0) === '@') {
      serviceDefinition = new ServiceDefinition({
        name: name,
        _class: service._fromUsed,
        args: args
      }, 'kernel');
      return this.inject(serviceDefinition, value);
    } else {
      throw new Error('The definition of service ' + name + ' is not a Konsserto Service');
    }
  };

  return ServiceContainer;

})();

module.exports = ServiceContainer;
