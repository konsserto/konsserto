###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###
filesystem = use('fs')
mixin = use('utils-merge')
url_resolver = use('url-resolver')

CONFIG = use('/app/config/config')
InvalidArgumentException = use('@Konsserto/Component/Templating/Exception/InvalidArgumentException')

#
# ViewEngine
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class ViewEngine


  constructor: (@application, @container) ->
    @app = application.app
    @prepareViewEngine()

  prepareViewEngine: () ->
    engine = ''
    if CONFIG.templateEngine && CONFIG.templateEngine != ''
      engine = CONFIG.templateEngine
      engineName = if CONFIG.templateEngine == 'twig' then 'ks-twig' else CONFIG.templateEngine
    else
      engine = 'twig'
      engineName = 'ks-twig'
    @engine = use(engineName)
    @app.set('view engine', CONFIG.templateEngine);
    @app.engine('.' + CONFIG.templateEngine, @engine.__express);
    @fixRenderPath()
    @app.set('views', '')
    console.log '[Templating] View Engine ' + engine + ' OK'

  fixRenderPath: () ->
    container = @container
    @app.render = (name, options = {}, fn) ->
      opts = {}
      cache = @cache
      engines = @engines
      view = undefined

      configs = CONFIG
      options['app'] = {
        configuration: configs,
        host: container.get('router').getHost()
        request: container.get('request_stack').getCurrentRequest()
      }

      if 'function' is typeof options
        fn = options
        options = {}


      mixin(opts, @locals)
      mixin(opts, options._locals)  if options._locals
      mixin(opts, options)
      opts.cache = (if null is opts.cache then @enabled('view cache') else opts.cache)
      view = cache[name]  if opts.cache

      unless view
        view = new (@get('view'))(name,
          defaultEngine: @get('view engine')
          root: @get('views')
          engines: engines
        )
        view.path = url_resolver.processViewPath(name);
        unless view.path
          err = new Error('Failed to lookup view \'' + name + '\' in views directory \'' + view.root + '\'')
          err.view = view
          return fn(err)

        # prime the cache
        cache[name] = view  if opts.cache

      # render
      try
        view.render opts, fn
      catch err
        fn err

      return

  getEngine: () ->
    return @engine

  isValidTemplate: (template) ->
    try
      processed = url_resolver.processViewPath(template);
      filesystem.readFileSync(processed)
    catch e
      throw new InvalidArgumentException('Unable to find template ' + template)

  renderResponse: (view, parameters = {}, res) ->
    try
      return res.render(view, parameters)
    catch e
      throw e

  render: (view, parameters = {}) ->
    try
      return @engine.renderOnly(view, parameters)
    catch e
      throw e


module.exports = ViewEngine;