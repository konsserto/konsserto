###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

forms = use('ks-forms')
formFields = forms.fields
formValidators = forms.validators
formWidgets = forms.widgets
wait = use('wait.for')

FormField = use('@Konsserto/Component/Form/FormField')
Tools = use('@Konsserto/Component/Static/Tools')

#
# Form
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class Form


	constructor:(@formName,@predata,options,@req,@templating, @entityManager) ->
		@fields = {}
		@csrfRequired = false
		@method = options['method'] ? 'POST'
		@action = options['action'] ? ''

		if (@req['csrfToken']?)
			@addCsrfProtection()

		@predata = @extractDataFromEntity(@predata) if @predata.constructor.name != 'Object'

	getPredata:()-> 
		return @predata

	extractDataFromEntity :(data)->
		return data

	getName:()->
		return @formName

	addCsrfProtection:() ->
		@add('_csrf', 'string', {required:@isCsrfRequired(), value:@req.csrfToken(), widget: formWidgets.hidden() })

	isCsrfRequired:(required) ->

		if required?
			@csrfRequired = required

		return @csrfRequired

	add:(name, type = 'string', options = {}) =>
		@fields[name] = new FormField(name,@formName,type,options,@predata)
		return this

	getForm:() =>
		@compiledForm = forms.create(@compileForm())
		return this

	compileForm:() =>
		compiled = {}

		for name,field of @getFields()
			options = field.getOptions()
			compiled[field.getFullname()] = eval('formFields.'+field.getType())(options)
			@fields[name].setCompiled(compiled[field.getFullname()])

		return compiled

	getFields:() =>
		return @fields

	createView:() ->
		@getForm() if (@compiledForm == undefined || @compiledForm == null)
		return this

	getMethod: =>
		return @method

	getAction: =>
		return @action

	setMethod:(@method)->
		return this

	setAction:(@action)->
		return this

	getNativeForm:() =>

		if @compiledForm == undefined
			throw new Error('You have to getForm first')

		return @compiledForm

	getNativeFields:(name) =>

		if name?
			return @getNativeForm().fields[name]

		return @getNativeForm().fields

	handle:(request, stdCallback) =>

		@compiledForm.handle(request,
		success:(f)->
			return stdCallback(0,f)
		,error:(f)->
			return stdCallback(0,f)
		,empty:(f)->
			return stdCallback(0,f)
		);

	handleRequest:(request) =>
		object = @getPredata()

		if request.method.toUpperCase() == 'GET' && request.query[@formName]?
			for k,v of @getFields()
				request.body[v.getFullname()] = request.query[@formName][k] ? ''
			request.body['_csrf'] = request.query['_csrf']

		@compiledForm = wait.for(@handle,request)

		for nameField,formField of @getFields()
			@fields[nameField].setCompiled(@getNativeFields(formField.getFullname()))
			@fields[nameField].handleSubmit()
			namespace = @entityManager.getLogicalPathByNamespace(object.constructor._fromUsed);
			if namespace? && object.constructor.model.fields[nameField]?
				object[nameField] = formField.getData()

	isValid:() =>
		return if @getNativeForm().isValid? then @getNativeForm().isValid() else false

	getData:() =>
		data = {}

		for k,formField of @getNativeFields()
			data[formField.shortname] = formField.data

		return data

	get:(name) =>
		return @fields[name]

	formStart:(options = {},view = 'TwigBundle:Form:form-start.html.twig') =>
		method = options['method'] ? @getMethod()
		action = options['action'] ? @getAction()
		@templating.render(view,{method:method, action:action})

	formErrors:(errors = [], view = 'TwigBundle:Form:form-errors.html.twig') =>
		for name,compiledField of @getNativeFields()
			errors.push(compiledField.errorHTML()) if compiledField.errorHTML()?
		@templating.render(view,{errors:errors})

	formError:(name, view = 'TwigBundle:Form:form-error.html.twig') =>
		field = @fields[name]
		compiledField = field.getCompiled()
		error = if compiledField.errorHTML()? then '' else compiledField.errorHTML()
		@templating.render(view,{error:error})

	formLabel:(name, view = 'TwigBundle:Form:form-label.html.twig') =>
		field = @fields[name]
		compiledField = field.getCompiled()
		label = compiledField.labelHTML(name)
		@templating.render(view,{label:label})

	formWidget:(name, view = 'TwigBundle:Form:form-widget.html.twig') =>
		field = @fields[name]
		compiledField = field.getCompiled()
		widget = compiledField.widget.toHTML(name,compiledField)
		compiledField.rendered = true
		@templating.render(view,{widget:widget})

	formRow:(name, view = 'TwigBundle:Form:form-row.html.twig') =>
		field = @fields[name]
		@templating.render(view,{form:this,field:field})

	formEnd:(view = 'TwigBundle:Form:form-end.html.twig') =>
		@templating.render(view)

	formRest:() =>
		renderRest = ''

		for k,v of @fields
			if !v.getCompiled().rendered
				renderRest += @formRow(k)

		return renderRest

	formWidgets:() =>
		renderRest = ''

		for k,v of @fields
			renderRest += @formRow(k)

		return renderRest


module.exports = Form