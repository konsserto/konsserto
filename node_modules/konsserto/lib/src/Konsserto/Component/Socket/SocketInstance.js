
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var SocketInstance, Tools;

Tools = use('@Konsserto/Component/Static/Tools');

SocketInstance = (function() {
  function SocketInstance(socketDefinition, controllerDefinition) {
    var socket;
    this.socketDefinition = socketDefinition;
    this.controllerDefinition = controllerDefinition;
    this.controller = new controllerDefinition;
    socket = this.getDefinition();
    console.log('[Socket] ' + this.getControllerName() + ':' + this.getMethod() + ' | event: ' + socket.getRawEvent());
  }

  SocketInstance.prototype.setController = function(controller) {
    this.controller = controller;
    return this;
  };

  SocketInstance.prototype.setSocketDefinition = function(socketDefinition) {
    this.socketDefinition = socketDefinition;
    return this;
  };

  SocketInstance.prototype.setRequest = function(request) {
    this.request = request;
    this.getController().setRequest(this.request);
    return this;
  };

  SocketInstance.prototype.setResponse = function(response) {
    this.response = response;
    this.getController().setResponse(this.response);
    return this;
  };

  SocketInstance.prototype.setControllerDefinition = function(controllerDefinition) {
    this.controllerDefinition = controllerDefinition;
    return this;
  };

  SocketInstance.prototype.getDefinition = function() {
    return this.socketDefinition;
  };

  SocketInstance.prototype.getController = function() {
    return this.controller;
  };

  SocketInstance.prototype.getRequest = function() {
    return this.request;
  };

  SocketInstance.prototype.getResponse = function() {
    return this.response;
  };

  SocketInstance.prototype.getControllerDefinition = function() {
    return this.controllerDefinition;
  };

  SocketInstance.prototype.getControllerName = function() {
    return this.getController().constructor.name;
  };

  SocketInstance.prototype.getMethod = function() {
    return this.getDefinition().getMethodName() + 'Action';
  };

  SocketInstance.prototype.methodExists = function() {
    var method;
    method = this.getMethod();
    if ((method == null) || (this.getController()[method] == null)) {
      return false;
    }
    return true;
  };

  SocketInstance.prototype.getMethodArguments = function() {
    return [];
  };

  SocketInstance.prototype.getMethodInstance = function() {
    if (this.getController()[this.getMethod()] != null) {
      return this.getController()[this.getMethod()];
    }
    throw new Error('No method ' + this.getMethod() + ' in controller ' + this.getDefinition().getControllerName());
  };

  SocketInstance.prototype.getResponse = function() {
    return Tools.call(this.getMethodInstance(), this.getMethodArguments());
  };

  SocketInstance.prototype.getControllerMethod = function() {
    return this.getController()[this.getMethod()];
  };

  return SocketInstance;

})();

module.exports = SocketInstance;
