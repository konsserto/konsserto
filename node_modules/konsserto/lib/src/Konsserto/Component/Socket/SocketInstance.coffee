###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

Tools = use('@Konsserto/Component/Static/Tools')

# SocketInstance
# @author Jessym Reziga <jessym@konsserto.com>
class SocketInstance

  # Class constructor
  # @param {SocketDefinition} socketDefinition The socket definition object concerned
  # @param {Controller} controllerDefinition The controller definition
  constructor: (@socketDefinition, @controllerDefinition) ->
    @controller = new controllerDefinition
    socket = @getDefinition()
    console.log('[Socket] ' + @getControllerName() + ':' + @getMethod() + ' | event: ' + socket.getRawEvent())

  # @param {Controller} controller The controller
  setController: (@controller) ->
    return this

  # @param {SocketDefinition} socketDefinition The socket definition object concerned
  setSocketDefinition: (@socketDefinition) ->
    return this

  # @param {Object} request The request object
  setRequest: (@request) ->
    @getController().setRequest(@request)
    return this

  # @param {Object} response The response object
  setResponse: (@response) ->
    @getController().setResponse(@response)
    return this

  # @param {Controller} controllerDefinition The controller definition
  setControllerDefinition: (@controllerDefinition) ->
    return this

  # @return {SocketDefinition} The socket definition
  getDefinition: () ->
    return @socketDefinition

  # @return {Controller} The controller object concerned by the socket
  getController: () ->
    return @controller

  # @return {Object}  The request object
  getRequest: () ->
    return @request

  # @return {Object}  The response object
  getResponse: () ->
    return @response

  # @return {Controller}  The controller definition object
  getControllerDefinition: () ->
    return @controllerDefinition

  # @return {String}  The controller name
  getControllerName: () ->
    return @getController().constructor.name

  # @return {String}  The method name
  getMethod: () ->
    return @getDefinition().getMethodName() + 'Action'

  # @return {Boolean}  Does the method exist in the controller ?
  methodExists: () ->
    method = @getMethod()
    if !method? || !@getController()[method]?
      return false
    return true

  # @return [Object]  Get the arguments
  getMethodArguments: () ->
    return []

  # @return {Object} Get the method object
  getMethodInstance: () ->
    if @getController()[@getMethod()]?
      return @getController()[@getMethod()]
    throw new Error('No method ' + @getMethod() + ' in controller ' + @getDefinition().getControllerName())

  # @return {Object} The response
  getResponse: () ->
    return Tools.call(@getMethodInstance(), @getMethodArguments())

  # @return {Object} The controller's method
  getControllerMethod: () ->
    return @getController()[@getMethod()]


module.exports = SocketInstance