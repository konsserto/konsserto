
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var CONFIG, Finder, Tools, Translator;

CONFIG = use('/app/config/config');

Finder = use('@Konsserto/Component/Finder/Finder');

Tools = use('@Konsserto/Component/Static/Tools');

Translator = (function() {
  function Translator(locale, application) {
    this.application = application;
    this.catalogues = {};
    if (locale != null) {
      this.locale = locale;
      this.loadCatalogues();
    }
  }

  Translator.prototype.getLocale = function() {
    if (CONFIG['locale'] != null) {
      return CONFIG['locale'];
    }
    return 'en';
  };

  Translator.prototype.trans = function(id, parameters, domain, locale) {
    var key, value;
    if (parameters == null) {
      parameters = {};
    }
    if (locale == null) {
      locale = null;
    }
    if (locale == null) {
      locale = this.getLocale();
    }
    if (domain == null) {
      domain = 'translations';
    }
    if (!this.catalogueHasDomainLocale(domain, locale)) {
      return id;
    }
    if (this.catalogues[domain][locale][id] != null) {
      id = this.catalogues[domain][locale][id];
      for (key in parameters) {
        value = parameters[key];
        eval('id = id.replace(/' + key + '/g,\'' + value + '\')');
      }
    }
    return id;
  };

  Translator.prototype.catalogueHasDomainLocale = function(domain, locale) {
    if (this.catalogues[domain] != null) {
      if (this.catalogues[domain][locale] != null) {
        return true;
      }
    }
    return false;
  };

  Translator.prototype.loadCatalogues = function() {
    var bundle, bundleName, currentDomain, currentLocale, domainSpecs, domainsFiles, file, module, name, path, _ref, _results;
    _ref = this.application.getBundles();
    _results = [];
    for (bundleName in _ref) {
      bundle = _ref[bundleName];
      domainsFiles = new Finder().files().notRecursive()["in"](bundle.getTranslationsPath()).ext('.js').end();
      path = bundle.getTranslationsNamespace() + '/';
      _results.push((function() {
        var _i, _len, _results1;
        _results1 = [];
        for (_i = 0, _len = domainsFiles.length; _i < _len; _i++) {
          file = domainsFiles[_i];
          name = file.getName();
          domainSpecs = name.split('.');
          if (domainSpecs.length === 3) {
            currentDomain = domainSpecs[0];
            currentLocale = domainSpecs[1];
            if (!this.catalogues[currentDomain]) {
              this.catalogues[currentDomain] = {};
            }
            if (this.catalogues[currentDomain][currentLocale] == null) {
              this.catalogues[currentDomain][currentLocale] = {};
            }
            module = use(path + name);
            this.catalogues[currentDomain][currentLocale] = Tools.mergeObjects(this.catalogues[currentDomain][currentLocale], module, true);
            _results1.push(this.catalogues[currentDomain]['_fromBundle'] = bundleName);
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  return Translator;

})();

module.exports = Translator;
