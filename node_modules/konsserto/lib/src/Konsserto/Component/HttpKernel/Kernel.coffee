###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 * (c) Marvin Frachet <marvin@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

cc = use('cli-color')
wait = use('wait.for')

CONFIG = use('/app/config/config')
ExceptionHandler = use('@Konsserto/Component/Debug/ExceptionHandler')
HttpRequestException = use('@Konsserto/Component/HttpKernel/Exception/HttpRequestException')
ServiceContainer = use('@Konsserto/Component/DependencyInjection/ServiceContainer')
Tools = use('@Konsserto/Component/Static/Tools')

#
# Kernel manage boot process and server's requests
#
# @author Jessym Reziga <jessym@konsserto.com>
# @version version 0.1
#
class Kernel

	# Version release number
	@VERSION = '0.0.46'

	# Version unique ID
	@VERSION_ID = 1

	# Constructor
	#
	# @param environment [String] the enironment tag
	# @param debug [Boolean] the debug mode
	# @param mode [String] application/console tag mode
	#
	constructor: (@environment = 'dev', @debug = true, @mode = 'app') ->
		global.NODE_ENV = @environment
		global.env = @environment
		@booted = false

	# @return [String] returns the environment tag
	getEnvironment: () ->
		return @environment

	# @return [String] returns the debug mode
	getDebug: () ->
		return @debug

	# Start boot sequence, initialize the service container and bundles
	boot: () ->
		@checkMode()
		@initContainer()

		for name,bundle of @container.get('Application').getBundles()
			bundle.setContainer(@container)
			bundle.boot()

		@booted = true

	# Shutdown sequence, close the service container and bundles
	#
	# @param exitCode [Integer] default exit status code
	# @return [Integer] the exit state code
	#
	shutdown: (exitCode = -1) ->
		console.log('\n' + cc.white.bgRed('[Power OFF]') + ' Shutdown Konsserto')

		if @booted == false
			return

		@booted = false

		for name,bundle of @container.get('Application').getBundles()
			bundle.shutdown()
			bundle.setContainer(undefined)

		console.log('[Container] Shutdown Service Container\n')
		@container = null

		return process.exit(exitCode)

	# @return [Boolean] kernel state
	isBooted: () ->
		return @booted

	# Instantiate the service container
	initContainer: () ->
		@container = new ServiceContainer(this)
		@requestStack = @container.get('Request_Stack')

	# Check application/console tag mode and nullify the console log output
	checkMode: () ->
		if @mode == 'console'
			console.log = () ->

	# Try to handle an express route
	#
	# @param route [RouteInstance] the route instance
	#
	handle: (route) ->
		try
			return @handleRaw(route)
		catch e
			@finishRequest(route.getRequest())
			throw e

	# Handle an express route and call the controller
	#
	# @param route [RouteInstance] the route instance
	#
	handleRaw: (route) ->
		@requestStack.push(route.getRequest());
		definition = route.getDefinition()

		if !route.methodExists()
			throw new Error('Method ' + route.getMethod() + ' doesn\'t exists in ' + definition.getControllerName())

		if (definition.isAsynchronous())
			route.getResponse()
		else
			wait.launchFiber(()=>
				route.getResponse()
			)

	# Pop the request stack for sub-requests
	#
	# @param route [Request] the express request
	#
	finishRequest: (req) ->
		@requestStack.pop(req)

	# Start konsserto on a specific port with error handler
	#
	# @param route [Integer] Listening port number
	#
	start: (port) ->
		domain = require('domain').create();
		domain.on('error', (err) =>
			response = @container.get('Request_Stack').getCurrentRequest().res
			engine = @container.get('Templating')
			ExceptionHandler.handle(err, response, engine)
		)
		domain.run(() =>
			@boot()
		)
		KSc = cc.xterm(255).bgXterm(0);
		console.log(KSc('  _  __                             _        '))
		console.log(KSc(' | |/ /                            | |       '))
		console.log(KSc(' | \' / ___  _ __  ___ ___  ___ _ __| |_ ___  '))
		console.log(KSc(' |  < / _ \\| \'_ \\/ __/ __|/ _ \\ \'__| __/ _ \\ '))
		console.log(KSc(' | . \\ (_) | | | \\__ \\__ \\  __/ |  | || (_) |'))
		console.log(KSc(' |_|\\_\\___/|_| |_|___/___/\\___|_|  \\__ \\___/ '))
		console.log(KSc(''))
		app = @container.get('Application').start(port)


module.exports = Kernel;