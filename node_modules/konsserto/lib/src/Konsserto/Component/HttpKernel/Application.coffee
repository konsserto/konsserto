###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

cc = use('cli-color')
express = use('express.io')
filesystem = use('fs')

BUNDLES = use('/app/bundles')
SECURITY = use('/app/config/security')
Tools = use('@Konsserto/Component/Static/Tools')

#
# Application
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class Application


	constructor: (stat) ->
		if !stat
			@app = express()

			if @sslActive()
				@app.https(@sslOptions()).io()
			else
				@app.http().io()

			@app.use(express.static(process.cwd(), 'web'));
			@app.set('views', '')

		@registerBundles()

	registerBundles: () ->
		@appBundles = []

		for bundle in BUNDLES
			name = bundle.getName()

			if Tools.endsWith(name.toLowerCase(), 'bundle')
				@appBundles[name] = bundle
			else
				throw new Error('A bundle name must ends with \'bundle\'')

	hasBundle: (name) ->
		if @appBundles[name]?
			return true
		return false

	getBundle: (name) ->
		return @appBundles[name]

	getBundles: () ->
		return @appBundles

	getMainApplication: () ->
		return @app

	start: (port) ->
		if @sslActive()
			@sslCheckPaths()
			console.log(cc.white.bgGreen('[Power ON]') + ' Listening on port #' + port + ' | pid: ' + process.pid + ' [HTTPS & SSL]')
		else
			console.log(cc.white.bgGreen('[Power ON]') + ' Listening on port #' + port + ' | pid: ' + process.pid + ' [HTTP]')


		@app.listen port

	sslActive: ()->
		if SECURITY.ssl_protocol? && SECURITY.ssl_protocol['active']? && SECURITY.ssl_protocol['active']
			return true
		return false

	sslCheckPaths: ()->
		if !SECURITY.ssl_protocol['key'] || SECURITY.ssl_protocol['key'] == ""
			throw new Error('The SSL Key path has not been filled in the \'server\' configuration file.')

		if !SECURITY.ssl_protocol['certificate'] || SECURITY.ssl_protocol['certificate'] == ""
			throw new Error(' The SSL Certificate path has not been filled in the \'server\' configuration file.')

	sslOptions: ()->
		options = {key: filesystem.readFileSync(SECURITY.ssl_protocol['key']), cert: filesystem.readFileSync(SECURITY.ssl_protocol['certificate']) }
		return options


module.exports = Application;