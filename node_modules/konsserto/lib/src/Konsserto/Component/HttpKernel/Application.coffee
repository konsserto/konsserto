###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

cc = use('cli-color')
express = use('express.io')
filesystem = use('fs')

BUNDLES = use('/app/bundles')
SECURITY = use('/app/config/security')
Tools = use('@Konsserto/Component/Static/Tools')

# Application
#
# @author Jessym Reziga <jessym@konsserto.com>
class Application

  # Class constructor
  # @param {Object} stat The stat of the application
  constructor: (stat) ->
    if !stat
      @app = express()
      if @sslActive()
        @app.https(@sslOptions()).io()
      else
        @app.http().io()
      @app.use(express.static(process.cwd(), 'web'));
      @app.set('views', '')
    @registerBundles()

  # Register the bundles of the application
  registerBundles: () ->
    @appBundles = []
    for bundle in BUNDLES
      name = bundle.getName()
      if Tools.endsWith(name.toLowerCase(), 'bundle')
        @appBundles[name] = bundle
      else
        throw new Error('A bundle name must ends with \'bundle\'')

  # Check if the bundle exists
  # @param {String} name The name of the bundle
  # @return {Boolean} Doest the boolean exist ?
  hasBundle: (name) ->
    if @appBundles[name]?
      return true
    return false

  # Get a bundle from the name
  # @param {String} name The name of the bundle
  # @return {Bundle} The bundle
  getBundle: (name) ->
    return @appBundles[name]

  # Get all the bundles
  # @return [Bundle] The bundles concerned
  getBundles: () ->
    return @appBundles

  # Get the main application
  # @return {Application} The main application
  getMainApplication: () ->
    return @app

  # Start the application on the port
  # @param {Number} port The port concerned
  start: (port) ->
    if @sslActive()
      @sslCheckPaths()
      console.log(cc.white.bgGreen('[Power ON]') + ' Listening on port #' + port + ' | pid: ' + process.pid + ' [HTTPS & SSL]')
    else
      console.log(cc.white.bgGreen('[Power ON]') + ' Listening on port #' + port + ' | pid: ' + process.pid + ' [HTTP]')
    @app.listen port

  # Check if the SSL is activated in the config/security file
  # @return {Boolean} True if activated, false in the other cases
  sslActive: ()->
    if SECURITY.ssl_protocol? && SECURITY.ssl_protocol['active']? && SECURITY.ssl_protocol['active']
      return true
    return false

  # Check if the certificate key and path are in the config/security file
  # Throw exception if no
  sslCheckPaths: ()->
    if !SECURITY.ssl_protocol['key'] || SECURITY.ssl_protocol['key'] == ""
      throw new Error('The SSL Key path has not been filled in the \'server\' configuration file.')

    if !SECURITY.ssl_protocol['certificate'] || SECURITY.ssl_protocol['certificate'] == ""
      throw new Error(' The SSL Certificate path has not been filled in the \'server\' configuration file.')

  # Create the serveur options with the SSL protocol
  # @return {Object} The options for the server
  sslOptions: ()->
    options = {key: filesystem.readFileSync(SECURITY.ssl_protocol['key']), cert: filesystem.readFileSync(SECURITY.ssl_protocol['certificate']) }
    return options


module.exports = Application;