###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

cc = use('cli-color')
filesystem = use('fs')
path_helper = use('path')

Command = use('@Konsserto/Component/Console/Command')
Tools = use('@Konsserto/Component/Static/Tools')

#
# Bundle is the root for all bundles
# It contains :
# - helpers
# - convention named directories
# - boot & shutdown process
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class Bundle

	# Controller's directory's name in Bundle hierarchy
	@CONTROLLER_DIR = 'Controller'

	# Resources' directory's name in Bundle hierarchy
	@RESOURCES_DIR = 'Resources'

	# Entity's directory's name in Bundle hierarchy
	@ENTITY_DIR = 'Entity'

	# Command's directory's name in Bundle hierarchy
	@COMMAND_DIR = 'Command'

	# Middleware's directory's name in Bundle hierarchy
	@MIDDLEWARE_DIR = 'Middleware'

	# config's directory's name in Bundle hierarchy
	@CONFIG_DIR = Bundle.RESOURCES_DIR + '/' + 'config'

	# public's directory's name in Bundle hierarchy
	@PUBLIC_DIR = Bundle.RESOURCES_DIR + '/' + 'public'

	# translations' directory's name in Bundle hierarchy
	@TRANSLATIONS_DIR = Bundle.RESOURCES_DIR + '/' + 'translations'

	# @return [Boolean] return true if the bundle is registered in node_modules, else false
	isVendorBundle: () ->
		return this._fromVendor

	# @return [String] returns ///
	getName: () ->
		return path_helper.basename(@_fromUsed)

	# @return [String] returns ///
	getDir: () ->
		return path_helper.dirname(this._fromUsed).replace('@', '')

	# @return [String] returns ///
	getDirSrc: () ->
		if @isVendorBundle()
			return path_helper.normalize(path_helper.dirname(this._fromVendorPath))
		return path_helper.normalize(sourceDir + '/' + @getDir())

	# @return [String] returns ///
	getNamespace: () ->
		return '@' + @getDir()

	# @return [String] returns ///
	getControllerNamespace: () ->
		return @getNamespace() + '/' + Bundle.CONTROLLER_DIR

	# @return [String] returns ///
	getMiddlewareNamespace: () ->
		return @getNamespace() + '/' + Bundle.MIDDLEWARE_DIR

	# @return [String] returns ///
	getEntityNamespace: () ->
		return @getNamespace() + '/' + Bundle.ENTITY_DIR

	# @return [String] returns ///
	getRepositoryNamespace: () ->
		return @getNamespace() + '/' + Bundle.REPOSITORY_DIR

	# @return [String] returns ///
	getConfigNamespace: () ->
		return @getNamespace() + '/' + Bundle.CONFIG_DIR

	# @return [String] returns ///
	getTranslationsNamespace: () ->
		return @getNamespace() + '/' + Bundle.TRANSLATIONS_DIR

	getPath: (root = process.cwd() + '/') ->
		projectDir = root

		if @isVendorBundle()
			return projectDir + @getDirSrc()

		srcDir = projectDir + sourceDir + '/'

		return path_helper.normalize(@getNamespace().replace('@', srcDir))

	getEntityPath: (root = null) ->
		return path_helper.normalize(@getPath(root) + '/' + Bundle.ENTITY_DIR)

	getRepositoryPath: (root = null) ->
		return path_helper.normalize(@getPath(root) + '/' + Bundle.REPOSITORY_DIR)

	getResourcesPath: (root = null) ->
		return path_helper.normalize(@getPath(root) + '/' + Bundle.RESOURCES_DIR)

	getConfigPath: (root = null) ->
		return path_helper.normalize(@getPath(root) + '/' + Bundle.CONFIG_DIR)

	getTranslationsPath: (root = null) ->
		return path_helper.normalize(@getPath(root) + '/' + Bundle.TRANSLATIONS_DIR)

	getPublicPath: (root = null) ->
		return path_helper.normalize(@getPath(root) + '/' + Bundle.PUBLIC_DIR)

	getCommandPath: (root = null) ->
		return path_helper.normalize(@getPath(root) + '/' + Bundle.COMMAND_DIR)

	getMiddlewarePath: (root = null) ->
		return path_helper.normalize(@getPath(root) + '/' + Bundle.MIDDLEWARE_DIR)

	fetchController: (name, get = false) ->
		ctl = @getControllerNamespace() + '/' + name + Bundle.CONTROLLER_DIR

		try
			if get
				return ctl

			return use(ctl)
		catch e
			throw new Error('Error while fetching controller '+ctl+ ' maybe a route reference a not existing controller \n'+e.message)

	fetchMiddleware: (name, get = false) ->
		ctl = @getMiddlewareNamespace() + '/' + name + Bundle.MIDDLEWARE_DIR

		if get
			return ctl

		return use(ctl)

	fetchEntity: (name, fullnameOnly = false) ->
		ctl = @getEntityNamespace() + '/' + name

		if fullnameOnly
			return ctl

		return use(ctl)

	boot: () ->
		console.log('[Bundle] Boot from : ' + cc.cyan(@getName()))

	shutdown: () ->
		console.log('[Bundle] Shutdown : ' + cc.red(@getName()))

	setContainer: (container) ->
		@container = container

	registerCommands: (application) ->
		commandsPath = @getCommandPath()

		if !filesystem.existsSync(commandsPath)
			return

		for file in filesystem.readdirSync(commandsPath)
			if Tools.endsWith(file, 'Command.js')
				commandSpec = use(@getNamespace() + '/' + Bundle.COMMAND_DIR + '/' + file)

				if commandSpec.__super__.constructor.name == 'Command'
					application.add(new commandSpec())


module.exports = Bundle