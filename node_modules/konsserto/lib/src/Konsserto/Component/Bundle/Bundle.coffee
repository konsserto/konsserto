###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

cc = use('cli-color')
filesystem = use('fs')
path_helper = use('path')

Command = use('@Konsserto/Component/Console/Command')
Tools = use('@Konsserto/Component/Static/Tools')

#
# Bundle is the root for all bundles
# It contains :
# - helpers
# - convention named directories
# - boot & shutdown process
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class Bundle

  # Controller's directory's name in Bundle hierarchy
  @CONTROLLER_DIR = 'Controller'

  # Resources' directory's name in Bundle hierarchy
  @RESOURCES_DIR = 'Resources'

  # Entity's directory's name in Bundle hierarchy
  @ENTITY_DIR = 'Entity'

  # Command's directory's name in Bundle hierarchy
  @COMMAND_DIR = 'Command'

  # Middleware's directory's name in Bundle hierarchy
  @MIDDLEWARE_DIR = 'Middleware'

  # config's directory's name in Bundle hierarchy
  @CONFIG_DIR = Bundle.RESOURCES_DIR + '/' + 'config'

  # public's directory's name in Bundle hierarchy
  @PUBLIC_DIR = Bundle.RESOURCES_DIR + '/' + 'public'

  # translations' directory's name in Bundle hierarchy
  @TRANSLATIONS_DIR = Bundle.RESOURCES_DIR + '/' + 'translations'

  # @return {Boolean} return true if the bundle is registered in node_modules, else false
  isVendorBundle: () ->
    return this._fromVendor

  # @return {String} The name of the bundle
  getName: () ->
    return path_helper.basename(@_fromUsed)

  # @return {String} The directory path of the bundle
  getDir: () ->
    return path_helper.dirname(this._fromUsed).replace('@', '')

  # @return {String} The directory path (normalized) of the bundle
  getDirSrc: () ->
    if @isVendorBundle()
      return path_helper.normalize(path_helper.dirname(this._fromVendorPath))
    return path_helper.normalize(sourceDir + '/' + @getDir())

  # @return {String} The namespace concerned by the bundle
  getNamespace: () ->
    return '@' + @getDir()

  # @return {String} The controller path concerned by the namespace of the bundle
  getControllerNamespace: () ->
    return @getNamespace() + '/' + Bundle.CONTROLLER_DIR

  # @return {String} The middleware path concerned by the namespace of the bundle
  getMiddlewareNamespace: () ->
    return @getNamespace() + '/' + Bundle.MIDDLEWARE_DIR

  # @return {String} The entity path concerned by the namespace of the bundle
  getEntityNamespace: () ->
    return @getNamespace() + '/' + Bundle.ENTITY_DIR

  # @return {String} The repository path concerned by the namespace of the bundle
  getRepositoryNamespace: () ->
    return @getNamespace() + '/' + Bundle.REPOSITORY_DIR

  # @return {String} The configuration path concerned by the namespace of the bundle
  getConfigNamespace: () ->
    return @getNamespace() + '/' + Bundle.CONFIG_DIR

  # @return {String} The translation path concerned by the namespace of the bundle
  getTranslationsNamespace: () ->
    return @getNamespace() + '/' + Bundle.TRANSLATIONS_DIR

  # @param {String} root Root directory, default is process.cwd()
  # @return {String} The path of the bundle (with the source directory)
  getPath: (root = process.cwd() + '/') ->
    projectDir = root
    if @isVendorBundle()
      return projectDir + @getDirSrc()
    srcDir = projectDir + sourceDir + '/'
    return path_helper.normalize(@getNamespace().replace('@', srcDir))

  # @param {String} root Root directory, default is null
  # @return {String} The entity path from the source directory
  getEntityPath: (root = null) ->
    return path_helper.normalize(@getPath(root) + '/' + Bundle.ENTITY_DIR)

  # @param {String} root Root directory, default is null
  # @return {String} The repository path from the source directory
  getRepositoryPath: (root = null) ->
    return path_helper.normalize(@getPath(root) + '/' + Bundle.REPOSITORY_DIR)

  # @param {String} root Root directory, default is null
  # @return {String} The resources path from the source directory
  getResourcesPath: (root = null) ->
    return path_helper.normalize(@getPath(root) + '/' + Bundle.RESOURCES_DIR)

  # @param {String} root Root directory, default is null
  # @return {String} The configurations path from the source directory
  getConfigPath: (root = null) ->
    return path_helper.normalize(@getPath(root) + '/' + Bundle.CONFIG_DIR)

  # @param {String} root Root directory, default is null
  # @return {String} The translation path from the source directory
  getTranslationsPath: (root = null) ->
    return path_helper.normalize(@getPath(root) + '/' + Bundle.TRANSLATIONS_DIR)

  # @param {String} root Root directory, default is null
  # @return {String} The public path from the source directory
  getPublicPath: (root = null) ->
    return path_helper.normalize(@getPath(root) + '/' + Bundle.PUBLIC_DIR)

  # @param {String} root Root directory, default is null
  # @return {String} The command path from the source directory
  getCommandPath: (root = null) ->
    return path_helper.normalize(@getPath(root) + '/' + Bundle.COMMAND_DIR)

  # @param {String} root Root directory, default is null
  # @return {String} The middleware path from the source directory
  getMiddlewarePath: (root = null) ->
    return path_helper.normalize(@getPath(root) + '/' + Bundle.MIDDLEWARE_DIR)

  # @param {String} name The name of the controller to fetch
  # @param {Boolean} get Is the controller already loaded ?
  # @return {Controller} The fetched controller
  fetchController: (name, get = false) ->
    ctl = @getControllerNamespace() + '/' + name + Bundle.CONTROLLER_DIR
    try
      if get
        return ctl

      return use(ctl)
    catch e
      throw new Error('Error while fetching controller ' + ctl + ' maybe a route reference a not existing controller \n' + e.message)

  # @param {String} name The name of the middleware to fetch
  # @param {Boolean} get Is the middleware already loaded ?
  # @return {Middleware} The fetched middleware
  fetchMiddleware: (name, get = false) ->
    ctl = @getMiddlewareNamespace() + '/' + name + Bundle.MIDDLEWARE_DIR
    if get
      return ctl
    return use(ctl)

  # @param {String} name The name of the entity to fetch
  # @param {Boolean} fullnameOnly If the name fullNameOnly ?
  # @return {Middleware} The fetched entity
  fetchEntity: (name, fullnameOnly = false) ->
    ctl = @getEntityNamespace() + '/' + name
    if fullnameOnly
      return ctl
    return use(ctl)

  # Log the bundle booting
  boot: () ->
    console.log('[Bundle] Boot from : ' + cc.cyan(@getName()))

  # Log the bundle shutdown
  shutdown: () ->
    console.log('[Bundle] Shutdown : ' + cc.red(@getName()))

  # @param {ServiceContainer} container The unique instance of the ServiceContainer
  setContainer: (container) ->
    @container = container

  # Registers the commands of the bundle
  # @param {ServiceContainer} container The unique instance of the Application
  registerCommands: (application) ->
    commandsPath = @getCommandPath()

    if !filesystem.existsSync(commandsPath)
      return

    for file in filesystem.readdirSync(commandsPath)
      if Tools.endsWith(file, 'Command.js')
        commandSpec = use(@getNamespace() + '/' + Bundle.COMMAND_DIR + '/' + file)

        if commandSpec.__super__.constructor.name == 'Command'
          application.add(new commandSpec())


module.exports = Bundle