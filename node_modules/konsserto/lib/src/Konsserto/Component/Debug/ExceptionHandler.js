
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var ExceptionHandler, cc, filesystem;

cc = use('cli-color');

filesystem = use('fs');

ExceptionHandler = (function() {
  function ExceptionHandler() {}

  ExceptionHandler.handle = function(exception, response, engine, status, quiet, charset) {
    this.exception = exception;
    this.response = response;
    this.engine = engine;
    this.status = status != null ? status : 500;
    this.quiet = quiet != null ? quiet : false;
    this.charset = charset != null ? charset : 'utf-8';
    this.response.writeHeader(this.status, {
      'Content-Type': 'text/html'
    });
    return this.response.end(this.getContent());
  };

  ExceptionHandler.getContent = function() {
    var errors, message, name, sources, stack, tmp;
    errors = this.exception != null ? this.exception.stack.split(' at ') : {};
    name = this.exception.constructor.name;
    message = this.exception.message;
    if ((errors[1] != null) && errors[1].indexOf(':null:null') > 0) {
      tmp = errors[0];
      name = errors[1].substr(0, errors[1].indexOf('.'));
      errors = errors.slice(3);
      errors.unshift(tmp);
    }
    stack = errors.join(' at ');
    sources = this.parse(errors);
    if (!this.quiet) {
      console.info('\n  ' + cc.white.bgRed(this.exception.message));
      console.log(this.exception.stack);
    }
    return this.engine.render('TwigBundle:Exception:exception.html.twig', {
      charset: this.charset,
      errors: errors,
      stack: stack,
      name: name,
      message: message,
      sources: sources
    });
  };

  ExceptionHandler.parse = function(errors) {
    var column, error, file, i, line, method, more, offset, part, scopes, source, _i, _len;
    more = [];
    for (_i = 0, _len = errors.length; _i < _len; _i++) {
      error = errors[_i];
      i = error.indexOf(' (');
      method = null;
      line = 0;
      column = 0;
      part = error;
      file = null;
      if (i > 0) {
        method = error.substr(0, i);
        part = error.substr(i + 1, error.length);
      }
      offset = part.match('([0-9]+):([0-9]+)');
      if ((offset != null) && offset.length >= 3) {
        line = parseInt(offset[1]);
        column = parseInt(offset[2]);
        file = part.substr(0, part.indexOf(offset[0]) - 1).replace('(', '');
        if (filesystem.existsSync(file)) {
          source = filesystem.readFileSync(file).toString().split("\n");
        }
        scopes = this.getSourceCode(line, 3, source);
        more.push({
          method: method,
          file: file,
          line: line,
          col: column,
          scopes: scopes,
          start: line - 2
        });
      }
    }
    return more;
  };

  ExceptionHandler.getSourceCode = function(needle, offset, array) {
    var end, i, max, scope, start, _i;
    scope = [];
    max = array.length;
    start = needle - offset;
    end = needle + offset;
    if (start < 0) {
      start = 0;
    }
    if (end > max) {
      end = max;
    }
    for (i = _i = start; start <= end ? _i <= end : _i >= end; i = start <= end ? ++_i : --_i) {
      scope.push(array[i]);
    }
    return scope;
  };

  ExceptionHandler.setCharset = function(charset) {
    this.charset = charset;
    return this;
  };

  ExceptionHandler.getCharset = function() {
    return this.charset;
  };

  return ExceptionHandler;

})();

module.exports = ExceptionHandler;
