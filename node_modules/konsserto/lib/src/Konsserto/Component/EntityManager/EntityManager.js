var EntityManager, FactoryAdapter, cc;

cc = use('cli-color');

FactoryAdapter = use('@Konsserto/Component/EntityManager/Adapter/FactoryAdapter');

EntityManager = (function() {
  function EntityManager() {
    this.repositories = [];
    this.objectToPersist = [];
    this.loadAdapter();
  }

  EntityManager.prototype.getRepository = function(repository) {
    var bundle, realRepository, returnRepository, splittedRepository, vendor;
    splittedRepository = repository.split(':');
    vendor = splittedRepository[0];
    bundle = splittedRepository[1];
    realRepository = splittedRepository[2];
    returnRepository = new (use('/src/' + vendor + '/' + bundle + '/Repositories/' + realRepository));
    returnRepository.setAdapter(this.adapter);
    if (this.adapter) {
      returnRepository.setAdapter(this.adapter);
    }
    return returnRepository;
  };

  EntityManager.prototype.loadAdapter = function() {
    return this.adapter = FactoryAdapter.getInstance();
  };

  EntityManager.prototype.persist = function(object) {
    object.state = 'managed';
    return this.objectToPersist.push(object);
  };

  EntityManager.prototype.flush = function() {
    var object, repository, _i, _len, _ref, _results;
    _ref = this.objectToPersist;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      if (object.state === 'managed') {
        repository = this.getRepositoryFromObject(object);
        _results.push(repository.add(repository.getName(), object, function(result) {
          return object = result;
        }));
      } else {

      }
    }
    return _results;
  };

  EntityManager.prototype.getRepositoryFromObject = function(object) {
    return this.getRepository('MF:TestBundle:UserRepository');
  };

  return EntityManager;

})();

module.exports = EntityManager;
