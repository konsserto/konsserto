var CONFIG, EntityManager;

CONFIG = use('/app/config/config');

EntityManager = (function() {
  function EntityManager() {
    this.repositories = [];
    this.objectToPersist = [];
    this.loadAdapter();
  }

  EntityManager.prototype.getRepository = function(repository) {
    var bundle, realRepository, returnRepository, splittedRepository, vendor;
    splittedRepository = repository.split(':');
    vendor = splittedRepository[0];
    bundle = splittedRepository[1];
    realRepository = splittedRepository[2];
    returnRepository = new use('/src/' + vendor + '/' + bundle + '/Repositories/' + realRepository);
    returnRepository.setAdapter(this.adapter);
    return returnRepository;
  };

  EntityManager.prototype.loadAdapter = function() {
    if (CONFIG.database.driver === 'mysql') {
      return this.adapter = new use('@Konsserto/Component/EntityManager/Adapter/MysqlAdapter');
    } else {
      if (CONFIG.database.driver === 'mongodb') {
        return this.adapter = new use('@Konsserto/Component/EntityManager/Adapter/MongodbAdapter');
      } else {
        return this.adapter = void 0;
      }
    }
  };

  EntityManager.prototype.persist = function(object) {
    object.state = 'managed';
    return this.objectToPersist.push(object);
  };

  EntityManager.prototype.flush = function() {
    var object, _i, _len, _ref, _results;
    _ref = this.objectToPersist;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      if (object.state === 'managed') {
        _results.push(this.getRepositoryFromObject(object).add(object));
      } else {

      }
    }
    return _results;
  };

  EntityManager.prototype.getRepositoryFromObject = function(object) {
    return {};
  };

  return EntityManager;

})();

module.exports = EntityManager;
