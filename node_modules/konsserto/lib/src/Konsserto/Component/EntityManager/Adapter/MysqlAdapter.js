var DBCONFIG, MySql, MysqlAdapter, Q, cc;

MySql = use('mysql');

DBCONFIG = use('/app/config/config').database;

cc = use('cli-color');

Q = use('q');

MysqlAdapter = (function() {
  function MysqlAdapter() {}

  MysqlAdapter.INSTANCE = void 0;

  MysqlAdapter.CONNECTION = void 0;

  MysqlAdapter.getInstance = function() {
    if (!this.INSTANCE) {
      this.INSTANCE = new this;
      this.connect();
    }
    return this.INSTANCE;
  };

  MysqlAdapter.connect = function() {
    MysqlAdapter.CONNECTION = MySql.createConnection({
      host: DBCONFIG.host,
      user: DBCONFIG.user,
      password: DBCONFIG.password,
      database: DBCONFIG.name,
      port: DBCONFIG.port
    });
    return MysqlAdapter.CONNECTION.connect(function(err) {
      if (err) {
        console.log(cc.red('[ERROR MYSQL] An error occured with mongoDb, maybe de to : '));
        console.log(cc.red('      - MYSQL is not started'));
        console.log(cc.red('      - Bad host configuration in /app/config/config, database part'));
        console.log(cc.red('      - Bad port configuration in /app/config/config, database part'));
        console.log(cc.red('      - Bad name configuration in /app/config/config, database part'));
        return console.log(cc.red('      - Bad user or bad password configuration in /app/config/config, database part'));
      } else {
        return MysqlAdapter.showConfigurations();
      }
    });
  };

  MysqlAdapter.showConfigurations = function() {
    console.log('');
    console.log('------------------------------------------------------------------');
    console.log(cc.magentaBright('[DATABASE] MYSQL started and ready'));
    console.log(cc.magentaBright('           Host     : ' + DBCONFIG.host));
    console.log(cc.magentaBright('           Port     : ' + DBCONFIG.port));
    console.log(cc.magentaBright('           Database : ' + DBCONFIG.name));
    console.log(cc.magentaBright('           User     : ' + DBCONFIG.user));
    console.log(cc.magentaBright('           Password : ' + DBCONFIG.password));
    console.log('------------------------------------------------------------------');
    return console.log('');
  };

  MysqlAdapter.prototype.getAll = function(collectionName) {
    var deferred, sql;
    sql = MySql.format('SELECT * FROM ??', [collectionName]);
    deferred = Q.defer();
    MysqlAdapter.CONNECTION.query(sql, function(err, rows, fields) {
      if (err) {
        return deferred.reject(new Error(err));
      } else {
        return deferred.resolve(rows);
      }
    });
    return deferred.promise;
  };

  MysqlAdapter.prototype.getById = function(collectionName, id) {
    var deferred, sql;
    sql = MySql.format('SELECT * FROM ?? WHERE ?? = ?', [collectionName, 'id', id]);
    deferred = Q.defer();
    MysqlAdapter.CONNECTION.query(sql, function(err, rows, fields) {
      if (err) {
        return deferred.reject(new Error(err));
      } else {
        if (rows.length === 1) {
          return deferred.resolve(rows[0]);
        } else {
          if (rows.length === 0) {
            return deferred.resolve({});
          }
        }
      }
    });
    return deferred.promise;
  };

  MysqlAdapter.prototype.getByCriteria = function(collectionName, criteria) {
    var deferred, sql;
    sql = MySql.format('SELECT * FROM ?? WHERE ?', [collectionName, criteria]);
    deferred = Q.defer();
    MysqlAdapter.CONNECTION.query(sql, function(err, rows, fields) {
      if (err) {
        return deferred.reject(new Error(err));
      } else {
        return deferred.resolve(rows);
      }
    });
    return deferred.promise;
  };

  MysqlAdapter.prototype.add = function(object) {
    return this;
  };

  MysqlAdapter.prototype.remove = function(object) {
    return this;
  };

  MysqlAdapter.prototype.removeById = function(id) {
    return this;
  };

  MysqlAdapter.prototype.modify = function(objectSource, newObject) {
    return this;
  };

  MysqlAdapter.prototype.modifyById = function(id, newObject) {
    return this;
  };

  return MysqlAdapter;

})();

module.exports = MysqlAdapter;
