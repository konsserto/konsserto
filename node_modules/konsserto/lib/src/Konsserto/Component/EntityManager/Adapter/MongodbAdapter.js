var DBCONFIG, MongoClient, MongodbAdapter, cc;

MongoClient = use('mongodb').MongoClient;

DBCONFIG = use('/app/config/config').database;

cc = use('cli-color');

MongodbAdapter = (function() {
  function MongodbAdapter() {}

  MongodbAdapter.INSTANCE = void 0;

  MongodbAdapter.CONNECTION = void 0;

  MongodbAdapter.getInstance = function() {
    if (!this.INSTANCE) {
      this.INSTANCE = new this;
      this.connect();
    }
    return this.INSTANCE;
  };

  MongodbAdapter.connect = function() {
    return MongoClient.connect('mongodb://' + DBCONFIG.host + ':' + DBCONFIG.port + '/' + DBCONFIG.name + '', function(err, db) {
      if (err) {
        console.log(cc.red('[ERROR MONGODB] An error occured with mongoDb, maybe de to : '));
        console.log(cc.red('      - MongoDb is not started'));
        console.log(cc.red('      - Bad host configuration in /app/config/config, database part'));
        console.log(cc.red('      - Bad port configuration in /app/config/config, database part'));
        console.log(cc.red('      - Bad name configuration in /app/config/config, database part'));
        return console.log(cc.red('      - Bad user or bad password configuration in /app/config/config, database part'));
      } else {
        MongodbAdapter.CONNECTION = db;
        return MongodbAdapter.showConfigurations();
      }
    });
  };

  MongodbAdapter.showConfigurations = function() {
    console.log('');
    console.log('------------------------------------------------------------------');
    console.log(cc.magentaBright('[DATABASE] MONGODB started and ready'));
    console.log(cc.magentaBright('           Host     : ' + DBCONFIG.host));
    console.log(cc.magentaBright('           Port     : ' + DBCONFIG.port));
    console.log(cc.magentaBright('           Database : ' + DBCONFIG.name));
    console.log(cc.magentaBright('           User     : ' + DBCONFIG.user));
    console.log(cc.magentaBright('           Password : ' + DBCONFIG.password));
    console.log('------------------------------------------------------------------');
    return console.log('');
  };

  MongodbAdapter.prototype.getAll = function() {
    MongodbAdapter.CONNECTION.collection('user').find({}).toArray(function(err, result) {
      return console.log(result);
    });
    return [];
  };

  MongodbAdapter.prototype.getById = function(id, joins) {
    return {};
  };

  MongodbAdapter.prototype.getByCriteria = function(criteria, joins) {
    return [];
  };

  MongodbAdapter.prototype.add = function(object) {
    return this;
  };

  MongodbAdapter.prototype.remove = function(object) {
    return this;
  };

  MongodbAdapter.prototype.removeById = function(id) {
    return this;
  };

  MongodbAdapter.prototype.modify = function(objectSource, newObject) {
    return this;
  };

  MongodbAdapter.prototype.modifyById = function(id, newObject) {
    return this;
  };

  return MongodbAdapter;

})();

module.exports = MongodbAdapter;
