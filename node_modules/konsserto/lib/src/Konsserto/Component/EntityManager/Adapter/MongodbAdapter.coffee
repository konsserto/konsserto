MongoClient = use('mongodb').MongoClient
DBCONFIG = use('/app/config/config').database
cc = use('cli-color')
ObjectID = use('mongodb').ObjectID
Q = use('q')
ObjectMaker = use('@Konsserto/Component/EntityManager/ObjectMaker')

class MongodbAdapter

  @INSTANCE = undefined
  @CONNECTION = undefined

  constructor: ()->
    @objectMaker = new ObjectMaker(@)

  @getInstance: ()->
    if !@INSTANCE
      @INSTANCE = new @
      @connect()
    return @INSTANCE

  @connect: ()->
    MongoClient.connect('mongodb://' + DBCONFIG.host + ':' + DBCONFIG.port + '/' + DBCONFIG.name + '', (err, db)->
      if err
        console.log cc.red('[ERROR MONGODB] An error occured with MongoDb, maybe due to : ')
        console.log cc.red('      - MongoDb is not started')
        console.log cc.red('      - Bad host configuration in /app/config/config, database part')
        console.log cc.red('      - Bad port configuration in /app/config/config, database part')
        console.log cc.red('      - Bad name configuration in /app/config/config, database part')
        console.log cc.red('      - Bad user or bad password configuration in /app/config/config, database part')
      else
        MongodbAdapter.CONNECTION = db
        MongodbAdapter.showConfigurations()
    )

  @showConfigurations: ()->
    console.log ''
    console.log '------------------------------------------------------------------'
    console.log cc.magentaBright('[DATABASE] MONGODB started and ready')
    console.log cc.magentaBright('           Host     : ' + DBCONFIG.host)
    console.log cc.magentaBright('           Port     : ' + DBCONFIG.port)
    console.log cc.magentaBright('           Database : ' + DBCONFIG.name)
    console.log cc.magentaBright('           User     : ' + DBCONFIG.user)
    console.log cc.magentaBright('           Password : ' + DBCONFIG.password)
    console.log '------------------------------------------------------------------'
    console.log ''

  getAll: (collectionName)->
    deferred = Q.defer()
    MongodbAdapter.CONNECTION.collection(collectionName).find({}).toArray((err, result)->
      if err
        deferred.reject(new Error(err))
      else
        deferred.resolve(result)
    )
    return deferred.promise

  getById: (collectionName, id)->
    deferred = Q.defer()
    MongodbAdapter.CONNECTION.collection(collectionName).findOne({id: new ObjectID(id)}, (err, result)->
      if err
        deferred.reject(new Error(err))
      else
        deferred.resolve(result)
    )
    return deferred.promise

  getByCriteria: (collectionName, criteria)->
    deferred = Q.defer()
    MongodbAdapter.CONNECTION.collection(collectionName).find(criteria).toArray((err, result)->
      if err
        deferred.reject(new Error(err))
      else
        deferred.resolve(result)
    )
    return deferred.promise

  add: (collectionName, obj)->
    deferred = Q.defer()
    MongodbAdapter.CONNECTION.collection(collectionName).insert(obj, (err, result)->
      if err
        deferred.reject(new Error(err))
      else
        if result.length is 1
          obj.id.value = result[0].id
          deferred.resolve(obj)
        else
          deferred.reject(new Error(err))
    )
    return deferred.promise


  remove: (object)->
    return @

  removeById: (id)->
    return @

  modify: (collectionName, objectSource, newObject)->
    return @

  query: ()->
    deferred = Q.defer()
    MongodbAdapter.CONNECTION.collection(collectionName).find(criteria).toArray((err, result)->
      if err
        deferred.reject(new Error(err))
      else
        deferred.resolve(result)
    )
    return deferred.promise

  modifyById: (collectionName, id, newObject)->
    deferred = Q.defer()
    MongodbAdapter.CONNECTION.collection(collectionName).update({id: new ObjectID(id)},
      @makeObjectPersistant(newObject), (err, result)->
      if err
        deferred.reject(new Error(err))
      else
        if result.length is 1
          deferred.resolve(obj)
        else
          deferred.reject(new Error(err))
    )
    return deferred.promise

module.exports = MongodbAdapter