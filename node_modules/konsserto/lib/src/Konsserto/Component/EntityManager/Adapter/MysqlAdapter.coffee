MySql = use('mysql')
DBCONFIG = use('/app/config/config').database
cc = use('cli-color')
Q = use('q')

class MysqlAdapter

  @INSTANCE = undefined
  @CONNECTION = undefined

  @getInstance: ()->
    if !@INSTANCE
      @INSTANCE = new @
      @connect()
    return @INSTANCE

  @connect: ()->
    MysqlAdapter.CONNECTION = MySql.createConnection({
      host: DBCONFIG.host,
      user: DBCONFIG.user,
      password: DBCONFIG.password,
      database: DBCONFIG.name,
      port: DBCONFIG.port
    })

    MysqlAdapter.CONNECTION.connect((err)->
      if err
        console.log cc.red('[ERROR MYSQL] An error occured with mongoDb, maybe de to : ')
        console.log cc.red('      - MYSQL is not started')
        console.log cc.red('      - Bad host configuration in /app/config/config, database part')
        console.log cc.red('      - Bad port configuration in /app/config/config, database part')
        console.log cc.red('      - Bad name configuration in /app/config/config, database part')
        console.log cc.red('      - Bad user or bad password configuration in /app/config/config, database part')
      else
        MysqlAdapter.showConfigurations()
    )

  @showConfigurations: ()->
    console.log ''
    console.log '------------------------------------------------------------------'
    console.log cc.magentaBright('[DATABASE] MYSQL started and ready')
    console.log cc.magentaBright('           Host     : ' + DBCONFIG.host)
    console.log cc.magentaBright('           Port     : ' + DBCONFIG.port)
    console.log cc.magentaBright('           Database : ' + DBCONFIG.name)
    console.log cc.magentaBright('           User     : ' + DBCONFIG.user)
    console.log cc.magentaBright('           Password : ' + DBCONFIG.password)
    console.log '------------------------------------------------------------------'
    console.log ''

  getAll: (collectionName)->
    sql = MySql.format('SELECT * FROM ??', [collectionName])
    deferred = Q.defer()
    MysqlAdapter.CONNECTION.query(sql, (err, rows, fields)->
      if err
        deferred.reject(new Error(err))
      else
        deferred.resolve(rows)
    )
    return deferred.promise

  getById: (collectionName, id)->
    sql = MySql.format('SELECT * FROM ?? WHERE ?? = ?', [collectionName, 'id', id])
    deferred = Q.defer()
    MysqlAdapter.CONNECTION.query(sql, (err, rows, fields)->
      if err
        deferred.reject(new Error(err))
      else
        if rows.length == 1
          deferred.resolve(rows[0])
        else
          if rows.length == 0
            deferred.resolve({})
    )
    return deferred.promise

  ##  Has to bo modified because of Mysql.format ##
  getByCriteria: (collectionName, criteria)->
    sql = MySql.format('SELECT * FROM ?? WHERE ', [collectionName])
    sql += @objectToValues criteria
    deferred = Q.defer()
    MysqlAdapter.CONNECTION.query(sql, (err, rows, fields)->
      if err
        deferred.reject(new Error(err))
      else
        deferred.resolve(rows)
    )
    return deferred.promise

  objectToValues: (array)->
    values = []
    for k,v of array
      values.push MySql.escapeId(k) + ' = ' + MySql.escape(v, true, new Date().getTime())
    return values.join(' AND ')

  add: (object)->
    return @

  remove: (object)->
    return @

  removeById: (id)->
    return @

  modify: (objectSource, newObject)->
    return @

  modifyById: (id, newObject)->
    return @

module.exports = MysqlAdapter