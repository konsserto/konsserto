CONFIG = use('/app/config/config')
cc = use('cli-color')

class EntityManager

  constructor: ()->
    @repositories = []
    @objectToPersist = []
    @loadAdapter()


  getRepository: (repository)->
    splittedRepository = repository.split ':'

    vendor = splittedRepository[0]
    bundle = splittedRepository[1]
    realRepository = splittedRepository[2]
    returnRepository = new (use('/src/' + vendor + '/' + bundle + '/Repositories/' + realRepository))

    returnRepository.setAdapter(@adapter)
    if @adapter
      returnRepository.setAdapter(@adapter)
    return returnRepository

  loadAdapter: ()->
    if CONFIG.database

      if !CONFIG.database.host
        console.log cc.red('[ERROR DATABASE] Missing Host')
        return

      if !CONFIG.database.port
        console.log cc.red('[ERROR DATABASE] Missing Host')
        return

      if !CONFIG.database.name
        console.log cc.red('[ERROR DATABASE] Missing database name')
        return

      if !CONFIG.database.user
        console.log cc.red('[ERROR DATABASE] Missing database user')
        return

      if CONFIG.database.driver is 'mysql'
        @adapter = use('@Konsserto/Component/EntityManager/Adapter/MysqlAdapter').getInstance()
      else
        if CONFIG.database.driver is 'mongodb'
          @adapter = use('@Konsserto/Component/EntityManager/Adapter/MongodbAdapter').getInstance()
        else
          console.log cc.red('[WARNING] The driver ' + CONFIG.database.driver + ' is not known by the system, connection to the database no possible')

  persist: (object)->
    # change the object state
    object.state = 'managed'
    @objectToPersist.push object

  flush: ()->
    for object in @objectToPersist
      if object.state is 'managed'
        @getRepositoryFromObject(object).add(object)
      else
        # manage another state


  getRepositoryFromObject: (object)->
    return {} # return the repository of the object


module.exports = EntityManager