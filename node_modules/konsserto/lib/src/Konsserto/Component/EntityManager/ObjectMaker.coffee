Q = use('q')

class ObjectMaker

  constructor: (@adapter)->
    @array_types = ['string', 'int', 'long', 'time', 'date']

  makeObject: (object)->
    deffered = Q.defer()


    if !object.id.value

      @persist(object, object.getTableName()).then((resultAdd)=>
        @createSimpleObject(resultAdd).then((resultPromise)->
          deffered.resolve(resultPromise)
        )
      )

    else
      @createSimpleObject(object).then((resultPromise)->
        deffered.resolve(resultPromise)
      )

    return deffered.promise


  createSimpleObject: (badObject)->
    fullObject = {}
    for k,v of badObject
      if @isSimpleProperty(k, v)
        fullObject[k] = v.value
      else
        if @isObject(v)
          if !@isArray(v)
            @persist(@createRefObject(v), v.type).then((resultAdd)->
              fullObject[k] = resultAdd
            )
          else
            fullObject[k] = []
            for value in v.value
              @persist(@createRefObject(value), value.type).then((resultAdd)->
                fullObject[k].push resultAdd
              )
    return fullObject


  createRefObject: (badObject)->
    return {$ref: badObject.type, $id: badObject.id.value}


  persist: (object, type)->
    deffered = Q.defer()

    @adapter.add(type, object).then((result)->
      console.log result
    )

    return deffered.promise


  isSimpleProperty: (k, v)->
    if !@isProp(k, 'repository')
      if !@isIgnorable(v)
        if @inMyArray(v)
          return true
    return false


  isObject: (object)->
    if typeof(object) == 'object'
      return true

  inMyArray: (object)->
    if object.type in @array_types
      return true
    return false

  isArray: (object)->
    return Array.isArray(object.value)

  isProp: (k, p)->
    if k is p
      return true
    return false

  isIgnorable: (object)->
    if object['dbIgnore']
      return true
    return false

module.exports = ObjectMaker