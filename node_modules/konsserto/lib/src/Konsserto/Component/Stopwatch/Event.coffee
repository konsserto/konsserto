###
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

###
# Event class in Stopwatch service #
This is the Event class documentation linked to the Stopwatch service
###
Period = use('@Konsserto/Component/Stopwatch/Period')

# Event
#
# @author Marvin Frachet <marvin@konsserto.com>
class Event


  # Class constructor
  # @param {String} name Name of the event
  # @param {String category (optional) of the event
  constructor: (@name, @category)->
    @periods = []
    @origin = new Date().getTime()

  # Stop the event time setting the stop variable
  stopEvent: ()->
    @stop = new Date().getTime()

  # Get the stop time of the current Event
  # @return {Number} The stop variable (end of the event)
  getStopTime: ()->
    return @stop

  # Get the name of the current Event
  # @return {String} The event name
  getName: ()->
    return @name

  # Get the origin time of the current Event
  # @return {Number} The origin of the event (the starting time of the event)
  getOrigin: ()->
    return @origin

  # Get the last time of the last period of the event
  # @return {Number} The end time of the event
  getEndTime: ()->
    if @periods.length > 0
      return @periods[@periods.length - 1].getEndTime()
    return null

  # Get the periods duration
  # @return {Number} The duration of every periods of the event
  getDurationPeriods: ()->
    duration = 0
    for p in @periods
      duration += p.getDuration()
    return duration / 1000

  # Get the event duration
  # @return {Number} The global duration from start to stop
  getDuration: ()->
    return (@stop - @origin) / 1000

  # Get the category
  # @return {String} The category of the event
  getCategory: ()->
    return @category

  # Get the {Period} list of the event
  # @return [Period] The periods of the event
  getPeriods: ()->
    return @periods

  # Create a new period from the previous period end time (origin if no periods before
  setPeriod: ()->
    if @periods.length == 0
      @periods.push(new Period(@origin))
    else
      @periods.push(new Period(@periods[@periods.length - 1].getEndTime()))


module.exports = Event