
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var EntityRepository, Tools, wait,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

wait = use('wait.for');

Tools = use('@Konsserto/Component/Static/Tools');

EntityRepository = (function() {
  function EntityRepository(entityInstance) {
    this.entityInstance = entityInstance;
    this.getEntityManager = __bind(this.getEntityManager, this);
    this.findAll = __bind(this.findAll, this);
    this.findBy = __bind(this.findBy, this);
    this.find = __bind(this.find, this);
    this.executeRaw = __bind(this.executeRaw, this);
    this.count = __bind(this.count, this);
    this.exists = __bind(this.exists, this);
    this.get = __bind(this.get, this);
    this.create = __bind(this.create, this);
    this._em = this.entityInstance.getEntityManager();
  }

  EntityRepository.prototype.create = function(item, callback) {
    if (callback == null) {
      callback = null;
    }
    if (callback != null) {
      return this.getModelInstance().create(item, callback);
    } else {
      return wait.forMethod(this.getModelInstance(), 'create', item);
    }
  };

  EntityRepository.prototype.save = function(item) {
    return wait.forMethod(item, 'save');
  };

  EntityRepository.prototype.sync = function() {
    return wait.forMethod(this.getModelInstance(), 'sync');
  };

  EntityRepository.prototype.get = function(data, callback) {
    var e;
    if (callback == null) {
      callback = null;
    }
    try {
      if (callback != null) {
        return this.getModelInstance().get(data, callback);
      } else {
        return wait.forMethod(this.getModelInstance(), 'get', data);
      }
    } catch (_error) {
      e = _error;
      if (e.message !== 'Not found') {
        throw e;
      }
    }
    return null;
  };

  EntityRepository.prototype.exists = function(data, callback) {
    if (callback == null) {
      callback = null;
    }
    if (callback != null) {
      return this.getModelInstance(exists(data, callback));
    } else {
      return wait.forMethod(this.getModelInstance(), 'exists', data);
    }
  };

  EntityRepository.prototype.count = function(data, callback) {
    if (callback == null) {
      callback = null;
    }
    if (callback != null) {
      return this.getModelInstance().count(data, callback);
    } else {
      return wait.forMethod(this.getModelInstance(), 'count', data);
    }
  };

  EntityRepository.prototype.executeRaw = function(query, params, callback) {
    if (callback == null) {
      callback = null;
    }
    if (callback != null) {
      return this.getDatabase().driver.execQuery(query, params, callback);
    } else {
      return wait.forMethod(this.getDatabase().driver, 'execQuery', query, params);
    }
  };

  EntityRepository.prototype.find = function(data, opt, callback) {
    if (callback == null) {
      callback = null;
    }
    if (typeof data === 'number' || (data.match('^([0-9]+)$') != null)) {
      return this.get(data, callback);
    }
    if (opt) {
      opt = Tools.searchAndReplace('DESC', 'Z', opt, true);
      opt = Tools.searchAndReplace('ASC', 'A', opt, true);
    }
    if (callback != null) {
      return this.getModelInstance().find(data, opt, callback);
    } else {
      return wait.forMethod(this.getModelInstance(), 'find', data, opt);
    }
  };

  EntityRepository.prototype.findBy = function(opt, callback) {
    if (callback == null) {
      callback = null;
    }
    if (callback != null) {
      return this.getModelInstance().find(opt, callback);
    } else {
      return wait.forMethod(this.getModelInstance(), 'find', opt);
    }
  };

  EntityRepository.prototype.findAll = function(callback) {
    var resultSet;
    if (callback == null) {
      callback = null;
    }
    if (callback != null) {
      return this.getModelInstance.all(callback);
    } else {
      resultSet = wait.forMethod(this.getModelInstance(), 'all');
      return resultSet;
    }
  };

  EntityRepository.prototype.getEntityManager = function() {
    return this._em;
  };

  EntityRepository.prototype.getEntityInstance = function() {
    return this.entityInstance;
  };

  EntityRepository.prototype.getModelInstance = function() {
    return this.getEntityInstance().getModelInstance();
  };

  EntityRepository.prototype.getRawRepository = function() {
    return this.getModelInstance();
  };

  EntityRepository.prototype.hasRepository = function() {
    return this.getEntityInstance().getDefinition().getModel().hasRepository();
  };

  EntityRepository.prototype.setEntityInstance = function(entityInstance) {
    this.entityInstance = entityInstance;
    return this;
  };

  EntityRepository.prototype.getDatabase = function() {
    return this.getEntityInstance().getDatabase();
  };

  return EntityRepository;

})();

module.exports = EntityRepository;
