###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

Tools = use('@Konsserto/Component/Static/Tools')

#
# Model
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class Model


	constructor:(entityName, _class,logicalPath,dirties) ->

		# Entity general & mandatory
		@model = _class.model ? {}
		@tableName = @model.table ? entityName
		@fields = @model.fields ? {}
		@repositoryPath = @model.repository ? ''

		# Entity associations
		@associations = @model.associations ? {}
		@hasOne = @model.associations.hasOne ? []
		@hasMany = @model.associations.hasMany ? []

		# Entity options
		@options = @model.options ? {}
		@methods = @options.methods ? {}
		@hooks = @options.hooks ? {}
		@validations = @options.validations ? {}
		@autoFetch = @options.autoFetch ? true

		# Create Beacon Entity For Auto Hydratation & Method mirroring
		@entity = new _class
		@entity._logicalPath = () => return logicalPath

		for method of @getBeaconedEntity()
			@grabMethodFromBeacon(method)

		@enableAutoHydrate(dirties,logicalPath)
		@makeTreeOptions()


	makeTreeOptions:() ->
		@options = {
			methods: @getMethods(),
			hooks:	@getHooks(),
			validations: @getValidations(),
			autoFetch: @isAutoFetch(),
			associations: @getAssociations()
		}
		@model.options = @options

	grabMethodFromBeacon:(method) ->
		entity = @getBeaconedEntity()
		@methods[method] = entity[method]

	enableAutoHydrate:(dirties,logicalPath) ->
		entity = @getBeaconedEntity()

		@hooks['afterSave'] = () ->
			dirties[logicalPath][this.id] = this
			this['_logicalPath'] = () => return logicalPath

	getBeaconedEntity:() ->
		return @entity

	getRawModel:() ->
		return @model

	setRawModel:(@model) ->
		return this

	getOptions:() ->
		return @options

	setOptions:(@options) ->
		return this

	addOption:(name,option) ->
		@options[name] = option

	getMethods:() ->
		return @methods

	setMethods:(@methods) ->
		return this

	addMethod:(name,method) ->
		@methods[name] = method

	getHooks:() ->
		return @hooks

	setHooks:(@hooks) ->
		return this

	addHook:(name,hook) ->
		@hooks[name] = hook

	getValidations:() ->
		return @validations

	setValidations:(@validations) ->
		return this

	addValidation:(name,validation) ->
		@validations[name] = validation

	isAutoFetch:() ->
		return @autoFetch

	setAutoFetch:(@autoFetch) ->
		return this

	getTableName:() ->
		return @tableName

	setTableName:(@tableName) ->
		return this

	getFields:() ->
		return @fields

	setFields:(@fields) ->
		return this

	addField:(name,field) ->
		@fields[name] = field

	getRepositoryPath:() ->
		return @repositoryPath

	hasRepository:() ->
		if @repositoryPath == ''
			return false
		return true

	getAssociations:() ->
		return @associations

	setAssociations:(@associations) ->
		return this

	getHasManyAssociations:() ->
		return @hasMany

	getHasOneAssociations:() ->
		return @hasOne

	addhasManyAssociation:(association) ->
		@hasMany.push(association)

	addhasOneAssociation:(association) ->
		@hasOne.push(association)

	getOneAndManyAssociations:() ->
		associations = []
		for item in @getHasOneAssociations()
			associations.push(item.name)
			associations.push(item.options.reverse)

		for item in @getHasManyAssociations()
			associations.push(item.name)
			associations.push(item.options.reverse)

		return associations



module.exports = Model