
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var CONFIG, Database, cc, orm, wait,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

cc = use('cli-color');

orm = use('orm');

wait = use('wait.for');

CONFIG = use('/app/config/config');

Database = (function() {
  function Database(entityManager) {
    var _ref;
    this.entityManager = entityManager;
    this.asyncConnect = __bind(this.asyncConnect, this);
    this.connect = __bind(this.connect, this);
    this.ready = false;
    this.debug = (_ref = CONFIG.databaseDebug) != null ? _ref : false;
    this.resetDefaultOptions(orm);
    if (CONFIG.databaseDriver != null) {
      this.active = true;
    }
    if (this.isActive()) {
      this.driver = CONFIG.databaseDriver;
      this.user = CONFIG.databaseUser;
      this.password = CONFIG.databasePassword;
      this.host = CONFIG.databaseHost;
      this.database = CONFIG.databaseName;
      wait.launchFiber(this.connect);
    }
  }

  Database.prototype.getInstance = function() {
    return this.instance;
  };

  Database.prototype.getAvailableDrivers = function() {
    return ['mysql', 'postgres', 'redshift', 'sqlite3', 'mongodb'];
  };

  Database.prototype.connect = function() {
    this.instance = wait.forMethod(orm, 'connect', this.getCredentials());
    this.resetDefaultOptions(this.instance);
    this.ready = true;
    this.entityManager.load(this.instance);
    return console.log(cc.white.bgBlue('[Database]') + ' Connected to : ' + CONFIG.databaseUser + '@' + CONFIG.databaseHost);
  };

  Database.prototype.asyncConnect = function(callback) {
    return orm.connect(this.getCredentials(), (function(_this) {
      return function(err, db) {
        _this.resetDefaultOptions(db);
        _this.ready = true;
        _this.entityManager.load(db);
        console.log(cc.white.bgBlue('[Database]') + ' Connected to : ' + CONFIG.databaseUser + '@' + CONFIG.databaseHost);
        return callback();
      };
    })(this));
  };

  Database.prototype.isReady = function() {
    return this.ready;
  };

  Database.prototype.getDriver = function() {
    return this.driver;
  };

  Database.prototype.getPassword = function() {
    return this.password;
  };

  Database.prototype.getHost = function() {
    return this.host;
  };

  Database.prototype.getDatabase = function() {
    return this.database;
  };

  Database.prototype.getUser = function() {
    return this.user;
  };

  Database.prototype.isActive = function() {
    var _ref;
    return (_ref = this.active) != null ? _ref : false;
  };

  Database.prototype.resetDefaultOptions = function(object) {
    object.settings.set('instance.cache', true);
    object.settings.set('instance.autoFetch', true);
    return object.settings.set('connection.debug', this.debug);
  };

  Database.prototype.getCredentials = function() {
    return "" + (this.getDriver()) + "://" + (this.getUser()) + ":" + (this.getPassword()) + "@" + (this.getHost()) + "/" + (this.getDatabase());
  };

  return Database;

})();

module.exports = Database;
