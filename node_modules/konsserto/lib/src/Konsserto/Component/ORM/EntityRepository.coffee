###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

wait = use('wait.for')
Tools = use('@Konsserto/Component/Static/Tools')

#
# EntityRepository
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class EntityRepository


	constructor: (@entityInstance) ->
		@_em = @entityInstance.getEntityManager()

	create: (item, callback = null) =>
		if callback?
			return @getModelInstance().create(item, callback)
		else
			return wait.forMethod(@getModelInstance(), 'create', item)

	save: (item) ->
		return wait.forMethod(item,'save')

	sync: () ->
		return wait.forMethod(@getModelInstance(),'sync')

	get: (data, callback = null) =>
		try
			if callback?
				return @getModelInstance().get(data, callback)
			else
				return wait.forMethod(@getModelInstance(), 'get', data)
		catch e
			throw e if e.message != 'Not found'

		return null

	exists: (data, callback = null) =>
		if callback?
			return @getModelInstance(exists(data, callback))
		else
			return wait.forMethod(@getModelInstance(), 'exists', data)

	count: (data, callback = null) =>
		if callback?
			return @getModelInstance().count(data, callback)
		else
			return wait.forMethod(@getModelInstance(), 'count', data)

	executeRaw: (query, params, callback = null) =>
		if callback?
			return @getDatabase().driver.execQuery(query, params, callback)
		else
			return wait.forMethod(@getDatabase().driver, 'execQuery', query, params)

	find: (data, opt, callback = null) =>
		if typeof data == 'number' || data.match('^([0-9]+)$')?
			return @get(data,callback)

		if opt
			opt = Tools.searchAndReplace('DESC', 'Z', opt, true)
			opt = Tools.searchAndReplace('ASC', 'A', opt, true)

		if callback?
			return @getModelInstance().find(data, opt, callback)
		else
			return wait.forMethod(@getModelInstance(), 'find', data, opt)

	findBy: (opt, callback = null) =>
		if callback?
			return @getModelInstance().find(opt, callback)
		else
			return wait.forMethod(@getModelInstance(), 'find', opt)


	findAll: (callback = null) =>
		if callback?
			return @getModelInstance.all(callback)
		else
			resultSet = wait.forMethod(@getModelInstance(), 'all')
			return resultSet

	getEntityManager:() =>
		return @_em

	getEntityInstance:() ->
		return @entityInstance

	getModelInstance:() ->
		return @getEntityInstance().getModelInstance()

	getRawRepository:() ->
		return @getModelInstance()

	hasRepository:() ->
		return @getEntityInstance().getDefinition().getModel().hasRepository()

	setEntityInstance:(@entityInstance) ->
		return this

	getDatabase:() ->
		return @getEntityInstance().getDatabase()


module.exports = EntityRepository