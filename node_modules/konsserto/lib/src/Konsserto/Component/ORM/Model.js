
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Model, Tools;

Tools = use('@Konsserto/Component/Static/Tools');

Model = (function() {
  function Model(entityName, _class, logicalPath, dirties) {
    var method, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    this.model = (_ref = _class.model) != null ? _ref : {};
    this.tableName = (_ref1 = this.model.table) != null ? _ref1 : entityName;
    this.fields = (_ref2 = this.model.fields) != null ? _ref2 : {};
    this.repositoryPath = (_ref3 = this.model.repository) != null ? _ref3 : '';
    this.associations = (_ref4 = this.model.associations) != null ? _ref4 : {};
    this.hasOne = (_ref5 = this.model.associations.hasOne) != null ? _ref5 : [];
    this.hasMany = (_ref6 = this.model.associations.hasMany) != null ? _ref6 : [];
    this.options = (_ref7 = this.model.options) != null ? _ref7 : {};
    this.methods = (_ref8 = this.options.methods) != null ? _ref8 : {};
    this.hooks = (_ref9 = this.options.hooks) != null ? _ref9 : {};
    this.validations = (_ref10 = this.options.validations) != null ? _ref10 : {};
    this.autoFetch = (_ref11 = this.options.autoFetch) != null ? _ref11 : true;
    this.entity = new _class;
    this.entity._logicalPath = (function(_this) {
      return function() {
        return logicalPath;
      };
    })(this);
    for (method in this.getBeaconedEntity()) {
      this.grabMethodFromBeacon(method);
    }
    this.enableAutoHydrate(dirties, logicalPath);
    this.makeTreeOptions();
  }

  Model.prototype.makeTreeOptions = function() {
    this.options = {
      methods: this.getMethods(),
      hooks: this.getHooks(),
      validations: this.getValidations(),
      autoFetch: this.isAutoFetch(),
      associations: this.getAssociations()
    };
    return this.model.options = this.options;
  };

  Model.prototype.grabMethodFromBeacon = function(method) {
    var entity;
    entity = this.getBeaconedEntity();
    return this.methods[method] = entity[method];
  };

  Model.prototype.enableAutoHydrate = function(dirties, logicalPath) {
    var entity;
    entity = this.getBeaconedEntity();
    return this.hooks['afterSave'] = function() {
      dirties[logicalPath][this.id] = this;
      return this['_logicalPath'] = (function(_this) {
        return function() {
          return logicalPath;
        };
      })(this);
    };
  };

  Model.prototype.getBeaconedEntity = function() {
    return this.entity;
  };

  Model.prototype.getRawModel = function() {
    return this.model;
  };

  Model.prototype.setRawModel = function(model) {
    this.model = model;
    return this;
  };

  Model.prototype.getOptions = function() {
    return this.options;
  };

  Model.prototype.setOptions = function(options) {
    this.options = options;
    return this;
  };

  Model.prototype.addOption = function(name, option) {
    return this.options[name] = option;
  };

  Model.prototype.getMethods = function() {
    return this.methods;
  };

  Model.prototype.setMethods = function(methods) {
    this.methods = methods;
    return this;
  };

  Model.prototype.addMethod = function(name, method) {
    return this.methods[name] = method;
  };

  Model.prototype.getHooks = function() {
    return this.hooks;
  };

  Model.prototype.setHooks = function(hooks) {
    this.hooks = hooks;
    return this;
  };

  Model.prototype.addHook = function(name, hook) {
    return this.hooks[name] = hook;
  };

  Model.prototype.getValidations = function() {
    return this.validations;
  };

  Model.prototype.setValidations = function(validations) {
    this.validations = validations;
    return this;
  };

  Model.prototype.addValidation = function(name, validation) {
    return this.validations[name] = validation;
  };

  Model.prototype.isAutoFetch = function() {
    return this.autoFetch;
  };

  Model.prototype.setAutoFetch = function(autoFetch) {
    this.autoFetch = autoFetch;
    return this;
  };

  Model.prototype.getTableName = function() {
    return this.tableName;
  };

  Model.prototype.setTableName = function(tableName) {
    this.tableName = tableName;
    return this;
  };

  Model.prototype.getFields = function() {
    return this.fields;
  };

  Model.prototype.setFields = function(fields) {
    this.fields = fields;
    return this;
  };

  Model.prototype.addField = function(name, field) {
    return this.fields[name] = field;
  };

  Model.prototype.getRepositoryPath = function() {
    return this.repositoryPath;
  };

  Model.prototype.hasRepository = function() {
    if (this.repositoryPath === '') {
      return false;
    }
    return true;
  };

  Model.prototype.getAssociations = function() {
    return this.associations;
  };

  Model.prototype.setAssociations = function(associations) {
    this.associations = associations;
    return this;
  };

  Model.prototype.getHasManyAssociations = function() {
    return this.hasMany;
  };

  Model.prototype.getHasOneAssociations = function() {
    return this.hasOne;
  };

  Model.prototype.addhasManyAssociation = function(association) {
    return this.hasMany.push(association);
  };

  Model.prototype.addhasOneAssociation = function(association) {
    return this.hasOne.push(association);
  };

  Model.prototype.getOneAndManyAssociations = function() {
    var associations, item, _i, _j, _len, _len1, _ref, _ref1;
    associations = [];
    _ref = this.getHasOneAssociations();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      associations.push(item.name);
      associations.push(item.options.reverse);
    }
    _ref1 = this.getHasManyAssociations();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      item = _ref1[_j];
      associations.push(item.name);
      associations.push(item.options.reverse);
    }
    return associations;
  };

  return Model;

})();

module.exports = Model;
