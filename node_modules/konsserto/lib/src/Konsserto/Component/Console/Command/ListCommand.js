
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Command, InputArgument, InputOption, ListCommand, Table, Tools,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Table = use('cli-table');

Command = use('@Konsserto/Component/Console/Command');

InputArgument = use('@Konsserto/Component/Console/Input/InputArgument');

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

Tools = use('@Konsserto/Component/Static/Tools');

ListCommand = (function(_super) {
  __extends(ListCommand, _super);

  function ListCommand() {
    return ListCommand.__super__.constructor.apply(this, arguments);
  }

  ListCommand.prototype.create = function() {
    this.setName('list');
    this.setDescription('List all commands');
    this.setDefinition();
    return this.setHelp('  The %command.name% command lists all commands:\n  %command.full_name%');
  };

  ListCommand.prototype.execute = function(input) {
    var command, commands, desc, k, limit, name, option, table, _ref;
    commands = Tools.sortObject(this.getApplication().getCommands());
    this.nl();
    this.write('Options :');
    table = new Table({
      head: ['Option', 'Description'],
      chars: this.getArrayChars()
    });
    _ref = this.getApplication().getDefaultInputDefinition().getOptions();
    for (k in _ref) {
      option = _ref[k];
      table.push(['--' + option.getName() + ' [' + option.getShortcut() + ']', option.getDescription()]);
    }
    this.write(table.toString());
    this.write('\nCommands :');
    table = new Table({
      head: ['Command name', 'Description'],
      chars: this.getArrayChars()
    });
    limit = 55;
    for (name in commands) {
      command = commands[name];
      desc = command.getDescription().length > limit ? command.getDescription().substr(0, limit) + '...' : command.getDescription();
      table.push([name, desc]);
    }
    return this.write(table.toString());
  };

  return ListCommand;

})(Command);

module.exports = ListCommand;
