###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

#
# InputOption is a command line option (--option)
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class InputOption

	@VALUE_NONE = 1
	@VALUE_REQUIRED = 2
	@VALUE_OPTIONAL = 4
	@VALUE_IS_ARRAY = 8

	constructor:(name,shortcut,mode, description,cdefault) ->

		if name.indexOf('--') == 0
			name = name.substr(2)
		
		if name == undefined
			throw new Error('An option name cannot be empty.')

		if shortcut != undefined
			if shortcut.constructor.name == 'Array'
				for short in shortcut
					short = short.replace(/-/g,'')
				shortcut = shortcut.join('|')
			else
				shortcut = shortcut.replace(/-/g,'')

		if mode == undefined
			mode = InputOption.VALUE_NONE
		else if ( !parseInt(mode) || mode > 15 || mode < 1)
			throw new Error('Option mode '+mode+' is not valid.')

		@name        = name
		@shortcut    = shortcut
		@mode        = mode
		@description = description

		if @isArray() && !@acceptValue()
			throw new Error('Impossible to have an option mode VALUE_IS_ARRAY if the option does not accept a value.')

		@setDefault(cdefault)

	getShortcut:() ->
		return @shortcut

	getName:() ->
		return @name

	acceptValue:() ->
		return @isValueRequired() || @isValueOptional()

	isValueRequired:() ->
		return InputOption.VALUE_REQUIRED == (InputOption.VALUE_REQUIRED  & @mode)

	isValueOptional:() ->
		return InputOption.VALUE_OPTIONAL  == (InputOption.VALUE_OPTIONAL  & @mode)

	isArray:() ->
		return InputOption.VALUE_IS_ARRAY  == (InputOption.VALUE_IS_ARRAY & @mode)

	setDefault:(cdefault) ->

		if (InputOption.VALUE_NONE  == (InputOption.VALUE_NONE  & @mode) && cdefault != undefined)
			throw new Error('Cannot set a default value when using InputOption.VALUE_NONE mode.')

		if (@isArray())
			if cdefault == undefined
				cdefault = []
			else if cdefault.constructor.name != 'Array'
				throw new Error('A default value for an array option must be an array.')

		@default = if @acceptValue() then cdefault else false

	getDefault:() ->
		return @default

	getDescription:() ->
		return @description

	equals:(option) ->
		return (
			option.getName() == @getName() &&
			option.getShortcut() == @getShortcut() &&
			option.getDefault() == @getDefault() &&
			option.isArray() == @isArray() &&
			option.isValueRequired() == @isValueRequired() &&
			option.isValueOptional() == @isValueOptional()
		)


module.exports = InputOption;