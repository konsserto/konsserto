###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

Input = use('@Konsserto/Component/Console/Input/Input')
Tools = use('@Konsserto/Component/Static/Tools')

#
# ArgvInput is a set of inputs as a argv command line
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class ArgvInput extends Input


	constructor:(argv,definition,command,@standalone = false) ->
		@tokens = null
		@parsed = null
		
		if !argv?
			argv = process.argv.slice(1)
			
		# Unshift the command name
		argv.shift()
		@tokens = argv
		super definition,command

	setTokens:(tokens) ->
		@tokens = tokens

	parse:() ->
		parseOptions = true
		@parsed = @tokens.slice(0)

		while undefined != token = @parsed.shift()
			if parseOptions && token == ''
				@parseArgument(token)
			else if parseOptions && token == '--'
				parseOptions = false
			else if parseOptions && token.indexOf('--') == 0
				@parseLongOption(token)
			else if parseOptions && '-' == token[0] && '-' != token
				@parseShortOption(token)
			else
				@parseArgument(token)

	parseShortOption:(token) ->

		name = token.substr(1)

		if name.length > 1
			if @definition.hasShortcut(name[0]) && @definition.getOptionForShortcut(name[0]).acceptValue()
				@addShortOption(name[0], name.substr(1))
			else
				@parseShortOptionSet(name)
				
		else
			@addShortOption(name, undefined)

	parseShortOptionSet:(name) ->

		len = name.length

		for i in [0..len]
			if !@definition.hasShortcut(name[i])
				throw new Error('The -'+name[i]+' option does not exist.')

			option = @definition.getOptionForShortcut(name[i])

			if option.acceptValue()
				@addLongOption(option.getName(), i == len - 1 ? null : name.substr(i + 1))
				break
			else
				@addLongOption(option.getName(), undefined)

	parseLongOption:(token) ->
		name = token.substr(2)
		pos = name.indexOf('=')

		if pos >= 0
			@addLongOption( name.substr(0,pos), name.substr(pos+1))
		else
			@addLongOption(name, undefined)

	parseArgument:(token) ->

		c = Object.keys(@arguments).length
		if @definition.hasArgument(c)
			arg = @definition.getArgument(c)
			@arguments[arg.getName()] = if arg.isArray() then [token] else token
		else if @definition.hasArgument(c - 1) && @definition.getArgument(c - 1).isArray()
			arg = @definition.getArgument(c - 1)

			if @arguments[arg.getName()] == undefined
				@arguments[arg.getName()] = []

			@arguments[arg.getName()].push(token)
		else
			if !@standalone
				throw new Error('Too many arguments.')

	addShortOption:(shortcut, value) ->

		if !@definition.hasShortcut(shortcut)
			throw new Error('The -'+shortcut+' option does not exist.')

		@addLongOption(@definition.getOptionForShortcut(shortcut).getName(), value)

	addLongOption:(name, value) ->

		if !@definition.hasOption(name)
			throw new Error('The --'+name+' option does not exist.')

		option = @definition.getOption(name)

		if undefined != value && !option.acceptValue()
			throw new Error('The --'+name+' option does not accept a value : '+value)


		if undefined == value && option.acceptValue() && @parsed.length
			next = @parsed.shift()

			if next[0] != undefined && '-' != next[0]
				value = next
			else if ( next == '')
				value = ''
			else
				@parsed.unshift(next)

		if undefined == value
			if option.isValueRequired()
				throw new Error('The --'+name+' option requires a value.')

			if !option.isArray()
				value = if option.isValueOptional() then option.getDefault() else true

		if option.isArray()
			if @options[name] == undefined
				@options[name] = []

			@options[name].push(value)
		else
			@options[name] = value

	getFirstArgument:() ->
		for token in @tokens
			if '-' == token.charAt(0)
				continue

			return token

	hasParameterOption:(values) ->

		for token in @tokens
			for value in values
				if token == value || 0 == token.indexOf(value+'=')
					return true

		return false

	getParameterOption:(values,def) ->

		tokens = @tokens.slice(0)
		while token = tokens.shift()
			for value in values
				if token == value || 0 == token.indexOf(value+'=')
					if false != pos = token.indexOf('=')
						return token.substr(pos + 1)

			return tokens.shift()

		return def

	__toString:() ->
		tokens = @tokens.map( (token) =>

			if (match = token.match('^(-[^=]+=)(.+)'))
				return match[1] + @escapeToken(match[2])

			if token && token[0] != '-'
				return @escapeToken(token)

			return token
		)
		return tokens.join(' ')


module.exports = ArgvInput;