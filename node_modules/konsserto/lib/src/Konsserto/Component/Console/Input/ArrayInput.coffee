###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

Input = use('@Konsserto/Component/Console/Input/Input')
Tools = use('@Konsserto/Component/Static/Tools')

#
# ArrayInput is a set of inputs as Array
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class ArrayInput extends Input


	constructor:(@parameters,definition) ->
		super definition

	getFirstArgument:() ->
		for key,value of @parameters
			if (key && '-' == key[0])
				continue

			return value

	hasParameterOption:(values) ->

		for k,v of @parameters
			if !Tools.isInt(k)
				v = k

			if values.indexOf(v) >= 0
				return true

		return false

	getParameterOption:(values,cdef) ->

		for k,v of @parameters
			if !Tools.isInt(k) && values.indexOf(v) >= 0
				return true
			else if values.indexOf(v) >= 0
				return v

		return cdef

	__toString:() ->

		params = []

		for k,v of @parameters
			if ('-' == k.charAt(0))
				params.push(k +( if '' != v then '='+@escapeToken(v) else ''))
			else
				params.push(@escapeToken(v))

		return params.join(' ')

	parse:() ->

		for key,value of @parameters
			if key.indexOf('--') >= 0
				@addLongOption(key.substr(2), value)
			else if ('-' == key[0])
				@addShortOption(key.substr(1), value)
			else
				@addArgument(key, value)

	addShortOption:(shortcut, value) ->

		if !@definition.hasShortcut(shortcut)
			throw new Error('The -'+shortcut+' option does not exist.')

		@addLongOption(@definition.getOptionForShortcut(shortcut).getName(), value)

	addLongOption:(name, value) ->

		if !@definition.hasOption(name)
			throw new Error('The -'+name+' option does not exist.')

		option = @definition.getOption(name)

		if (null == value)
			if option.isValueRequired()
				throw new Error('The -'+name+' option requires a value.')
			value = if option.isValueOptional() then option.getDefault() else tru

		@options[name] = value

	addArgument:(name, value) ->

		if !@definition.hasArgument(name)
			throw new Error('The '+name+' argument does not exist.')

		@arguments[name] = value


module.exports = ArrayInput;