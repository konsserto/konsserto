
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var InputArgument;

InputArgument = (function() {
  InputArgument.REQUIRED = 1;

  InputArgument.OPTIONAL = 2;

  InputArgument.ARRAY = 4;

  function InputArgument(name, mode, description, cdefault) {
    this.name = name;
    this.mode = mode;
    this.description = description;
    if (!mode) {
      this.mode = InputArgument.OPTIONAL;
    }
    this.setDefault(cdefault);
  }

  InputArgument.prototype.getDescription = function() {
    return this.description;
  };

  InputArgument.prototype.getDefault = function() {
    return this["default"];
  };

  InputArgument.prototype.getName = function() {
    return this.name;
  };

  InputArgument.prototype.isRequired = function() {
    return this.mode === InputArgument.REQUIRED & this.mode;
  };

  InputArgument.prototype.isArray = function() {
    return this.mode === InputArgument.ARRAY & this.mode;
  };

  InputArgument.prototype.setDefault = function(def) {
    if (this.mode === InputArgument.REQUIRED && def !== void 0) {
      throw new Error('Cannot set a default value except for OPTIONNAL mode');
    }
    if (this.isArray()) {
      if (def === void 0) {
        def = [];
      } else if (def.constructor.name !== 'Array') {
        throw new Error('A default value for an array argument must be an array.');
      }
    }
    return this["default"] = def;
  };

  return InputArgument;

})();

module.exports = InputArgument;
