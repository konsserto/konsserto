###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

InputOption = use('@Konsserto/Component/Console/Input/InputOption')
Tools = use('@Konsserto/Component/Static/Tools')

#
# InputDefinition is a collection of InputArgument and InputOption
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class InputDefinition


	constructor:(definition) ->
		@arguments = {}
		@requiredCount = 0
		@hasAnArrayArgument = false
		@hasOptional = false
		@options = {}
		@shortcuts = {}
		@setDefinition(definition)

	setDefinition:(definition) ->
		_arguments = {}
		options = {}
		cpt = 0

		if definition?
			for item in definition
				if item.constructor.name == 'InputOption'
					options[cpt++] = item
				else
					_arguments[cpt++] = item

		@setArguments(_arguments)
		@setOptions(options)

	setArguments:(_arguments) ->
		@arguments          = {}
		@requiredCount      = 0
		@hasOptional        = false
		@hasAnArrayArgument = false
		@addArguments(_arguments)

	addArguments:(_arguments) ->

		if  _arguments?
			for index,argument of _arguments
				@addArgument(argument)

	addArgument:(argument) ->

		if @arguments[argument.getName()]
			throw new Error('An argument with name '+argument.getName()+' already exists.')

		if @hasAnArrayArgument
			throw new Error('Cannot add an argument after an array argument.')

		if argument.isRequired() && @hasOptional
			throw new Error('Cannot add a required argument after an optional one.')

		if argument.isArray()
			@hasAnArrayArgument = true

		if argument.isRequired()
			++@requiredCount
		else
			@hasOptional = true

		@arguments[argument.getName()] = argument

	getArgument:(name) ->

		if !@hasArgument(name)
			throw new Error('The '+name+' argument does not exist.')

		_arguments = null

		if Tools.isInt(name)
			_arguments = Tools.toArray(@arguments)
		else
			_arguments = @arguments

		return _arguments[name]

	hasArgument:(name) ->
		_arguments = null

		if Tools.isInt(name)
			_arguments = Tools.toArray(@arguments)
		else
			_arguments = @arguments

		return _arguments[name]?

	getArguments:() ->
		return @arguments

	getArgumentCount:() ->
		return if @hasAnArrayArgument then Number.MAX_VALUE else @arguments.length

	getArgumentRequiredCount:() ->
		return @requiredCount

	getArgumentDefaults:() ->
		values = []

		for index,argument of @arguments
			values[argument.getName()] = argument.getDefault()
		return values

	setOptions:(options) ->
		@options = {}
		@shortcuts = {}
		@addOptions(options)

	addOptions:(options) ->

		for index,option of options
			@addOption(option)

	addOption:(option) ->

		if @options[option.getName()]?
			throw new Error('An option named '+option.getName()+' already exists.')

		if option.getShortcut()?
			for shortcut in option.getShortcut().split('|')
				if @shortcuts[shortcut]?
					throw new Error('An option with shortcut '+shortcut+' already exists.')

		@options[option.getName()] = option

		if option.getShortcut()
			for shortcut in option.getShortcut().split('|')
				@shortcuts[shortcut] = option.getName()

	getOption:(name) ->

		if !@hasOption(name)
			throw new Error('The --'+name+' option does not exist.')

		return @options[name]

	hasOption:(name) ->
		return @options[name]?

	getOptions:() ->
		return @options

	hasShortcut:(name) ->
		return @shortcuts[name]?

	getOptionForShortcut:(shortcut) ->
		return @getOption(@shortcutToName(shortcut))

	getOptionDefaults:() ->
		values = []

		for index,option of @options
			values[option.getName()] = option.getDefault()
		return values

	shortcutToName:(shortcut) ->

		if !@shortcuts[shortcut]?
			throw new Error('The -'+shortcut+' option does not exist.')

		return @shortcuts[shortcut]

	getSynopsis:() ->
		elements = []

		for index,option of @getOptions()
			shortcut = if option.getShortcut() then '-'+option.getShortcut()+'|' else ''
			out = '['

			if option.isValueRequired()
				out += shortcut+'--'+option.getName()+'="..."'
			else if option.isValueOptional()
				out += shortcut+'--'+option.getName()+'[="..."]'
			else
				out += shortcut+'--'+option.getName()
			out +=']'
			elements.push(out)

		for index,argument of @getArguments()
			out = ''

			if argument.isRequired()
				out += argument.getName()
				if argument.isArray()
					out += '1'
			else
				out += '['+argument.getName()+']'
				if argument.isArray()
					out += '1'
			elements.push(out)

			if argument.isArray()
				elements.push('... ['+argument.getName()+'N]')

		return elements.join(' ')


module.exports = InputDefinition;