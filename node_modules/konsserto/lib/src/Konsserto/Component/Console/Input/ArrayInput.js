
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var ArrayInput, Input, Tools,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Input = use('@Konsserto/Component/Console/Input/Input');

Tools = use('@Konsserto/Component/Static/Tools');

ArrayInput = (function(_super) {
  __extends(ArrayInput, _super);

  function ArrayInput(parameters, definition) {
    this.parameters = parameters;
    ArrayInput.__super__.constructor.call(this, definition);
  }

  ArrayInput.prototype.getFirstArgument = function() {
    var key, value, _ref;
    _ref = this.parameters;
    for (key in _ref) {
      value = _ref[key];
      if (key && '-' === key[0]) {
        continue;
      }
      return value;
    }
  };

  ArrayInput.prototype.hasParameterOption = function(values) {
    var k, v, _ref;
    _ref = this.parameters;
    for (k in _ref) {
      v = _ref[k];
      if (!Tools.isInt(k)) {
        v = k;
      }
      if (values.indexOf(v) >= 0) {
        return true;
      }
    }
    return false;
  };

  ArrayInput.prototype.getParameterOption = function(values, cdef) {
    var k, v, _ref;
    _ref = this.parameters;
    for (k in _ref) {
      v = _ref[k];
      if (!Tools.isInt(k) && values.indexOf(v) >= 0) {
        return true;
      } else if (values.indexOf(v) >= 0) {
        return v;
      }
    }
    return cdef;
  };

  ArrayInput.prototype.__toString = function() {
    var k, params, v, _ref;
    params = [];
    _ref = this.parameters;
    for (k in _ref) {
      v = _ref[k];
      if ('-' === k.charAt(0)) {
        params.push(k(+('' !== v ? '=' + this.escapeToken(v) : '')));
      } else {
        params.push(this.escapeToken(v));
      }
    }
    return params.join(' ');
  };

  ArrayInput.prototype.parse = function() {
    var key, value, _ref, _results;
    _ref = this.parameters;
    _results = [];
    for (key in _ref) {
      value = _ref[key];
      if (key.indexOf('--') >= 0) {
        _results.push(this.addLongOption(key.substr(2), value));
      } else if ('-' === key[0]) {
        _results.push(this.addShortOption(key.substr(1), value));
      } else {
        _results.push(this.addArgument(key, value));
      }
    }
    return _results;
  };

  ArrayInput.prototype.addShortOption = function(shortcut, value) {
    if (!this.definition.hasShortcut(shortcut)) {
      throw new Error('The -' + shortcut + ' option does not exist.');
    }
    return this.addLongOption(this.definition.getOptionForShortcut(shortcut).getName(), value);
  };

  ArrayInput.prototype.addLongOption = function(name, value) {
    var option;
    if (!this.definition.hasOption(name)) {
      throw new Error('The -' + name + ' option does not exist.');
    }
    option = this.definition.getOption(name);
    if (null === value) {
      if (option.isValueRequired()) {
        throw new Error('The -' + name + ' option requires a value.');
      }
      value = option.isValueOptional() ? option.getDefault() : tru;
    }
    return this.options[name] = value;
  };

  ArrayInput.prototype.addArgument = function(name, value) {
    if (!this.definition.hasArgument(name)) {
      throw new Error('The ' + name + ' argument does not exist.');
    }
    return this["arguments"][name] = value;
  };

  return ArrayInput;

})(Input);

module.exports = ArrayInput;
