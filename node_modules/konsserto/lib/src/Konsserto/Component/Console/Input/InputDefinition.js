
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var InputDefinition, InputOption, Tools;

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

Tools = use('@Konsserto/Component/Static/Tools');

InputDefinition = (function() {
  function InputDefinition(definition) {
    this["arguments"] = {};
    this.requiredCount = 0;
    this.hasAnArrayArgument = false;
    this.hasOptional = false;
    this.options = {};
    this.shortcuts = {};
    this.setDefinition(definition);
  }

  InputDefinition.prototype.setDefinition = function(definition) {
    var cpt, item, options, _arguments, _i, _len;
    _arguments = {};
    options = {};
    cpt = 0;
    if (definition != null) {
      for (_i = 0, _len = definition.length; _i < _len; _i++) {
        item = definition[_i];
        if (item.constructor.name === 'InputOption') {
          options[cpt++] = item;
        } else {
          _arguments[cpt++] = item;
        }
      }
    }
    this.setArguments(_arguments);
    return this.setOptions(options);
  };

  InputDefinition.prototype.setArguments = function(_arguments) {
    this["arguments"] = {};
    this.requiredCount = 0;
    this.hasOptional = false;
    this.hasAnArrayArgument = false;
    return this.addArguments(_arguments);
  };

  InputDefinition.prototype.addArguments = function(_arguments) {
    var argument, index, _results;
    if (_arguments != null) {
      _results = [];
      for (index in _arguments) {
        argument = _arguments[index];
        _results.push(this.addArgument(argument));
      }
      return _results;
    }
  };

  InputDefinition.prototype.addArgument = function(argument) {
    if (this["arguments"][argument.getName()]) {
      throw new Error('An argument with name ' + argument.getName() + ' already exists.');
    }
    if (this.hasAnArrayArgument) {
      throw new Error('Cannot add an argument after an array argument.');
    }
    if (argument.isRequired() && this.hasOptional) {
      throw new Error('Cannot add a required argument after an optional one.');
    }
    if (argument.isArray()) {
      this.hasAnArrayArgument = true;
    }
    if (argument.isRequired()) {
      ++this.requiredCount;
    } else {
      this.hasOptional = true;
    }
    return this["arguments"][argument.getName()] = argument;
  };

  InputDefinition.prototype.getArgument = function(name) {
    var _arguments;
    if (!this.hasArgument(name)) {
      throw new Error('The ' + name + ' argument does not exist.');
    }
    _arguments = null;
    if (Tools.isInt(name)) {
      _arguments = Tools.toArray(this["arguments"]);
    } else {
      _arguments = this["arguments"];
    }
    return _arguments[name];
  };

  InputDefinition.prototype.hasArgument = function(name) {
    var _arguments;
    _arguments = null;
    if (Tools.isInt(name)) {
      _arguments = Tools.toArray(this["arguments"]);
    } else {
      _arguments = this["arguments"];
    }
    return _arguments[name] != null;
  };

  InputDefinition.prototype.getArguments = function() {
    return this["arguments"];
  };

  InputDefinition.prototype.getArgumentCount = function() {
    if (this.hasAnArrayArgument) {
      return Number.MAX_VALUE;
    } else {
      return this["arguments"].length;
    }
  };

  InputDefinition.prototype.getArgumentRequiredCount = function() {
    return this.requiredCount;
  };

  InputDefinition.prototype.getArgumentDefaults = function() {
    var argument, index, values, _ref;
    values = [];
    _ref = this["arguments"];
    for (index in _ref) {
      argument = _ref[index];
      values[argument.getName()] = argument.getDefault();
    }
    return values;
  };

  InputDefinition.prototype.setOptions = function(options) {
    this.options = {};
    this.shortcuts = {};
    return this.addOptions(options);
  };

  InputDefinition.prototype.addOptions = function(options) {
    var index, option, _results;
    _results = [];
    for (index in options) {
      option = options[index];
      _results.push(this.addOption(option));
    }
    return _results;
  };

  InputDefinition.prototype.addOption = function(option) {
    var shortcut, _i, _j, _len, _len1, _ref, _ref1, _results;
    if (this.options[option.getName()] != null) {
      throw new Error('An option named ' + option.getName() + ' already exists.');
    }
    if (option.getShortcut() != null) {
      _ref = option.getShortcut().split('|');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shortcut = _ref[_i];
        if (this.shortcuts[shortcut] != null) {
          throw new Error('An option with shortcut ' + shortcut + ' already exists.');
        }
      }
    }
    this.options[option.getName()] = option;
    if (option.getShortcut()) {
      _ref1 = option.getShortcut().split('|');
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        shortcut = _ref1[_j];
        _results.push(this.shortcuts[shortcut] = option.getName());
      }
      return _results;
    }
  };

  InputDefinition.prototype.getOption = function(name) {
    if (!this.hasOption(name)) {
      throw new Error('The --' + name + ' option does not exist.');
    }
    return this.options[name];
  };

  InputDefinition.prototype.hasOption = function(name) {
    return this.options[name] != null;
  };

  InputDefinition.prototype.getOptions = function() {
    return this.options;
  };

  InputDefinition.prototype.hasShortcut = function(name) {
    return this.shortcuts[name] != null;
  };

  InputDefinition.prototype.getOptionForShortcut = function(shortcut) {
    return this.getOption(this.shortcutToName(shortcut));
  };

  InputDefinition.prototype.getOptionDefaults = function() {
    var index, option, values, _ref;
    values = [];
    _ref = this.options;
    for (index in _ref) {
      option = _ref[index];
      values[option.getName()] = option.getDefault();
    }
    return values;
  };

  InputDefinition.prototype.shortcutToName = function(shortcut) {
    if (this.shortcuts[shortcut] == null) {
      throw new Error('The -' + shortcut + ' option does not exist.');
    }
    return this.shortcuts[shortcut];
  };

  InputDefinition.prototype.getSynopsis = function() {
    var argument, elements, index, option, out, shortcut, _ref, _ref1;
    elements = [];
    _ref = this.getOptions();
    for (index in _ref) {
      option = _ref[index];
      shortcut = option.getShortcut() ? '-' + option.getShortcut() + '|' : '';
      out = '[';
      if (option.isValueRequired()) {
        out += shortcut + '--' + option.getName() + '="..."';
      } else if (option.isValueOptional()) {
        out += shortcut + '--' + option.getName() + '[="..."]';
      } else {
        out += shortcut + '--' + option.getName();
      }
      out += ']';
      elements.push(out);
    }
    _ref1 = this.getArguments();
    for (index in _ref1) {
      argument = _ref1[index];
      out = '';
      if (argument.isRequired()) {
        out += argument.getName();
        if (argument.isArray()) {
          out += '1';
        }
      } else {
        out += '[' + argument.getName() + ']';
        if (argument.isArray()) {
          out += '1';
        }
      }
      elements.push(out);
      if (argument.isArray()) {
        elements.push('... [' + argument.getName() + 'N]');
      }
    }
    return elements.join(' ');
  };

  return InputDefinition;

})();

module.exports = InputDefinition;
