###
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

InputDefinition = use('@Konsserto/Component/Console/Input/InputDefinition')

#
# Input is abstraction of a command input
#
# @author Jessym Reziga <jessym@konsserto.com>
#
class Input


	constructor: (definition,command) ->
		@arguments = {}
		@options = {}
		@interactive = true

		if (definition == undefined)
			definition = new InputDefinition()
		else if definition.constructor.name == 'Array'
			definition = new InputDefinition(definition)
			@bind(definition,command)
			@validate()
		else
			@bind(definition,command)
			@validate()

	bind: (definition) ->
		@arguments = {}
		@options = {}
		@definition = definition
		@parse()

	parse: () -> # @abtract

	validate: () ->

		if Object.keys(@arguments).length < @definition.getArgumentRequiredCount()
			throw new Error('Not enough arguments.')

	isInteractive: () ->
		return @interactive

	setInteractive: (interactive) ->
		@interactive = interactive

	getArguments: () ->
		return @definition.getArgumentDefaults().concat(@arguments)

	getArgument: (name) ->

		if !@definition.hasArgument(name)
			throw new Error('The '+name+' argument does not exist.')

		if @arguments[name] != undefined
			return @arguments[name]
		else
			@definition.getArgument(name).getDefault()

	getSynopsisBuffer: ()->
		return @definition

	setArgument: (name, value) ->

		if !@definition.hasArgument(name)
			throw new Error('The '+name+' argument does not exist.')

		@arguments[name] = value

	hasArgument: (name) ->
		return @definition.hasArgument(name)

	getOptions: () ->
		return @definition.getOptionDefaults().concat(@options)

	getOption: (name) ->

		if !@definition.hasOption(name)
			throw new Error('The '+name+' option does not exist.')

		if @options[name] != undefined
			return @options[name]
		else
			return @definition.getOption(name).getDefault()

	setOption: (name, value) ->

		if !@definition.hasOption(name)
			throw new Error('The '+name+' option does not exist.')

		@options[name] = value

	hasOption: (name) ->
		return @definition.hasOption(name)

	escapeToken: (token) ->

		if token.match('^[w-]+')
			return token

		return @escapeshellarg(token)

	escapeshellarg: (str) ->
		out = ''
		out = str.replace(/[^\\]'/g, (m, i, s)->
			return m.slice(0, 1) + '\\\'';
		);
		return out;


module.exports = Input;