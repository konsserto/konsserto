
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Application, Bundle, ConsoleApplication, Kernel,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bundle = use('@Konsserto/Component/Bundle/Bundle');

ConsoleApplication = use('@Konsserto/Component/Console/ConsoleApplication');

Kernel = use('@Konsserto/Component/HttpKernel/Kernel');

Application = (function(_super) {
  __extends(Application, _super);

  function Application(kernel) {
    this.kernel = kernel;
    this.commandsRegistered = false;
    Application.__super__.constructor.call(this, 'Konsserto', Kernel.VERSION);
  }

  Application.prototype.getKernel = function() {
    return this.kernel;
  };

  Application.prototype.run = function(input) {
    var command, k, _ref;
    this.kernel.boot();
    this.container = this.kernel.container;
    if (!this.commandsRegistered) {
      this.registerCommands();
      this.commandsRegistered = true;
    }
    _ref = this.commands;
    for (k in _ref) {
      command = _ref[k];
      command.setContainer(this.container);
    }
    return Application.__super__.run.call(this, input);
  };

  Application.prototype.registerCommands = function() {
    var bundle, bundleName, bundles, _results;
    bundles = this.container.get('Application').getBundles();
    _results = [];
    for (bundleName in bundles) {
      bundle = bundles[bundleName];
      if (bundle instanceof Bundle) {
        _results.push(bundle.registerCommands(this));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Application;

})(ConsoleApplication);

module.exports = Application;
