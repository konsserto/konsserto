###
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

fs = require("fs")

# File logically identify a physic file on filesystem
#
# @author Marvin Frachet <marvin@konsserto.com>
class File

  # Class constructor
  # @param {String} name name of the file
  # @param {String} relativePath relative path of the file
  constructor: (@name, @relativePath)->
    if @relativePath.charAt(@relativePath.length - 1) != '/'
      @relativePath += '/'
    @relativePathName = @relativePath + @name
    @file = fs.statSync(@relativePathName)

  # @return {Number} The size of the file
  getSize: ()->
    return @file.size

  # @return {Date} The added time of the file
  getAddedTime: ()->
    return @file.atime

  # @return {Date} The updated time of the file
  getUpTime: ()->
    return @file.mtime

  # @return {String} The relative path of the file
  getRelativePath: ()->
    return @relativePath

  # @return {String} The relative path and the name of the file
  getRelativePathName: ()->
    return @relativePathName

  # @return {String} The name of the file with extension
  getName: ()->
    return @name

  # @return {String} The extension of the file
  getExtension: ()->
    ext = @name.split('.').pop()
    if ext == @name
      return ''
    return ext

  # @return {String} The content of the file encoded with UTF-8
  getContent: ()->
    return fs.readFileSync(@relativePathName, {encoding: 'utf-8'})

  # @return {String} The name without the extension
  getNameWithoutExtension: () ->
    return @name.replace('.' + @getExtension(), '')


module.exports = File