###
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

fs = use('fs')

DirectoryFinder = use('@Konsserto/Component/Finder/DirectoryFinder')
FileFinder = use('@Konsserto/Component/Finder/FileFinder')

# Finder
#
# @author Marvin Frachet <marvin@konsserto.com>
class Finder

  # Class constructor
  # @return {Finder} The current Finder object for chaining methods
  constructor: ()->
    @isRecursive = false
    return @

  # Method allowing the file finder
  # @return {Finder} The current Finder object for chaining methods
  files: ()->
    @fileFinder = new FileFinder()
    return @

  # Method allowing the recursive research in directories
  # @return {Finder} The current Finder object for chaining methods
  recursive: () ->
    @isRecursive = true
    return @

  # Method disallowing the recursive research in directories
  # @return {Finder} The current Finder object for chaining methods
  notRecursive: () ->
    @isRecursive = false
    return @

  # Method allowing the directory finder
  # @return {Finder} The current Finder object for chaining methods
  directories: ()->
    @directoryFinder = new DirectoryFinder()
    return @

  # Method giving the list of the actual choice (directory or files) in the current folder
  # @param {String} rootDir Root directory where the search starts
  # @param {Boolean} resursive Default value set with the recursive/notRecursive method, but can be forced if needed
  # @return {Finder} The current Finder object for chaining methods
  in: (rootDir, recursive = @isRecursive)->
    if (fs.existsSync(rootDir))
      if @fileFinder
        if !recursive
          @fileFinder.getFiles(rootDir)
        else
          @fileFinder.getRecursive(rootDir)
      else
        if @directoryFinder
          @directoryFinder.getDirs(rootDir, recursive)
    return @

  # Method giving the list of the actual choice (directory or files) in the current folder
  # @return [Object] The actual list of {File} or {Directory} wanted
  display: ()->
    if @fileFinder
      return @fileFinder.getResult()
    else
      if @directoryFinder.getResult().length == 0
        @directoryFinder.getDirs('.', true)
      return @directoryFinder.getResult()


  # Method filtering the files/directories by name
  # @param {String} name Name that should filter
  # @return {Finder} The current Finder object for chaining methods
  name: (name)->
    if @fileFinder
      @fileFinder.name(name)
    else
      @directoryFinder.name(name)
    return @


  # Method filtering the files/directories by name (doesn't contain the name are kept)
  # @param {String} name Name that should filter
  # @return {Finder} The current Finder object for chaining methods
  notName: (name)->
    if @fileFinder
      @fileFinder.notName(name)
    else
      @directoryFinder.notName(name)
    return @

  # Method filtering the files  by size
  # @param {Size} size Size comparison that should filter the files variable
  # @example How to call size
  #   size('< 500')
  #   size('>= 253')
  # @note Only the files are concerned by this method files() should be called before
  # @return {Finder} The current Finder object for chaining methods
  size: (size)->
    if @fileFinder
      @fileFinder.size(size)
    return @

  # Method ordering the files/directories resultset
  # @param {String} orderby Order by the attribute
  # @param {Boolean} orderway Order by the orderway direction (DESC, ASC)
  # @return {Finder} The current Finder object for chaining methods
  sortBy: (orderby, orderway)->
    if @fileFinder
      @fileFinder.sortBy(orderby, orderway)
    else
      @directoryFinder.sortBy(orderby, orderway)
    return @

  # Method filtering the files  by content
  # @param {String} content Content that should filter the files variable
  # @note This method should be long to execute if you have many folders and files
  # @note Only the files are concerned by this method files() should be called before
  # @return {Finder} The current Finder object for chaining methods
  contains: (content)->
    if @fileFinder
      @fileFinder.contains(content)
    return @


  # Method filtering the files by extension
  # @param {String} extension Extension comparison that should filter the files variable
  # @note Only the files are concerned by this method files() should be called before
  # @return {Finder} The current Finder object for chaining methods
  ext: (extension)->
    if @fileFinder
      @fileFinder.ext(extension)
    return @

module.exports = Finder