###
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

fs = use('fs')

DirectoryFinder = use('@Konsserto/Component/Finder/DirectoryFinder')
FileFinder = use('@Konsserto/Component/Finder/FileFinder')

#
# Finder
#
# @author Marvin Frachet <marvin@konsserto.com>
#
class Finder


	constructor: ()->
		###
    		Instanciation of a new Finder Service
		###
		@isRecursive = false
		return @

	files: ()->
		###
    		Make the choice to manage files with the finder
		###
		@fileFinder = new FileFinder()
		return @

	recursive: () ->
		###
    		Make the choice to make a recursive search
		###
		@isRecursive = true
		return @

	notRecursive: () ->
		###
    		Make the choice to explicitly don't make a recursive search
		###
		@isRecursive = false
		return @

	directories: ()->
		###
    		Make the choice to manage directories with the finder
		###
		@directoryFinder = new DirectoryFinder()
		return @

	in: (rootDir, recursive = @isRecursive)->
		###
    		Get the list of the choosen type in the current folder
		###
		if (fs.existsSync(rootDir))
			if @fileFinder
				if !recursive
					@fileFinder.getFiles(rootDir)
				else
					@fileFinder.getRecursive(rootDir)
			else
				if @directoryFinder
					@directoryFinder.getDirs(rootDir, recursive)
		return @

	display: ()->
		###
    		Get the resulting list corresponding to the search
		###
		if @fileFinder
			return @fileFinder.getResult()
		else
			if @directoryFinder.getResult().length == 0
				@directoryFinder.getDirs('.', true)
			return @directoryFinder.getResult()

	name: (name)->
		###
    		Reduce the resulting list by the name parameter
    	###
		if @fileFinder
			@fileFinder.name(name)
		else
			@directoryFinder.name(name)
		return @

	notName: (name)->
		###
    		Reduce the resulting list if the name is different from the parameter
    	###
		if @fileFinder
			@fileFinder.notName(name)
		else
			@directoryFinder.notName(name)
		return @

	size: (size)->
		###
    		Get the file size
    	###
		@fileFinder.size(size)
		return @

	sortBy: (orderby, orderway)->
		###
    		Sort the resulting list
		###
		if @fileFinder
			@fileFinder.sortBy(orderby, orderway)
		else
			@directoryFinder.sortBy(orderby, orderway)
		return @

	contains: (content)->
		###
    		Reduce the files list that don't contain the content parameter value"
    	###
		if @fileFinder
			@fileFinder.contains(content)
		return @

	ext: (extension)->
		###
    		Reduce the files list that don't have the extension passed in paramter"
    	###
		if @fileFinder
			@fileFinder.ext(extension)
		return @

	end: ()->
		return @display()


module.exports = Finder