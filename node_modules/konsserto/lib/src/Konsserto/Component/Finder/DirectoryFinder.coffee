###
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

fs = use('fs')

Directory = use('@Konsserto/Component/Finder/Directory')

# DirectoryFinder
#
# @author Marvin Frachet <marvin@konsserto.com>
class DirectoryFinder

  # Class constructor
  constructor: ()->
    @directories = []

  # Method finding and pushing the directories found in the directories variable
  # @param {String} rootDir Root directory where the search starts
  # @param {Boolean} recursive Is the search recursive in folders ?
  getDirs: (rootDir, recursive)->
    files = fs.readdirSync(rootDir)
    for file in files
      if file[0] != '.'
        filePath = "#{rootDir}/#{file}"
        stat = fs.statSync(filePath)
        if stat.isDirectory()
          @directories.push(new Directory(file, rootDir))
          if recursive
            @getDirs(rootDir + "/" + file, recursive)

  # Method filtering the directories by name
  # @param {String} name Name that should filters the directories variable
  name: (name)->
    new_directories = []
    for file in @directories
      if file.getName().match name
        new_directories.push file
    @directories = new_directories

  # Method filtering the directories by name (doesn't contain the name are kept)
  # @param {String} name Name that should filters the directories variable
  notName: (name)->
    new_directories = []
    for file in @directories
      if !file.getName().match name
        new_directories.push file
    @directories = new_directories

  # Method ordering the directories resultset
  # @param {String} orderby Order by the attribute
  # @param {Boolean} orderway Order by the orderway direction (DESC, ASC)
  sortBy: (orderby, orderway) ->
    if !orderway
      @directories.sort (a, b)->
        return if a[orderby] >= b[orderby] then 1 else -1
    else
      @directories.sort (a, b)->
        return if a[orderby] >= b[orderby] then -1 else 1

  # Method returning the directories variable
  # @return [Directory] directories
  getResult: ()->
    return @directories


module.exports = DirectoryFinder