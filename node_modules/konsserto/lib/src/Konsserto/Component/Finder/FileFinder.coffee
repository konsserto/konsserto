###
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

fs = use('fs')

DirectoryFinder = use('@Konsserto/Component/Finder/DirectoryFinder')
File = use('@Konsserto/Component/Finder/File')

#
# FileFinder
#
# @author Marvin Frachet <marvin@konsserto.com>
#
class FileFinder


	constructor: ()->
		###
    		Instanciation of the file finder
    	###
		@files = []

	getRecursive: (rootDir)->
		###
			Get a list of file with recursive search in folders from the path passed in parameter
		###
		dirFinder = new DirectoryFinder()
		result = @readFile(rootDir)
		dirFinder.getDirs(rootDir, true)
		directories = dirFinder.getResult()
		for dir in directories
			file = @readFile(dir.getRelativePath())
			result = result.concat(file)
		@files = result

	getFiles: (rootDir) ->
		###
			Get a list of file in the folder passed in parameter
		###
		@files = @readFile rootDir

	readFile: (rootDir)->
		###
			Read the directory file and determine if it's a file or a directory, and return the list of the files corresponding
		###
		files = fs.readdirSync(rootDir)
		result = []
		for file in files
			if file[0] != '.'
				filePath = "#{rootDir}/#{file}"
				stat = fs.statSync(filePath)
				if !stat.isDirectory()
					result.push(new File(file, rootDir))
		return result

	name: (name)->
		###
    		Reduce the files list with files that match the name passed in parameter
    	###
		new_files = []
		for file in @files
			if file.getName().match name
				new_files.push file
		@files = new_files

	notName: (name)->
		###
    		Reduce the files list with files that doesn't match the name passed in parameter
    	###
		new_files = []
		for file in @files
			if !file.getName().match name
				new_files.push file
		@files = new_files

	size: (size)->
		###
    		Reduce the files list with a file size comparisaon in string link : " < 500"
    	###
		new_files = []
		for file in @files
			comparizon = eval("file.getSize()" + size)
			if comparizon
				new_files.push file
		@files = new_files

	sortBy: (orderby, orderway) ->
		###
    		Sort the files list by the "orderBy" key, in the "orderway" direction
    	###
		if !orderway
			@files.sort (a, b)->
				return if a[orderby] >= b[orderby] then 1 else -1
		else
			@files.sort (a, b)->
				return if a[orderby] >= b[orderby] then -1 else 1

	getResult: ()->
		###
    		Get the final result of all the different tasks made by the file finder
    	###
		return @files

	contains: (content)->
		###
    		Reduce the files list that don't contain the content parameter value"
    	###
		result = []
		for file in @files
			if file.getContent().indexOf(content) > -1
				result.push file
		@files = result
		return @

	ext: (extension)->
		###
    		Reduce the files list that don't have the extension passed in paramter"
    	###
		extension = if extension.indexOf('.') == 0 then extension else '.' + extension
		result = []
		for file in @files
			if file.getName().lastIndexOf(extension) >= 0
				result.push file
		@files = result
		return @


module.exports = FileFinder