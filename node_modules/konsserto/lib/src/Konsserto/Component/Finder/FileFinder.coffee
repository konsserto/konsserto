###
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
###

fs = use('fs')

DirectoryFinder = use('@Konsserto/Component/Finder/DirectoryFinder')
File = use('@Konsserto/Component/Finder/File')

# FileFinder
#
# @author Marvin Frachet <marvin@konsserto.com>
class FileFinder

  # Class constructor
  constructor: ()->
    @files = []


  # Method finding and pushing the files found in the files variable
  # @param {String} rootDir Root directory where the search starts
  # @note the files are searched recursively in the folder tree
  getRecursive: (rootDir)->
    dirFinder = new DirectoryFinder()
    result = @readFile(rootDir)
    dirFinder.getDirs(rootDir, true)
    directories = dirFinder.getResult()
    for dir in directories
      file = @readFile(dir.getRelativePath())
      result = result.concat(file)
    @files = result

  # Method finding and pushing the files found in the files variable
  # @param {String} rootDir Root directory where the search starts
  # @note the search is not recursive
  getFiles: (rootDir) ->
    @files = @readFile rootDir

  # Method reading and finding the files in a directory
  # @param {String} rootDir Root directory where the search starts
  # @return {Object} The list of the files in the directory
  readFile: (rootDir)->
    files = fs.readdirSync(rootDir)
    result = []
    for file in files
      if file[0] != '.'
        filePath = "#{rootDir}/#{file}"
        stat = fs.statSync(filePath)
        if !stat.isDirectory()
          result.push(new File(file, rootDir))
    return result

  # Method filtering the files by name
  # @param {String} name Name that should filter the files variable
  name: (name)->
    new_files = []
    for file in @files
      if file.getName().match name
        new_files.push file
    @files = new_files


  # Method filtering the files by name (doesn't contain the name are kept)
  # @param {String} name Name that should filter the files variable
  notName: (name)->
    new_files = []
    for file in @files
      if !file.getName().match name
        new_files.push file
    @files = new_files

  # Method filtering the files by size
  # @param {Size} size Size comparison that should filter the files variable
  # @example How to call size
  #   size('< 500')
  #   size('>= 253')
  size: (size)->
    new_files = []
    for file in @files
      comparizon = eval("file.getSize()" + size)
      if comparizon
        new_files.push file
    @files = new_files


  # Method ordering the files resultset
  # @param {String} orderby Order by the attribute
  # @param {Boolean} orderway Order by the orderway direction (DESC, ASC)
  sortBy: (orderby, orderway) ->
    if !orderway
      @files.sort (a, b)->
        return if a[orderby] >= b[orderby] then 1 else -1
    else
      @files.sort (a, b)->
        return if a[orderby] >= b[orderby] then -1 else 1

  # Method returning the files variable
  # @return [File] files
  getResult: ()->
    return @files

  # Method filtering the files by content
  # @param {String} content Content that should filter the files variable
  # @note This method should be long to execute if you have many folders and files
  contains: (content)->
    result = []
    for file in @files
      if file.getContent().indexOf(content) > -1
        result.push file
    @files = result
    return @

  # Method filtering the files by extension
  # @param {String} extension Extension comparison that should filter the files variable
  ext: (extension)->
    extension = if extension.indexOf('.') == 0 then extension else '.' + extension
    result = []
    for file in @files
      if file.getName().lastIndexOf(extension) >= 0
        result.push file
    @files = result
    return @


module.exports = FileFinder