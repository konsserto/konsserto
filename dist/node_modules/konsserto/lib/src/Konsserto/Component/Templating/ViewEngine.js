
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var CONFIG, InvalidArgumentException, ViewEngine, filesystem, mixin, url_resolver;

filesystem = use('fs');

mixin = use('utils-merge');

url_resolver = use('url-resolver');

CONFIG = use('/app/config/config');

InvalidArgumentException = use('@Konsserto/Component/Templating/Exception/InvalidArgumentException');

ViewEngine = (function() {
  function ViewEngine(application, container) {
    this.application = application;
    this.container = container;
    this.app = application.app;
    this.prepareViewEngine();
  }

  ViewEngine.prototype.prepareViewEngine = function() {
    var engine, engineName;
    engine = '';
    if (CONFIG.templateEngine && CONFIG.templateEngine !== '') {
      engine = CONFIG.templateEngine;
      engineName = CONFIG.templateEngine === 'twig' ? 'ks-twig' : CONFIG.templateEngine;
    } else {
      engine = 'twig';
      engineName = 'ks-twig';
    }
    this.engine = use(engineName);
    this.app.set('view engine', CONFIG.templateEngine);
    this.app.engine('.' + CONFIG.templateEngine, this.engine.__express);
    this.fixRenderPath();
    this.app.set('views', '');
    return console.log('[Templating] View Engine ' + engine + ' OK');
  };

  ViewEngine.prototype.fixRenderPath = function() {
    var container;
    container = this.container;
    return this.app.render = function(name, options, fn) {
      var cache, configs, engines, err, opts, view;
      if (options == null) {
        options = {};
      }
      opts = {};
      cache = this.cache;
      engines = this.engines;
      view = void 0;
      configs = CONFIG;
      options['app'] = {
        configuration: configs,
        host: container.get('router').getHost(),
        request: container.get('request_stack').getCurrentRequest()
      };
      if ('function' === typeof options) {
        fn = options;
        options = {};
      }
      mixin(opts, this.locals);
      if (options._locals) {
        mixin(opts, options._locals);
      }
      mixin(opts, options);
      opts.cache = (null === opts.cache ? this.enabled('view cache') : opts.cache);
      if (opts.cache) {
        view = cache[name];
      }
      if (!view) {
        view = new (this.get('view'))(name, {
          defaultEngine: this.get('view engine'),
          root: this.get('views'),
          engines: engines
        });
        view.path = url_resolver.processViewPath(name);
        if (!view.path) {
          err = new Error('Failed to lookup view \'' + name + '\' in views directory \'' + view.root + '\'');
          err.view = view;
          return fn(err);
        }
        if (opts.cache) {
          cache[name] = view;
        }
      }
      try {
        view.render(opts, fn);
      } catch (_error) {
        err = _error;
        fn(err);
      }
    };
  };

  ViewEngine.prototype.getEngine = function() {
    return this.engine;
  };

  ViewEngine.prototype.isValidTemplate = function(template) {
    var e, processed;
    try {
      processed = url_resolver.processViewPath(template);
      return filesystem.readFileSync(processed);
    } catch (_error) {
      e = _error;
      throw new InvalidArgumentException('Unable to find template ' + template);
    }
  };

  ViewEngine.prototype.renderResponse = function(view, parameters, res) {
    var e;
    if (parameters == null) {
      parameters = {};
    }
    try {
      return res.render(view, parameters);
    } catch (_error) {
      e = _error;
      throw e;
    }
  };

  ViewEngine.prototype.render = function(view, parameters) {
    var e;
    if (parameters == null) {
      parameters = {};
    }
    try {
      return this.engine.renderOnly(view, parameters);
    } catch (_error) {
      e = _error;
      throw e;
    }
  };

  return ViewEngine;

})();

module.exports = ViewEngine;
