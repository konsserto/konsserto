
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var ServiceInstance, Tools, cc;

cc = use('cli-color');

Tools = use('@Konsserto/Component/Static/Tools');

ServiceInstance = (function() {
  function ServiceInstance(serviceDefinition) {
    this.serviceDefinition = serviceDefinition;
    console.log('[Service] Setup ' + this.getLabel() + ' Service : ' + cc.green('[' + this.getDefinition().getName() + ']'));
  }

  ServiceInstance.prototype.getDefinition = function() {
    return this.serviceDefinition;
  };

  ServiceInstance.prototype.getLabel = function() {
    switch (this.getDefinition().getType()) {
      case 'kernel':
        return 'Core';
      case 'konsserto':
        return 'Konsserto';
      case 'global':
        return 'Global';
      default:
        return 'Bundle';
    }
  };

  ServiceInstance.prototype.setServiceDefinition = function(serviceDefinition) {
    this.serviceDefinition = serviceDefinition;
    return this;
  };

  ServiceInstance.prototype.getService = function() {
    var e;
    try {
      return use(this.getDefinition().getClassName());
    } catch (_error) {
      e = _error;
      throw new Error('An error occured in ' + this.getDefinition().getClassName() + '\n' + e.message);
    }
  };

  ServiceInstance.prototype.setInstance = function(instance) {
    this.instance = instance;
    return this;
  };

  ServiceInstance.prototype.getInstance = function() {
    return this.instance;
  };

  ServiceInstance.prototype.instanceExists = function() {
    if (this.getInstance() != null) {
      return true;
    }
    return false;
  };

  ServiceInstance.prototype.evaluateInstance = function(container) {
    var serviceNamespace;
    serviceNamespace = this.getService();
    eval("instance = new serviceNamespace(" + this.getDefinition().getCompilerArguments('container') + ");");
    return this.setInstance(instance);
  };

  return ServiceInstance;

})();

module.exports = ServiceInstance;
