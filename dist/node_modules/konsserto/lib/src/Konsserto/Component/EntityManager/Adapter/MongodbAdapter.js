var DBCONFIG, MongoClient, MongodbAdapter, ObjectID, Q, cc,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

MongoClient = use('mongodb').MongoClient;

DBCONFIG = use('/app/config/config').database;

cc = use('cli-color');

ObjectID = use('mongodb').ObjectID;

Q = use('q');

MongodbAdapter = (function() {
  function MongodbAdapter() {}

  MongodbAdapter.INSTANCE = void 0;

  MongodbAdapter.CONNECTION = void 0;

  MongodbAdapter.getInstance = function() {
    if (!this.INSTANCE) {
      this.INSTANCE = new this;
      this.connect();
    }
    return this.INSTANCE;
  };

  MongodbAdapter.connect = function() {
    return MongoClient.connect('mongodb://' + DBCONFIG.host + ':' + DBCONFIG.port + '/' + DBCONFIG.name + '', function(err, db) {
      if (err) {
        console.log(cc.red('[ERROR MONGODB] An error occured with MongoDb, maybe due to : '));
        console.log(cc.red('      - MongoDb is not started'));
        console.log(cc.red('      - Bad host configuration in /app/config/config, database part'));
        console.log(cc.red('      - Bad port configuration in /app/config/config, database part'));
        console.log(cc.red('      - Bad name configuration in /app/config/config, database part'));
        return console.log(cc.red('      - Bad user or bad password configuration in /app/config/config, database part'));
      } else {
        MongodbAdapter.CONNECTION = db;
        return MongodbAdapter.showConfigurations();
      }
    });
  };

  MongodbAdapter.showConfigurations = function() {
    console.log('');
    console.log('------------------------------------------------------------------');
    console.log(cc.magentaBright('[DATABASE] MONGODB started and ready'));
    console.log(cc.magentaBright('           Host     : ' + DBCONFIG.host));
    console.log(cc.magentaBright('           Port     : ' + DBCONFIG.port));
    console.log(cc.magentaBright('           Database : ' + DBCONFIG.name));
    console.log(cc.magentaBright('           User     : ' + DBCONFIG.user));
    console.log(cc.magentaBright('           Password : ' + DBCONFIG.password));
    console.log('------------------------------------------------------------------');
    return console.log('');
  };

  MongodbAdapter.prototype.getAll = function(collectionName) {
    var deferred;
    deferred = Q.defer();
    MongodbAdapter.CONNECTION.collection(collectionName).find({}).toArray(function(err, result) {
      if (err) {
        return deferred.reject(new Error(err));
      } else {
        return deferred.resolve(result);
      }
    });
    return deferred.promise;
  };

  MongodbAdapter.prototype.getById = function(collectionName, id) {
    var deferred;
    deferred = Q.defer();
    MongodbAdapter.CONNECTION.collection(collectionName).findOne({
      id: new ObjectID(id)
    }, function(err, result) {
      if (err) {
        return deferred.reject(new Error(err));
      } else {
        return deferred.resolve(result);
      }
    });
    return deferred.promise;
  };

  MongodbAdapter.prototype.getByCriteria = function(collectionName, criteria) {
    var deferred;
    deferred = Q.defer();
    MongodbAdapter.CONNECTION.collection(collectionName).find(criteria).toArray(function(err, result) {
      if (err) {
        return deferred.reject(new Error(err));
      } else {
        return deferred.resolve(result);
      }
    });
    return deferred.promise;
  };

  MongodbAdapter.prototype.add = function(collectionName, obj) {
    var deferred;
    deferred = Q.defer();
    MongodbAdapter.CONNECTION.collection(collectionName).insert(this.makeObjectPersistant(obj), function(err, result) {
      if (err) {
        return deferred.reject(new Error(err));
      } else {
        if (result.length === 1) {
          obj.id.value = result[0].id;
          return deferred.resolve(obj);
        } else {
          return deferred.reject(new Error(err));
        }
      }
    });
    return deferred.promise;
  };

  MongodbAdapter.prototype.makeObjectPersistant = function(object) {
    var array_types, k, objectPersistant, v, value, _i, _len, _ref, _ref1;
    objectPersistant = {};
    array_types = ['string', 'int', 'long', 'time', 'date'];
    for (k in object) {
      v = object[k];
      if (k !== 'repository') {
        if (!v.dbIgnore) {
          if (_ref = v.type, __indexOf.call(array_types, _ref) >= 0) {
            if (k !== 'id') {
              objectPersistant[k] = v.value;
            }
          } else {
            if (Array.isArray(v.value)) {
              objectPersistant[k] = [];
              console.log(v.value);
              _ref1 = v.value;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                value = _ref1[_i];
                objectPersistant[k].push({
                  $ref: v.type,
                  $id: value.id.value
                });
              }
            } else {
              objectPersistant[k] = {
                $ref: v.type,
                $id: v.id.value
              };
            }
          }
        }
      }
    }
    return objectPersistant;
  };

  MongodbAdapter.prototype.makeObjectPersistant = function(object) {
    var array_types, k, objectPersistant, v, value, _i, _len, _ref, _ref1;
    objectPersistant = {};
    array_types = ['string', 'int', 'long', 'time', 'date'];
    for (k in object) {
      v = object[k];
      if (k !== 'repository') {
        if (!v.dbIgnore) {
          if (_ref = v.type, __indexOf.call(array_types, _ref) >= 0) {
            if (k !== 'id') {
              objectPersistant[k] = v.value;
            }
          } else {
            if (typeof v === 'object') {
              if (Array.isArray(v.value)) {
                objectPersistant[k] = [];
                _ref1 = v.value;
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  value = _ref1[_i];
                  console.log(value);
                }
              } else {
                objectPersistant[k] = {
                  $ref: v.type,
                  $id: v.id.value
                };
              }
            }
          }
        }
      }
    }
    return objectPersistant;
  };

  MongodbAdapter.prototype.remove = function(object) {
    return this;
  };

  MongodbAdapter.prototype.removeById = function(id) {
    return this;
  };

  MongodbAdapter.prototype.modify = function(collectionName, objectSource, newObject) {
    return this;
  };

  MongodbAdapter.prototype.query = function() {
    var deferred;
    deferred = Q.defer();
    MongodbAdapter.CONNECTION.collection(collectionName).find(criteria).toArray(function(err, result) {
      if (err) {
        return deferred.reject(new Error(err));
      } else {
        return deferred.resolve(result);
      }
    });
    return deferred.promise;
  };

  MongodbAdapter.prototype.modifyById = function(collectionName, id, newObject) {
    var deferred;
    deferred = Q.defer();
    MongodbAdapter.CONNECTION.collection(collectionName).update({
      id: new ObjectID(id)
    }, this.makeObjectPersistant(newObject), function(err, result) {}, err ? deferred.reject(new Error(err)) : result.length === 1 ? deferred.resolve(obj) : deferred.reject(new Error(err)));
    return deferred.promise;
  };

  return MongodbAdapter;

})();

module.exports = MongodbAdapter;
