
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Form, FormField, Tools, formFields, formValidators, formWidgets, forms, wait,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

forms = use('ks-forms');

formFields = forms.fields;

formValidators = forms.validators;

formWidgets = forms.widgets;

wait = use('wait.for');

FormField = use('@Konsserto/Component/Form/FormField');

Tools = use('@Konsserto/Component/Static/Tools');

Form = (function() {
  function Form(formName, predata, options, req, templating, entityManager) {
    var _ref, _ref1;
    this.formName = formName;
    this.predata = predata;
    this.req = req;
    this.templating = templating;
    this.entityManager = entityManager;
    this.formWidgets = __bind(this.formWidgets, this);
    this.formRest = __bind(this.formRest, this);
    this.formEnd = __bind(this.formEnd, this);
    this.formRow = __bind(this.formRow, this);
    this.formWidget = __bind(this.formWidget, this);
    this.formLabel = __bind(this.formLabel, this);
    this.formError = __bind(this.formError, this);
    this.formErrors = __bind(this.formErrors, this);
    this.formStart = __bind(this.formStart, this);
    this.get = __bind(this.get, this);
    this.getData = __bind(this.getData, this);
    this.isValid = __bind(this.isValid, this);
    this.handleRequest = __bind(this.handleRequest, this);
    this.handle = __bind(this.handle, this);
    this.getNativeFields = __bind(this.getNativeFields, this);
    this.getNativeForm = __bind(this.getNativeForm, this);
    this.getAction = __bind(this.getAction, this);
    this.getMethod = __bind(this.getMethod, this);
    this.getFields = __bind(this.getFields, this);
    this.compileForm = __bind(this.compileForm, this);
    this.getForm = __bind(this.getForm, this);
    this.add = __bind(this.add, this);
    this.fields = {};
    this.csrfRequired = false;
    this.method = (_ref = options['method']) != null ? _ref : 'POST';
    this.action = (_ref1 = options['action']) != null ? _ref1 : '';
    if ((this.req['csrfToken'] != null)) {
      this.addCsrfProtection();
    }
    if (this.predata.constructor.name !== 'Object') {
      this.predata = this.extractDataFromEntity(this.predata);
    }
  }

  Form.prototype.getPredata = function() {
    return this.predata;
  };

  Form.prototype.extractDataFromEntity = function(data) {
    return data;
  };

  Form.prototype.getName = function() {
    return this.formName;
  };

  Form.prototype.addCsrfProtection = function() {
    return this.add('_csrf', 'string', {
      required: this.isCsrfRequired(),
      value: this.req.csrfToken(),
      widget: formWidgets.hidden()
    });
  };

  Form.prototype.isCsrfRequired = function(required) {
    if (required != null) {
      this.csrfRequired = required;
    }
    return this.csrfRequired;
  };

  Form.prototype.add = function(name, type, options) {
    if (type == null) {
      type = 'string';
    }
    if (options == null) {
      options = {};
    }
    this.fields[name] = new FormField(name, this.formName, type, options, this.predata);
    return this;
  };

  Form.prototype.getForm = function() {
    this.compiledForm = forms.create(this.compileForm());
    return this;
  };

  Form.prototype.compileForm = function() {
    var compiled, field, name, options, _ref;
    compiled = {};
    _ref = this.getFields();
    for (name in _ref) {
      field = _ref[name];
      options = field.getOptions();
      compiled[field.getFullname()] = eval('formFields.' + field.getType())(options);
      this.fields[name].setCompiled(compiled[field.getFullname()]);
    }
    return compiled;
  };

  Form.prototype.getFields = function() {
    return this.fields;
  };

  Form.prototype.createView = function() {
    if (this.compiledForm === void 0 || this.compiledForm === null) {
      this.getForm();
    }
    return this;
  };

  Form.prototype.getMethod = function() {
    return this.method;
  };

  Form.prototype.getAction = function() {
    return this.action;
  };

  Form.prototype.setMethod = function(method) {
    this.method = method;
    return this;
  };

  Form.prototype.setAction = function(action) {
    this.action = action;
    return this;
  };

  Form.prototype.getNativeForm = function() {
    if (this.compiledForm === void 0) {
      throw new Error('You have to getForm first');
    }
    return this.compiledForm;
  };

  Form.prototype.getNativeFields = function(name) {
    if (name != null) {
      return this.getNativeForm().fields[name];
    }
    return this.getNativeForm().fields;
  };

  Form.prototype.handle = function(request, stdCallback) {
    return this.compiledForm.handle(request, {
      success: function(f) {
        return stdCallback(0, f);
      },
      error: function(f) {
        return stdCallback(0, f);
      },
      empty: function(f) {
        return stdCallback(0, f);
      }
    });
  };

  Form.prototype.handleRequest = function(request) {
    var formField, k, nameField, namespace, object, v, _ref, _ref1, _ref2, _results;
    object = this.getPredata();
    if (request.method.toUpperCase() === 'GET' && (request.query[this.formName] != null)) {
      _ref = this.getFields();
      for (k in _ref) {
        v = _ref[k];
        request.body[v.getFullname()] = (_ref1 = request.query[this.formName][k]) != null ? _ref1 : '';
      }
      request.body['_csrf'] = request.query['_csrf'];
    }
    this.compiledForm = wait["for"](this.handle, request);
    _ref2 = this.getFields();
    _results = [];
    for (nameField in _ref2) {
      formField = _ref2[nameField];
      this.fields[nameField].setCompiled(this.getNativeFields(formField.getFullname()));
      this.fields[nameField].handleSubmit();
      namespace = this.entityManager.getLogicalPathByNamespace(object.constructor._fromUsed);
      if ((namespace != null) && (object.constructor.model.fields[nameField] != null)) {
        _results.push(object[nameField] = formField.getData());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Form.prototype.isValid = function() {
    if (this.getNativeForm().isValid != null) {
      return this.getNativeForm().isValid();
    } else {
      return false;
    }
  };

  Form.prototype.getData = function() {
    var data, formField, k, _ref;
    data = {};
    _ref = this.getNativeFields();
    for (k in _ref) {
      formField = _ref[k];
      data[formField.shortname] = formField.data;
    }
    return data;
  };

  Form.prototype.get = function(name) {
    return this.fields[name];
  };

  Form.prototype.formStart = function(options, view) {
    var action, method, _ref, _ref1;
    if (options == null) {
      options = {};
    }
    if (view == null) {
      view = 'TwigBundle:Form:form-start.html.twig';
    }
    method = (_ref = options['method']) != null ? _ref : this.getMethod();
    action = (_ref1 = options['action']) != null ? _ref1 : this.getAction();
    return this.templating.render(view, {
      method: method,
      action: action
    });
  };

  Form.prototype.formErrors = function(errors, view) {
    var compiledField, name, _ref;
    if (errors == null) {
      errors = [];
    }
    if (view == null) {
      view = 'TwigBundle:Form:form-errors.html.twig';
    }
    _ref = this.getNativeFields();
    for (name in _ref) {
      compiledField = _ref[name];
      if (compiledField.errorHTML() != null) {
        errors.push(compiledField.errorHTML());
      }
    }
    return this.templating.render(view, {
      errors: errors
    });
  };

  Form.prototype.formError = function(name, view) {
    var compiledField, error, field;
    if (view == null) {
      view = 'TwigBundle:Form:form-error.html.twig';
    }
    field = this.fields[name];
    compiledField = field.getCompiled();
    error = compiledField.errorHTML() != null ? '' : compiledField.errorHTML();
    return this.templating.render(view, {
      error: error
    });
  };

  Form.prototype.formLabel = function(name, view) {
    var compiledField, field, label;
    if (view == null) {
      view = 'TwigBundle:Form:form-label.html.twig';
    }
    field = this.fields[name];
    compiledField = field.getCompiled();
    label = compiledField.labelHTML(name);
    return this.templating.render(view, {
      label: label
    });
  };

  Form.prototype.formWidget = function(name, view) {
    var compiledField, field, widget;
    if (view == null) {
      view = 'TwigBundle:Form:form-widget.html.twig';
    }
    field = this.fields[name];
    compiledField = field.getCompiled();
    widget = compiledField.widget.toHTML(name, compiledField);
    compiledField.rendered = true;
    return this.templating.render(view, {
      widget: widget
    });
  };

  Form.prototype.formRow = function(name, view) {
    var field;
    if (view == null) {
      view = 'TwigBundle:Form:form-row.html.twig';
    }
    field = this.fields[name];
    return this.templating.render(view, {
      form: this,
      field: field
    });
  };

  Form.prototype.formEnd = function(view) {
    if (view == null) {
      view = 'TwigBundle:Form:form-end.html.twig';
    }
    return this.templating.render(view);
  };

  Form.prototype.formRest = function() {
    var k, renderRest, v, _ref;
    renderRest = '';
    _ref = this.fields;
    for (k in _ref) {
      v = _ref[k];
      if (!v.getCompiled().rendered) {
        renderRest += this.formRow(k);
      }
    }
    return renderRest;
  };

  Form.prototype.formWidgets = function() {
    var k, renderRest, v, _ref;
    renderRest = '';
    _ref = this.fields;
    for (k in _ref) {
      v = _ref[k];
      renderRest += this.formRow(k);
    }
    return renderRest;
  };

  return Form;

})();

module.exports = Form;
