
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var FormField, formWidgets, forms,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

forms = use('ks-forms');

formWidgets = forms.widgets;

FormField = (function() {
  function FormField(name, formName, type, options, predata) {
    this.name = name;
    this.formName = formName;
    this.type = type;
    this.options = options;
    if (predata == null) {
      predata = {};
    }
    this.addDefault = __bind(this.addDefault, this);
    this.submit = false;
    this.csrf = false;
    if (predata[this.name] != null) {
      this.options['value'] = predata[this.name];
    }
    if (type === 'submit') {
      this.setSubmit();
    }
    if (this.name === '_csrf') {
      this.setCsrf();
    }
    this.setHTMLfields();
  }

  FormField.prototype.setSubmit = function() {
    this.submit = true;
    this.options['widget'] = formWidgets.submit(this.options);
    return this.options['value'] = this.name;
  };

  FormField.prototype.setCsrf = function() {
    this.csrf = true;
    return this.getFullname = function() {
      return this.name;
    };
  };

  FormField.prototype.handleSubmit = function() {
    var value;
    if (this.isSubmit()) {
      value = this.getCompiled()['value'];
      if (value !== '' && value !== void 0 && value !== null) {
        this.isClicked = (function(_this) {
          return function() {
            return true;
          };
        })(this);
      } else {
        this.isClicked = (function(_this) {
          return function() {
            return false;
          };
        })(this);
      }
      return this.getCompiled()['value'] = this.name;
    }
  };

  FormField.prototype.isSubmit = function() {
    return this.submit;
  };

  FormField.prototype.isCsrf = function() {
    return this.csrf;
  };

  FormField.prototype.getId = function() {
    return this.formName + '_' + this.name;
  };

  FormField.prototype.getFullname = function() {
    return this.formName + '[' + this.name + ']';
  };

  FormField.prototype.getShortname = function() {
    var m;
    m = this.name.match('\\[(.+)\\]');
    if ((m != null) && m.length >= 2) {
      return m[1];
    }
    return '';
  };

  FormField.prototype.setHTMLfields = function() {
    this.addDefault(this.options, 'id', this.getId());
    this.addDefault(this.options, 'fullname', this.getFullname());
    return this.addDefault(this.options, 'shortname', this.name);
  };

  FormField.prototype.addDefault = function(object, field, value) {
    return object[field] != null ? object[field] : object[field] = value;
  };

  FormField.prototype.getName = function() {
    return this.name;
  };

  FormField.prototype.getType = function() {
    return this.type;
  };

  FormField.prototype.getOptions = function() {
    return this.options;
  };

  FormField.prototype.setCompiled = function(compiled) {
    this.compiled = compiled;
    return this;
  };

  FormField.prototype.getCompiled = function() {
    return this.compiled;
  };

  FormField.prototype.isClicked = function() {
    if (!this.isSubmit()) {
      throw new Error('You can\'t call isClicked on a non submit field');
    }
  };

  FormField.prototype.getData = function() {
    return this.compiled.data;
  };

  return FormField;

})();

module.exports = FormField;
