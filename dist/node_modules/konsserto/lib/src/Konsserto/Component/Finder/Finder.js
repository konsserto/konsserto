
/*
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var DirectoryFinder, FileFinder, Finder, fs;

fs = use('fs');

DirectoryFinder = use('@Konsserto/Component/Finder/DirectoryFinder');

FileFinder = use('@Konsserto/Component/Finder/FileFinder');

Finder = (function() {
  function Finder() {
    this.isRecursive = false;
    return this;
  }

  Finder.prototype.files = function() {
    this.fileFinder = new FileFinder();
    return this;
  };

  Finder.prototype.recursive = function() {
    this.isRecursive = true;
    return this;
  };

  Finder.prototype.notRecursive = function() {
    this.isRecursive = false;
    return this;
  };

  Finder.prototype.directories = function() {
    this.directoryFinder = new DirectoryFinder();
    return this;
  };

  Finder.prototype["in"] = function(rootDir, recursive) {
    if (recursive == null) {
      recursive = this.isRecursive;
    }
    if (fs.existsSync(rootDir)) {
      if (this.fileFinder) {
        if (!recursive) {
          this.fileFinder.getFiles(rootDir);
        } else {
          this.fileFinder.getRecursive(rootDir);
        }
      } else {
        if (this.directoryFinder) {
          this.directoryFinder.getDirs(rootDir, recursive);
        }
      }
    }
    return this;
  };

  Finder.prototype.display = function() {
    if (this.fileFinder) {
      return this.fileFinder.getResult();
    } else {
      if (this.directoryFinder.getResult().length === 0) {
        this.directoryFinder.getDirs('.', true);
      }
      return this.directoryFinder.getResult();
    }
  };

  Finder.prototype.name = function(name) {
    if (this.fileFinder) {
      this.fileFinder.name(name);
    } else {
      this.directoryFinder.name(name);
    }
    return this;
  };

  Finder.prototype.notName = function(name) {
    if (this.fileFinder) {
      this.fileFinder.notName(name);
    } else {
      this.directoryFinder.notName(name);
    }
    return this;
  };

  Finder.prototype.size = function(size) {
    if (this.fileFinder) {
      this.fileFinder.size(size);
    }
    return this;
  };

  Finder.prototype.sortBy = function(orderby, orderway) {
    if (this.fileFinder) {
      this.fileFinder.sortBy(orderby, orderway);
    } else {
      this.directoryFinder.sortBy(orderby, orderway);
    }
    return this;
  };

  Finder.prototype.contains = function(content) {
    if (this.fileFinder) {
      this.fileFinder.contains(content);
    }
    return this;
  };

  Finder.prototype.ext = function(extension) {
    if (this.fileFinder) {
      this.fileFinder.ext(extension);
    }
    return this;
  };

  return Finder;

})();

module.exports = Finder;
