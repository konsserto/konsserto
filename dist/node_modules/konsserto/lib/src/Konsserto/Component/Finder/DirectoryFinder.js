
/*
 * This file is part of the Konsserto package.
 *
 * (c) Marvin Frachet <marvin@konsserto.com>
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Directory, DirectoryFinder, fs;

fs = use('fs');

Directory = use('@Konsserto/Component/Finder/Directory');

DirectoryFinder = (function() {
  function DirectoryFinder() {
    this.directories = [];
  }

  DirectoryFinder.prototype.getDirs = function(rootDir, recursive) {
    var file, filePath, files, stat, _i, _len, _results;
    files = fs.readdirSync(rootDir);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (file[0] !== '.') {
        filePath = "" + rootDir + "/" + file;
        stat = fs.statSync(filePath);
        if (stat.isDirectory()) {
          this.directories.push(new Directory(file, rootDir));
          if (recursive) {
            _results.push(this.getDirs(rootDir + "/" + file, recursive));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  DirectoryFinder.prototype.name = function(name) {
    var file, new_directories, _i, _len, _ref;
    new_directories = [];
    _ref = this.directories;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      if (file.getName().match(name)) {
        new_directories.push(file);
      }
    }
    return this.directories = new_directories;
  };

  DirectoryFinder.prototype.notName = function(name) {
    var file, new_directories, _i, _len, _ref;
    new_directories = [];
    _ref = this.directories;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      if (!file.getName().match(name)) {
        new_directories.push(file);
      }
    }
    return this.directories = new_directories;
  };

  DirectoryFinder.prototype.sortBy = function(orderby, orderway) {
    if (!orderway) {
      return this.directories.sort(function(a, b) {
        if (a[orderby] >= b[orderby]) {
          return 1;
        } else {
          return -1;
        }
      });
    } else {
      return this.directories.sort(function(a, b) {
        if (a[orderby] >= b[orderby]) {
          return -1;
        } else {
          return 1;
        }
      });
    }
  };

  DirectoryFinder.prototype.getResult = function() {
    return this.directories;
  };

  return DirectoryFinder;

})();

module.exports = DirectoryFinder;
