
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Bundle, Command, Tools, cc, filesystem, path_helper;

cc = use('cli-color');

filesystem = use('fs');

path_helper = use('path');

Command = use('@Konsserto/Component/Console/Command');

Tools = use('@Konsserto/Component/Static/Tools');

Bundle = (function() {
  function Bundle() {}

  Bundle.CONTROLLER_DIR = 'Controller';

  Bundle.RESOURCES_DIR = 'Resources';

  Bundle.ENTITY_DIR = 'Entity';

  Bundle.COMMAND_DIR = 'Command';

  Bundle.MIDDLEWARE_DIR = 'Middleware';

  Bundle.CONFIG_DIR = Bundle.RESOURCES_DIR + '/' + 'config';

  Bundle.PUBLIC_DIR = Bundle.RESOURCES_DIR + '/' + 'public';

  Bundle.TRANSLATIONS_DIR = Bundle.RESOURCES_DIR + '/' + 'translations';

  Bundle.prototype.isVendorBundle = function() {
    return this._fromVendor;
  };

  Bundle.prototype.getName = function() {
    return path_helper.basename(this._fromUsed);
  };

  Bundle.prototype.getDir = function() {
    return path_helper.dirname(this._fromUsed).replace('@', '');
  };

  Bundle.prototype.getDirSrc = function() {
    if (this.isVendorBundle()) {
      return path_helper.normalize(path_helper.dirname(this._fromVendorPath));
    }
    return path_helper.normalize(sourceDir + '/' + this.getDir());
  };

  Bundle.prototype.getNamespace = function() {
    return '@' + this.getDir();
  };

  Bundle.prototype.getControllerNamespace = function() {
    return this.getNamespace() + '/' + Bundle.CONTROLLER_DIR;
  };

  Bundle.prototype.getMiddlewareNamespace = function() {
    return this.getNamespace() + '/' + Bundle.MIDDLEWARE_DIR;
  };

  Bundle.prototype.getEntityNamespace = function() {
    return this.getNamespace() + '/' + Bundle.ENTITY_DIR;
  };

  Bundle.prototype.getRepositoryNamespace = function() {
    return this.getNamespace() + '/' + Bundle.REPOSITORY_DIR;
  };

  Bundle.prototype.getConfigNamespace = function() {
    return this.getNamespace() + '/' + Bundle.CONFIG_DIR;
  };

  Bundle.prototype.getTranslationsNamespace = function() {
    return this.getNamespace() + '/' + Bundle.TRANSLATIONS_DIR;
  };

  Bundle.prototype.getPath = function(root) {
    var projectDir, srcDir;
    if (root == null) {
      root = process.cwd() + '/';
    }
    projectDir = root;
    if (this.isVendorBundle()) {
      return projectDir + this.getDirSrc();
    }
    srcDir = projectDir + sourceDir + '/';
    return path_helper.normalize(this.getNamespace().replace('@', srcDir));
  };

  Bundle.prototype.getEntityPath = function(root) {
    if (root == null) {
      root = null;
    }
    return path_helper.normalize(this.getPath(root) + '/' + Bundle.ENTITY_DIR);
  };

  Bundle.prototype.getRepositoryPath = function(root) {
    if (root == null) {
      root = null;
    }
    return path_helper.normalize(this.getPath(root) + '/' + Bundle.REPOSITORY_DIR);
  };

  Bundle.prototype.getResourcesPath = function(root) {
    if (root == null) {
      root = null;
    }
    return path_helper.normalize(this.getPath(root) + '/' + Bundle.RESOURCES_DIR);
  };

  Bundle.prototype.getConfigPath = function(root) {
    if (root == null) {
      root = null;
    }
    return path_helper.normalize(this.getPath(root) + '/' + Bundle.CONFIG_DIR);
  };

  Bundle.prototype.getTranslationsPath = function(root) {
    if (root == null) {
      root = null;
    }
    return path_helper.normalize(this.getPath(root) + '/' + Bundle.TRANSLATIONS_DIR);
  };

  Bundle.prototype.getPublicPath = function(root) {
    if (root == null) {
      root = null;
    }
    return path_helper.normalize(this.getPath(root) + '/' + Bundle.PUBLIC_DIR);
  };

  Bundle.prototype.getCommandPath = function(root) {
    if (root == null) {
      root = null;
    }
    return path_helper.normalize(this.getPath(root) + '/' + Bundle.COMMAND_DIR);
  };

  Bundle.prototype.getMiddlewarePath = function(root) {
    if (root == null) {
      root = null;
    }
    return path_helper.normalize(this.getPath(root) + '/' + Bundle.MIDDLEWARE_DIR);
  };

  Bundle.prototype.fetchController = function(name, get) {
    var ctl, e;
    if (get == null) {
      get = false;
    }
    ctl = this.getControllerNamespace() + '/' + name + Bundle.CONTROLLER_DIR;
    try {
      if (get) {
        return ctl;
      }
      return use(ctl);
    } catch (_error) {
      e = _error;
      throw new Error('Error while fetching controller ' + ctl + ' maybe a route reference a not existing controller \n' + e.message);
    }
  };

  Bundle.prototype.fetchMiddleware = function(name, get) {
    var ctl;
    if (get == null) {
      get = false;
    }
    ctl = this.getMiddlewareNamespace() + '/' + name + Bundle.MIDDLEWARE_DIR;
    if (get) {
      return ctl;
    }
    return use(ctl);
  };

  Bundle.prototype.fetchEntity = function(name, fullnameOnly) {
    var ctl;
    if (fullnameOnly == null) {
      fullnameOnly = false;
    }
    ctl = this.getEntityNamespace() + '/' + name;
    if (fullnameOnly) {
      return ctl;
    }
    return use(ctl);
  };

  Bundle.prototype.boot = function() {
    return console.log('[Bundle] Boot from : ' + cc.cyan(this.getName()));
  };

  Bundle.prototype.shutdown = function() {
    return console.log('[Bundle] Shutdown : ' + cc.red(this.getName()));
  };

  Bundle.prototype.setContainer = function(container) {
    return this.container = container;
  };

  Bundle.prototype.registerCommands = function(application) {
    var commandSpec, commandsPath, file, _i, _len, _ref, _results;
    commandsPath = this.getCommandPath();
    if (!filesystem.existsSync(commandsPath)) {
      return;
    }
    _ref = filesystem.readdirSync(commandsPath);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      if (Tools.endsWith(file, 'Command.js')) {
        commandSpec = use(this.getNamespace() + '/' + Bundle.COMMAND_DIR + '/' + file);
        if (commandSpec.__super__.constructor.name === 'Command') {
          _results.push(application.add(new commandSpec()));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Bundle;

})();

module.exports = Bundle;
