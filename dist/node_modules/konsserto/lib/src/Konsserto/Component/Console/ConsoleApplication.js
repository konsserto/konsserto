
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var ArgvInput, ArrayInput, Command, ConsoleApplication, HelpCommand, InputArgument, InputDefinition, InputOption, ListCommand, cc, wait;

cc = use('cli-color');

wait = use('wait.for');

ArgvInput = use('@Konsserto/Component/Console/Input/ArgvInput');

ArrayInput = use('@Konsserto/Component/Console/Input/ArrayInput');

Command = use('@Konsserto/Component/Console/Command');

HelpCommand = use('@Konsserto/Component/Console/Command/HelpCommand');

InputArgument = use('@Konsserto/Component/Console/Input/InputArgument');

InputDefinition = use('@Konsserto/Component/Console/Input/InputDefinition');

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

ListCommand = use('@Konsserto/Component/Console/Command/ListCommand');

ConsoleApplication = (function() {
  function ConsoleApplication(name, version) {
    var command, _i, _len, _ref;
    this.name = name;
    this.version = version;
    this.verbose = 0;
    this.commands = {};
    this.running = '';
    this.needHelp = false;
    this.definition = this.getDefaultInputDefinition();
    _ref = this.getDefaultCommands();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      command = _ref[_i];
      this.add(command);
    }
  }

  ConsoleApplication.prototype.getDefinition = function() {
    return this.definition;
  };

  ConsoleApplication.prototype.getDefaultInputDefinition = function() {
    return new InputDefinition([new InputArgument('command', InputArgument.REQUIRED, 'The command to execute'), new InputOption('--help', '-h', InputOption.VALUE_NONE, 'Display this help message.'), new InputOption('--verbose', '-v', InputOption.VALUE_NONE, 'Increase the verbosity of messages'), new InputOption('--version', '-V', InputOption.VALUE_NONE, 'Display this application version.'), new InputOption('--no-interaction', '-n', InputOption.VALUE_NONE, 'Do not ask any interactive question.')]);
  };

  ConsoleApplication.prototype.getDefaultCommands = function() {
    return [new ListCommand(), new HelpCommand()];
  };

  ConsoleApplication.prototype.getCommands = function() {
    return this.commands;
  };

  ConsoleApplication.prototype.add = function(command) {
    command.setApplication(this);
    if (!command.isEnabled()) {
      command.setApplication(null);
      return;
    }
    if (command.getDefinition() === void 0) {
      throw new Error('Command class ' + command.constructor.name + ' is not correctly initialized. You probably forgot to call the parent constructor.');
    }
    this.commands[command.getName()] = command;
    return command;
  };

  ConsoleApplication.prototype.addCommands = function(commands) {
    var command, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = commands.length; _i < _len; _i++) {
      command = commands[_i];
      _results.push(this.add(command));
    }
    return _results;
  };

  ConsoleApplication.prototype.has = function(name) {
    return this.commands[name];
  };

  ConsoleApplication.prototype.setVerbose = function(level) {
    return this.verbose = level;
  };

  ConsoleApplication.prototype.getCommandName = function(input) {
    return input.getFirstArgument();
  };

  ConsoleApplication.prototype.getName = function() {
    return this.name;
  };

  ConsoleApplication.prototype.getVersion = function() {
    return this.version;
  };

  ConsoleApplication.prototype.setName = function(name) {
    this.name = name;
    return this;
  };

  ConsoleApplication.prototype.setVersion = function(version) {
    this.version = version;
    return this;
  };

  ConsoleApplication.prototype.getLongVersion = function() {
    var versionMessage;
    versionMessage = 'Konsserto';
    if (this.getName() !== void 0) {
      versionMessage = this.getName();
    }
    if (this.getVersion() !== void 0) {
      versionMessage += ' version ' + this.getVersion();
    }
    return versionMessage;
  };

  ConsoleApplication.prototype.run = function(input) {
    var e, ecode;
    if (input === void 0) {
      input = new ArgvInput();
    }
    this.configureIO(input);
    ecode = -1;
    try {
      ecode = this.doRun(input);
    } catch (_error) {
      e = _error;
      console.info('\n  ' + cc.white.bgRed(e));
      console.info('\n  ' + this.running.getSynopsis());
      ecode = 255;
      if (this.verbose > 0) {
        throw e;
      } else {
        process.exit(ecode);
      }
    }
    return ecode;
  };

  ConsoleApplication.prototype.configureIO = function(input) {
    if (input.hasParameterOption(['--no-interaction', '-n'])) {
      input.setInteractive(false);
    }
    if (input.hasParameterOption(['--verbose', '-v'])) {
      return this.setVerbose(1);
    }
  };

  ConsoleApplication.prototype.doRun = function(input) {
    var command, exitCode, name;
    if (input.hasParameterOption(['--version', '-V'])) {
      console.info(this.getLongVersion());
      return 0;
    }
    name = this.getCommandName(input);
    if (input.hasParameterOption(['--help', '-h'])) {
      if (name === void 0) {
        name = 'help';
        input = new ArrayInput({
          command: 'help'
        });
      } else {
        this.needHelp = true;
      }
    }
    if (name === void 0) {
      name = 'list';
      input = new ArrayInput({
        command: name
      });
    }
    command = this.find(name);
    this.running = command;
    exitCode = this.doRunCommand(command, input);
    this.running = null;
    return exitCode;
  };

  ConsoleApplication.prototype.doRunCommand = function(command, input) {
    return command.run(input);
  };

  ConsoleApplication.prototype.find = function(name) {
    return this.get(name);
  };

  ConsoleApplication.prototype.get = function(name) {
    var command, helpCommand;
    if (this.commands[name] === void 0) {
      throw new Error('The command \'' + name + '\' does not exist.');
    }
    command = this.commands[name];
    if (this.needHelp) {
      this.needHelp = false;
      helpCommand = this.get('help');
      helpCommand.setCommand(command);
      return helpCommand;
    }
    return command;
  };

  return ConsoleApplication;

})();

module.exports = ConsoleApplication;
