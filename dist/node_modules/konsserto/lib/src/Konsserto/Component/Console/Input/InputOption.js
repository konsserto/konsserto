
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var InputOption;

InputOption = (function() {
  InputOption.VALUE_NONE = 1;

  InputOption.VALUE_REQUIRED = 2;

  InputOption.VALUE_OPTIONAL = 4;

  InputOption.VALUE_IS_ARRAY = 8;

  function InputOption(name, shortcut, mode, description, cdefault) {
    var short, _i, _len;
    if (name.indexOf('--') === 0) {
      name = name.substr(2);
    }
    if (name === void 0) {
      throw new Error('An option name cannot be empty.');
    }
    if (shortcut !== void 0) {
      if (shortcut.constructor.name === 'Array') {
        for (_i = 0, _len = shortcut.length; _i < _len; _i++) {
          short = shortcut[_i];
          short = short.replace(/-/g, '');
        }
        shortcut = shortcut.join('|');
      } else {
        shortcut = shortcut.replace(/-/g, '');
      }
    }
    if (mode === void 0) {
      mode = InputOption.VALUE_NONE;
    } else if (!parseInt(mode) || mode > 15 || mode < 1) {
      throw new Error('Option mode ' + mode + ' is not valid.');
    }
    this.name = name;
    this.shortcut = shortcut;
    this.mode = mode;
    this.description = description;
    if (this.isArray() && !this.acceptValue()) {
      throw new Error('Impossible to have an option mode VALUE_IS_ARRAY if the option does not accept a value.');
    }
    this.setDefault(cdefault);
  }

  InputOption.prototype.getShortcut = function() {
    return this.shortcut;
  };

  InputOption.prototype.getName = function() {
    return this.name;
  };

  InputOption.prototype.acceptValue = function() {
    return this.isValueRequired() || this.isValueOptional();
  };

  InputOption.prototype.isValueRequired = function() {
    return InputOption.VALUE_REQUIRED === (InputOption.VALUE_REQUIRED & this.mode);
  };

  InputOption.prototype.isValueOptional = function() {
    return InputOption.VALUE_OPTIONAL === (InputOption.VALUE_OPTIONAL & this.mode);
  };

  InputOption.prototype.isArray = function() {
    return InputOption.VALUE_IS_ARRAY === (InputOption.VALUE_IS_ARRAY & this.mode);
  };

  InputOption.prototype.setDefault = function(cdefault) {
    if (InputOption.VALUE_NONE === (InputOption.VALUE_NONE & this.mode) && cdefault !== void 0) {
      throw new Error('Cannot set a default value when using InputOption.VALUE_NONE mode.');
    }
    if (this.isArray()) {
      if (cdefault === void 0) {
        cdefault = [];
      } else if (cdefault.constructor.name !== 'Array') {
        throw new Error('A default value for an array option must be an array.');
      }
    }
    return this["default"] = this.acceptValue() ? cdefault : false;
  };

  InputOption.prototype.getDefault = function() {
    return this["default"];
  };

  InputOption.prototype.getDescription = function() {
    return this.description;
  };

  InputOption.prototype.equals = function(option) {
    return option.getName() === this.getName() && option.getShortcut() === this.getShortcut() && option.getDefault() === this.getDefault() && option.isArray() === this.isArray() && option.isValueRequired() === this.isValueRequired() && option.isValueOptional() === this.isValueOptional();
  };

  return InputOption;

})();

module.exports = InputOption;
