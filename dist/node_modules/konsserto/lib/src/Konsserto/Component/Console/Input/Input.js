
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Input, InputDefinition;

InputDefinition = use('@Konsserto/Component/Console/Input/InputDefinition');

Input = (function() {
  function Input(definition, command) {
    this["arguments"] = {};
    this.options = {};
    this.interactive = true;
    if (definition === void 0) {
      definition = new InputDefinition();
    } else if (definition.constructor.name === 'Array') {
      definition = new InputDefinition(definition);
      this.bind(definition, command);
      this.validate();
    } else {
      this.bind(definition, command);
      this.validate();
    }
  }

  Input.prototype.bind = function(definition) {
    this["arguments"] = {};
    this.options = {};
    this.definition = definition;
    return this.parse();
  };

  Input.prototype.parse = function() {};

  Input.prototype.validate = function() {
    if (Object.keys(this["arguments"]).length < this.definition.getArgumentRequiredCount()) {
      throw new Error('Not enough arguments.');
    }
  };

  Input.prototype.isInteractive = function() {
    return this.interactive;
  };

  Input.prototype.setInteractive = function(interactive) {
    return this.interactive = interactive;
  };

  Input.prototype.getArguments = function() {
    return this.definition.getArgumentDefaults().concat(this["arguments"]);
  };

  Input.prototype.getArgument = function(name) {
    if (!this.definition.hasArgument(name)) {
      throw new Error('The ' + name + ' argument does not exist.');
    }
    if (this["arguments"][name] !== void 0) {
      return this["arguments"][name];
    } else {
      return this.definition.getArgument(name).getDefault();
    }
  };

  Input.prototype.getSynopsisBuffer = function() {
    return this.definition;
  };

  Input.prototype.setArgument = function(name, value) {
    if (!this.definition.hasArgument(name)) {
      throw new Error('The ' + name + ' argument does not exist.');
    }
    return this["arguments"][name] = value;
  };

  Input.prototype.hasArgument = function(name) {
    return this.definition.hasArgument(name);
  };

  Input.prototype.getOptions = function() {
    return this.definition.getOptionDefaults().concat(this.options);
  };

  Input.prototype.getOption = function(name) {
    if (!this.definition.hasOption(name)) {
      throw new Error('The ' + name + ' option does not exist.');
    }
    if (this.options[name] !== void 0) {
      return this.options[name];
    } else {
      return this.definition.getOption(name).getDefault();
    }
  };

  Input.prototype.setOption = function(name, value) {
    if (!this.definition.hasOption(name)) {
      throw new Error('The ' + name + ' option does not exist.');
    }
    return this.options[name] = value;
  };

  Input.prototype.hasOption = function(name) {
    return this.definition.hasOption(name);
  };

  Input.prototype.escapeToken = function(token) {
    if (token.match('^[w-]+')) {
      return token;
    }
    return this.escapeshellarg(token);
  };

  Input.prototype.escapeshellarg = function(str) {
    var out;
    out = '';
    out = str.replace(/[^\\]'/g, function(m, i, s) {
      return m.slice(0, 1) + '\\\'';
    });
    return out;
  };

  return Input;

})();

module.exports = Input;
