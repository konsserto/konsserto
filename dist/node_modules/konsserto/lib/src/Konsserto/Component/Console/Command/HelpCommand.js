
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Command, HelpCommand, InputArgument, InputOption,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Command = use('@Konsserto/Component/Console/Command');

InputArgument = use('@Konsserto/Component/Console/Input/InputArgument');

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

HelpCommand = (function(_super) {
  __extends(HelpCommand, _super);

  function HelpCommand() {
    return HelpCommand.__super__.constructor.apply(this, arguments);
  }

  HelpCommand.prototype.create = function() {
    this.setName('help');
    this.setDescription('Displays help for a command');
    this.setDefinition([new InputArgument('command_name', InputArgument.OPTIONAL, 'The command name', 'help')]);
    return this.setHelp('  The %command.name% command displays help for a given command:\n  %command.full_name% list\n\n  To display the list of available commands, please use the list command.');
  };

  HelpCommand.prototype.setCommand = function(command) {
    this.command = command;
    return this;
  };

  HelpCommand.prototype.execute = function(input) {
    if (this.command === void 0) {
      this.command = this.getApplication().find(input.getArgument('command_name'));
    }
    this.nl();
    this.write(this.command.getProcessedHelp());
    return this.command = void 0;
  };

  return HelpCommand;

})(Command);

module.exports = HelpCommand;
