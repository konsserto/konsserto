
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Command, InputArgument, InputDefinition, InputOption, cc, path, readlineSync,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

cc = use('cli-color');

path = use('path');

readlineSync = use('readline-sync');

InputArgument = use('@Konsserto/Component/Console/Input/InputArgument');

InputDefinition = use('@Konsserto/Component/Console/Input/InputDefinition');

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

Command = (function() {
  function Command(name) {
    this.askConfirmation = __bind(this.askConfirmation, this);
    this.askHiddenAndValidate = __bind(this.askHiddenAndValidate, this);
    this.askAndValidate = __bind(this.askAndValidate, this);
    this.askHidden = __bind(this.askHidden, this);
    this.askCombo = __bind(this.askCombo, this);
    this.ask = __bind(this.ask, this);
    this.synopsis = void 0;
    this.application = void 0;
    this.aliases = [];
    this.description = 'No description';
    this.definition = void 0;
    this.help = 'No help';
    this.applicationDefinitionMerged = false;
    this.applicationDefinitionMergedWithArgs = false;
    this.ignoreValidationErrors = false;
    this.definition = new InputDefinition();
    if (name != null) {
      this.setName(name);
    }
    this.create();
    if (!this.name) {
      throw new Error('The command name cannot be empty');
    }
  }

  Command.prototype.execute = function(input) {
    throw new Error('You must override the execute() method in the concrete command class.');
  };

  Command.prototype.setContainer = function(container) {
    this.container = container;
    return this;
  };

  Command.prototype.getContainer = function() {
    return this.container;
  };

  Command.prototype.setApplication = function(application) {
    this.application = application;
    return this;
  };

  Command.prototype.getApplication = function() {
    return this.application;
  };

  Command.prototype.setName = function(name) {
    this.validateName(name);
    this.name = name;
    return this;
  };

  Command.prototype.setDescription = function(description) {
    this.description = description;
    return this;
  };

  Command.prototype.setHelp = function(help) {
    this.help = help;
    return this;
  };

  Command.prototype.getName = function() {
    return this.name;
  };

  Command.prototype.getHelp = function() {
    return this.help;
  };

  Command.prototype.getDefinition = function() {
    return this.definition;
  };

  Command.prototype.getDescription = function() {
    return this.description;
  };

  Command.prototype.getAliases = function() {
    return this.aliases;
  };

  Command.prototype.ignoreValidationErrors = function() {
    return this.ignoreValidationErrors = true;
  };

  Command.prototype.isEnabled = function() {
    return true;
  };

  Command.prototype.getArrayChars = function() {
    if (this.chars != null) {
      return this.chars;
    }
    this.chars = {
      'top': '═',
      'top-mid': '╤',
      'top-left': '╔',
      'top-right': '╗',
      'bottom': '═',
      'bottom-mid': '╧',
      'bottom-left': '╚',
      'bottom-right': '╝',
      'left': '║',
      'left-mid': '╟',
      'mid': '─',
      'mid-mid': '┼',
      'right': '║',
      'right-mid': '╢',
      'middle': '│'
    };
    return this.chars;
  };

  Command.prototype.setArrayChars = function(chars) {
    return this.chars = chars;
  };

  Command.prototype.getProcessedHelp = function() {
    var executeCommand, name;
    name = this.name;
    executeCommand = process.argv[0] + ' ' + path.basename(process.argv[1]);
    return this.getHelp().replace(/%command.name%/g, name).replace(/%command.full_name%/g, executeCommand + ' ' + name);
  };

  Command.prototype.setSynopsis = function(synopsis) {
    if (this.synopsis === void 0) {
      this.synopsis = this.name + ' ' + synopsis;
    }
    return this;
  };

  Command.prototype.run = function(input) {
    var e;
    this.getSynopsis();
    this.mergeApplicationDefinition();
    try {
      input.bind(this.definition);
    } catch (_error) {
      e = _error;
      if (!this.ignoreValidationErrors) {
        throw e;
      }
    }
    if (input.isInteractive() && this.interact) {
      this.interact(input);
    }
    input.validate();
    return this.execute(input);
  };

  Command.prototype.addOption = function(name, shortcut, mode, description, def) {
    this.definition.addOption(new InputOption(name, shortcut, mode, description, def));
    return this;
  };

  Command.prototype.addArgument = function(name, mode, description, def) {
    this.definition.addArgument(new InputArgument(name, mode, descriptiondef));
    return this;
  };

  Command.prototype.validateName = function(name) {
    if (name === void 0 || !name.match('^[^\:]+(\:[^\:]+)*$')) {
      throw new Error('Command name \'' + name + '\' is invalid.');
    }
  };

  Command.prototype.getSynopsis = function() {
    if (this.synopsis === void 0) {
      this.synopsis = this.name;
      if (this.definition != null) {
        this.synopsis += ' ' + this.definition.getSynopsis();
      } else {
        this.synopsis += ' [no arguments|no options]';
      }
    }
    return this.synopsis;
  };

  Command.prototype.setDefinition = function(definition) {
    if (definition === void 0) {
      this.definition.setDefinition(definition);
    } else if (definition.constructor.name === 'InputDefinition') {
      this.definition = definition;
    } else {
      this.definition.setDefinition(definition);
    }
    return this.applicationDefinitionMerged = false;
  };

  Command.prototype.mergeApplicationDefinition = function(mergeArgs) {
    var currentArguments;
    if (mergeArgs === void 0) {
      mergeArgs = true;
    }
    if (this.application === void 0 || (this.applicationDefinitionMerged === true && (this.applicationDefinitionMergedWithArgs || !mergeArgs))) {
      return;
    }
    if (mergeArgs) {
      currentArguments = this.definition.getArguments();
      this.definition.setArguments(this.application.getDefinition().getArguments());
      this.definition.addArguments(currentArguments);
    }
    this.definition.addOptions(this.application.getDefinition().getOptions());
    this.applicationDefinitionMerged = true;
    if (mergeArgs) {
      return this.applicationDefinitionMergedWithArgs = true;
    }
  };

  Command.prototype.ask = function(question, def, hidden) {
    var input;
    if (def == null) {
      def = null;
    }
    if (hidden == null) {
      hidden = false;
    }
    input = readlineSync.question(question, {
      noEchoBack: hidden
    });
    if (def != null) {
      if (input === '') {
        return def;
      }
    }
    return input;
  };

  Command.prototype.askCombo = function(question, def, choices, caseSensitive) {
    var input;
    if (caseSensitive == null) {
      caseSensitive = false;
    }
    input = this.ask(question, def);
    if (!caseSensitive) {
      input = input.toLowerCase();
    }
    while (choices.indexOf(input) < 0) {
      input = this.ask(question, def);
      if (!caseSensitive) {
        input = input.toLowerCase();
      }
    }
    return input;
  };

  Command.prototype.askHidden = function(question, def) {
    return this.askAndValidate();
  };

  Command.prototype.askAndValidate = function(question, def, callback, hidden) {
    var input;
    if (hidden == null) {
      hidden = false;
    }
    input = this.ask(question, def, hidden);
    if (input === '' && (def != null)) {
      input = def;
    }
    if (callback != null) {
      return callback(input);
    } else {
      return input;
    }
  };

  Command.prototype.askHiddenAndValidate = function(question, def, callback) {
    return this.askAndValidate(question, def, callback, true);
  };

  Command.prototype.askConfirmation = function(question, def, caseSensitive) {
    if (caseSensitive == null) {
      caseSensitive = false;
    }
    return this.askCombo(question, def, ['y', 'n', 'yes', 'no'], caseSensitive);
  };

  Command.prototype.write = function(data) {
    return console.info(data);
  };

  Command.prototype.nl = function() {
    return console.info('');
  };

  return Command;

})();

module.exports = Command;
