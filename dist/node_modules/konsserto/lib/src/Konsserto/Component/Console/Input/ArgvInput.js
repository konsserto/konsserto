
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var ArgvInput, Input, Tools,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Input = use('@Konsserto/Component/Console/Input/Input');

Tools = use('@Konsserto/Component/Static/Tools');

ArgvInput = (function(_super) {
  __extends(ArgvInput, _super);

  function ArgvInput(argv, definition, command, standalone) {
    this.standalone = standalone != null ? standalone : false;
    this.tokens = null;
    this.parsed = null;
    if (argv == null) {
      argv = process.argv.slice(1);
    }
    argv.shift();
    this.tokens = argv;
    ArgvInput.__super__.constructor.call(this, definition, command);
  }

  ArgvInput.prototype.setTokens = function(tokens) {
    return this.tokens = tokens;
  };

  ArgvInput.prototype.parse = function() {
    var parseOptions, token, _results;
    parseOptions = true;
    this.parsed = this.tokens.slice(0);
    _results = [];
    while (void 0 !== (token = this.parsed.shift())) {
      if (parseOptions && token === '') {
        _results.push(this.parseArgument(token));
      } else if (parseOptions && token === '--') {
        _results.push(parseOptions = false);
      } else if (parseOptions && token.indexOf('--') === 0) {
        _results.push(this.parseLongOption(token));
      } else if (parseOptions && '-' === token[0] && '-' !== token) {
        _results.push(this.parseShortOption(token));
      } else {
        _results.push(this.parseArgument(token));
      }
    }
    return _results;
  };

  ArgvInput.prototype.parseShortOption = function(token) {
    var name;
    name = token.substr(1);
    if (name.length > 1) {
      if (this.definition.hasShortcut(name[0]) && this.definition.getOptionForShortcut(name[0]).acceptValue()) {
        return this.addShortOption(name[0], name.substr(1));
      } else {
        return this.parseShortOptionSet(name);
      }
    } else {
      return this.addShortOption(name, void 0);
    }
  };

  ArgvInput.prototype.parseShortOptionSet = function(name) {
    var i, len, option, _i, _ref, _results;
    len = name.length;
    _results = [];
    for (i = _i = 0; 0 <= len ? _i <= len : _i >= len; i = 0 <= len ? ++_i : --_i) {
      if (!this.definition.hasShortcut(name[i])) {
        throw new Error('The -' + name[i] + ' option does not exist.');
      }
      option = this.definition.getOptionForShortcut(name[i]);
      if (option.acceptValue()) {
        this.addLongOption(option.getName(), (_ref = i === len - 1) != null ? _ref : {
          "null": name.substr(i + 1)
        });
        break;
      } else {
        _results.push(this.addLongOption(option.getName(), void 0));
      }
    }
    return _results;
  };

  ArgvInput.prototype.parseLongOption = function(token) {
    var name, pos;
    name = token.substr(2);
    pos = name.indexOf('=');
    if (pos >= 0) {
      return this.addLongOption(name.substr(0, pos), name.substr(pos + 1));
    } else {
      return this.addLongOption(name, void 0);
    }
  };

  ArgvInput.prototype.parseArgument = function(token) {
    var arg, c;
    c = Object.keys(this["arguments"]).length;
    if (this.definition.hasArgument(c)) {
      arg = this.definition.getArgument(c);
      return this["arguments"][arg.getName()] = arg.isArray() ? [token] : token;
    } else if (this.definition.hasArgument(c - 1) && this.definition.getArgument(c - 1).isArray()) {
      arg = this.definition.getArgument(c - 1);
      if (this["arguments"][arg.getName()] === void 0) {
        this["arguments"][arg.getName()] = [];
      }
      return this["arguments"][arg.getName()].push(token);
    } else {
      if (!this.standalone) {
        throw new Error('Too many arguments.');
      }
    }
  };

  ArgvInput.prototype.addShortOption = function(shortcut, value) {
    if (!this.definition.hasShortcut(shortcut)) {
      throw new Error('The -' + shortcut + ' option does not exist.');
    }
    return this.addLongOption(this.definition.getOptionForShortcut(shortcut).getName(), value);
  };

  ArgvInput.prototype.addLongOption = function(name, value) {
    var next, option;
    if (!this.definition.hasOption(name)) {
      throw new Error('The --' + name + ' option does not exist.');
    }
    option = this.definition.getOption(name);
    if (void 0 !== value && !option.acceptValue()) {
      throw new Error('The --' + name + ' option does not accept a value : ' + value);
    }
    if (void 0 === value && option.acceptValue() && this.parsed.length) {
      next = this.parsed.shift();
      if (next[0] !== void 0 && '-' !== next[0]) {
        value = next;
      } else if (next === '') {
        value = '';
      } else {
        this.parsed.unshift(next);
      }
    }
    if (void 0 === value) {
      if (option.isValueRequired()) {
        throw new Error('The --' + name + ' option requires a value.');
      }
      if (!option.isArray()) {
        value = option.isValueOptional() ? option.getDefault() : true;
      }
    }
    if (option.isArray()) {
      if (this.options[name] === void 0) {
        this.options[name] = [];
      }
      return this.options[name].push(value);
    } else {
      return this.options[name] = value;
    }
  };

  ArgvInput.prototype.getFirstArgument = function() {
    var token, _i, _len, _ref;
    _ref = this.tokens;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      token = _ref[_i];
      if ('-' === token.charAt(0)) {
        continue;
      }
      return token;
    }
  };

  ArgvInput.prototype.hasParameterOption = function(values) {
    var token, value, _i, _j, _len, _len1, _ref;
    _ref = this.tokens;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      token = _ref[_i];
      for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
        value = values[_j];
        if (token === value || 0 === token.indexOf(value + '=')) {
          return true;
        }
      }
    }
    return false;
  };

  ArgvInput.prototype.getParameterOption = function(values, def) {
    var pos, token, tokens, value, _i, _len;
    tokens = this.tokens.slice(0);
    while (token = tokens.shift()) {
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        if (token === value || 0 === token.indexOf(value + '=')) {
          if (false !== (pos = token.indexOf('='))) {
            return token.substr(pos + 1);
          }
        }
      }
      return tokens.shift();
    }
    return def;
  };

  ArgvInput.prototype.__toString = function() {
    var tokens;
    tokens = this.tokens.map((function(_this) {
      return function(token) {
        var match;
        if ((match = token.match('^(-[^=]+=)(.+)'))) {
          return match[1] + _this.escapeToken(match[2]);
        }
        if (token && token[0] !== '-') {
          return _this.escapeToken(token);
        }
        return token;
      };
    })(this));
    return tokens.join(' ');
  };

  return ArgvInput;

})(Input);

module.exports = ArgvInput;
