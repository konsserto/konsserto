
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var RouteArgument, RouteDefinition;

RouteArgument = use('@Konsserto/Component/Router/RouteArgument');

RouteDefinition = (function() {
  function RouteDefinition(registeredRoute, prefix) {
    var controller, _ref, _ref1, _ref2;
    this.registeredRoute = registeredRoute;
    this.defaultArgs = {};
    this["arguments"] = {};
    controller = this.registeredRoute.controller.split(':');
    this.name = this.registeredRoute.name;
    this.bundleName = controller[0];
    this.controllerName = controller[1];
    this.methodName = controller[2];
    this.async = (_ref = this.registeredRoute.async) != null ? _ref : false;
    this.prefix = prefix;
    this.rawPattern = this.registeredRoute.pattern;
    this.httpMethod = (_ref1 = this.registeredRoute.method) != null ? _ref1 : 'all';
    this.rawArguments = (_ref2 = this.registeredRoute["arguments"]) != null ? _ref2 : {};
    this.needPrefix = true;
    if ((this.registeredRoute.prefix != null) && !this.registeredRoute.prefix) {
      this.needPrefix = false;
    }
    this.extractArgumentsFromRawPattern();
    this.pattern = this.addPrefixOnRoute(prefix);
  }

  RouteDefinition.prototype.addArgument = function(name) {
    var requirements, routeArgument, _ref;
    requirements = (_ref = this.rawArguments[name]) != null ? _ref : {};
    routeArgument = new RouteArgument(name, requirements);
    this["arguments"][name] = routeArgument;
    if (routeArgument.hasDefault()) {
      this.defaultArgs[name] = routeArgument;
    }
    return routeArgument;
  };

  RouteDefinition.prototype.extractArgumentsFromRawPattern = function() {
    var arg, args, name, routeArgument, _i, _len, _results;
    this.pattern = this.rawPattern;
    args = this.rawPattern.match(/({([a-zA-Z0-9-_]+)}+)/g);
    if (args != null) {
      _results = [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        name = arg.replace(/{/g, '').replace(/}/g, '');
        routeArgument = this.addArgument(name);
        _results.push(this.pattern = this.pattern.replace(arg, routeArgument.getMatch()));
      }
      return _results;
    }
  };

  RouteDefinition.prototype.addPrefixOnRoute = function(prefix) {
    if ((prefix != null) && this.needPrefix) {
      return prefix + this.pattern;
    }
    return this.pattern;
  };

  RouteDefinition.prototype.setPattern = function(pattern) {
    this.pattern = pattern;
    return this;
  };

  RouteDefinition.prototype.setBundleName = function(bundleName) {
    this.bundleName = bundleName;
    return this;
  };

  RouteDefinition.prototype.setControllerName = function(controllerName) {
    this.controllerName = controllerName;
    return this;
  };

  RouteDefinition.prototype.setMethodName = function(methodName) {
    this.methodName = methodName;
    return this;
  };

  RouteDefinition.prototype.setAsync = function(async) {
    this.async = async;
    return this;
  };

  RouteDefinition.prototype.setHttpMethod = function(httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  };

  RouteDefinition.prototype.setName = function(name) {
    this.name = name;
    return this;
  };

  RouteDefinition.prototype.isAsynchronous = function() {
    return this.async;
  };

  RouteDefinition.prototype.getPattern = function() {
    return this.pattern;
  };

  RouteDefinition.prototype.getRawPattern = function() {
    return this.rawPattern;
  };

  RouteDefinition.prototype.getBundleName = function() {
    return this.bundleName;
  };

  RouteDefinition.prototype.getControllerName = function() {
    return this.controllerName;
  };

  RouteDefinition.prototype.getMethodName = function() {
    return this.methodName;
  };

  RouteDefinition.prototype.getHttpMethod = function() {
    return this.httpMethod;
  };

  RouteDefinition.prototype.getName = function() {
    return this.name;
  };

  RouteDefinition.prototype.getDefaultArgs = function() {
    return this.defaultArgs;
  };

  RouteDefinition.prototype.getArgs = function() {
    return this["arguments"];
  };

  RouteDefinition.prototype.getDefaultValueForArg = function(name) {
    if (this.defaultArgs[name] != null) {
      return this.defaultArgs[name].getDefaultValue();
    }
    return null;
  };

  RouteDefinition.prototype.hasDefaultArg = function(name) {
    if (this.defaultArgs[name] != null) {
      return true;
    }
    return false;
  };

  RouteDefinition.prototype.inflateArguments = function(args) {
    var arg, fullname, name, path, _ref;
    path = this.prefix + this.rawPattern;
    _ref = this["arguments"];
    for (name in _ref) {
      arg = _ref[name];
      fullname = '{' + name + '}';
      if ((args != null) && (args[name] != null)) {
        path = path.replace(fullname, args[name]);
      } else if (this.hasDefaultArg(name)) {
        path = path.replace(fullname, this.getDefaultValueForArg(name));
      } else {
        path = path.replace(fullname, '');
      }
    }
    return path;
  };

  return RouteDefinition;

})();

module.exports = RouteDefinition;
