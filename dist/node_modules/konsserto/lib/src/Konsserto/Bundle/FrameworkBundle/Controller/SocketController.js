
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Controller, SocketController,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Controller = use('@Konsserto/Bundle/FrameworkBundle/Controller/Controller');

SocketController = (function(_super) {
  __extends(SocketController, _super);

  function SocketController() {
    SocketController.__super__.constructor.apply(this, arguments);
  }

  SocketController.prototype.ioRoomJoin = function(room) {
    return this.request.io.join(room);
  };

  SocketController.prototype.ioRoomBroadcast = function(room, event, data) {
    if (data == null) {
      data = {};
    }
    return this.request.io.room(room).broadcast(event, data);
  };

  SocketController.prototype.ioRoomBroadcastAll = function(room, event, data) {
    if (data == null) {
      data = {};
    }
    return this.app.io.room(room).broadcast(event, data);
  };

  SocketController.prototype.ioSession = function() {
    return this.request.session;
  };

  SocketController.prototype.ioBroadcast = function(event, data) {
    if (data == null) {
      data = {};
    }
    return this.request.io.broadcast(event, data);
  };

  SocketController.prototype.ioBroadcastAll = function(event, data) {
    if (data == null) {
      data = {};
    }
    return this.app.io.broadcast(event, data);
  };

  SocketController.prototype.ioForward = function(event) {
    return this.request.io.route(event);
  };

  SocketController.prototype.ioEmit = function(event, data) {
    if (data == null) {
      data = {};
    }
    return this.request.io.emit(event, data);
  };

  SocketController.prototype.ioRespond = function(data) {
    if (data == null) {
      data = {};
    }
    return this.request.io.respond(data);
  };

  SocketController.prototype.ioSet = function(key, value) {
    return this.app.io.set(key, value);
  };

  SocketController.prototype.ioData = function() {
    return this.request.data;
  };

  return SocketController;

})(Controller);

module.exports = SocketController;
