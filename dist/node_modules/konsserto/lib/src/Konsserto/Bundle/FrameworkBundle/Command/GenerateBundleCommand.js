
/*
 * This file is part of the Konsserto package.
 *
 * (c) Jessym Reziga <jessym@konsserto.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Command, Filesystem, GenerateBundleCommand, InputArgument, InputOption, Table, Tools, cc, file_helper, path_helper,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

cc = use('cli-color');

file_helper = use('fs');

path_helper = use('path');

Table = use('cli-table');

Command = use('@Konsserto/Component/Console/Command');

Filesystem = use('@Konsserto/Component/Filesystem/Filesystem');

InputArgument = use('@Konsserto/Component/Console/Input/InputArgument');

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

Tools = use('@Konsserto/Component/Static/Tools');

InputOption = use('@Konsserto/Component/Console/Input/InputOption');

GenerateBundleCommand = (function(_super) {
  __extends(GenerateBundleCommand, _super);

  function GenerateBundleCommand() {
    return GenerateBundleCommand.__super__.constructor.apply(this, arguments);
  }

  GenerateBundleCommand.prototype.create = function() {
    this.setName('generate:bundle');
    this.setDescription('Generate a bundle');
    this.setDefinition([new InputOption('--empty', 'e', InputOption.VALUE_NONE, 'Doesn\'t generate example')]);
    return this.setHelp('  The command %command.name% generate the whole bundle directory tree. Example:\n  %command.full_name% JohnSmithBundle');
  };

  GenerateBundleCommand.prototype.execute = function(input) {
    this.nl();
    return 0;
  };

  GenerateBundleCommand.prototype.interact = function(input) {
    var bundle, bundleDirs, empty, match, name, root, table, _loop;
    empty = input.getOption('empty');
    table = new Table({
      chars: this.getArrayChars()
    });
    table.push(['Konsserto Bundle Generator']);
    this.write('\n\n' + table.toString() + '\n');
    this.write("Bundle or not to Bundle, that is the question.\nLuckily in Konsserto, all is about bundles.\n\nEach bundle is hosted under a namespace (like Foo/Bundle/(...)/BlogBundle).\n\nThe namespace should begin with a vendor name like your company name, your project name, or your client name, followed by one or more optional category sub-namespaces, and it should end with the bundle name itself (which must have 'Bundle' as a suffix).");
    bundle = '';
    name = '';
    _loop = true;
    while (_loop) {
      bundle = this.ask('\nBundle namespace : ');
      match = bundle.match('^([a-zA-Z0-9/]+)$');
      if (bundle === 'exit' || bundle === 'quit' || bundle === '!q') {
        process.exit(0);
      }
      if (match === void 0 || match === null || match.length <= 0) {
        this.write('  The namespace contains invalid characters.');
        continue;
      }
      if (!Tools.endsWith(bundle, 'Bundle')) {
        this.write('  The namespace must end with \'Bundle\'.');
        continue;
      }
      if (bundle.indexOf('/') <= 0) {
        this.write('  You must specify a vendor name (Example: VendorName/' + bundle + ').');
        continue;
      }
      _loop = false;
    }
    _loop = true;
    while (_loop) {
      name = this.ask('\nBundle name [' + bundle.replace(/\//g, '') + ']: ');
      match = name.match('^([a-zA-Z0-9/]+)$');
      if (name === 'exit' || name === 'quit' || name === '!q') {
        process.exit(0);
      }
      if (name === '') {
        name = bundle.replace(/\//g, '');
        break;
      }
      if (match === void 0 || match === null || match.length <= 0) {
        this.write('  The namespace contains invalid characters.');
        continue;
      }
      if (!Tools.endsWith(name, 'Bundle')) {
        this.write('  The namespace must end with \'Bundle\'.');
        continue;
      }
      _loop = false;
    }
    root = Filesystem.mktree(process.cwd() + '/' + sourceDir + '/', bundle.split('/'));
    bundleDirs = {
      ':files': {},
      'Command': null,
      'Controller': {
        ':files': {
          'HelloController.coffee': this.getControllerClassContent(name)
        }
      },
      'Entity': null,
      'Repository': null,
      'Resources': {
        'config': {
          ':files': {
            'routing.js': this.getRoutingContent(name, bundle, empty),
            'services.js': this.getServiceContent(name, bundle, empty),
            'socket.js': this.getSocketContent()
          }
        },
        'views': {
          'Hello': {
            ':files': {
              'index.html.twig': 'Hello {{ name }}!'
            }
          }
        }
      },
      'Services': null
    };
    if (empty) {
      bundleDirs['Controller'] = null;
      bundleDirs['Resources']['views'] = null;
    }
    bundleDirs[':files'][name + '.coffee'] = this.getBundleClassContent(name);
    Filesystem.mktree(root, bundleDirs);
    this.registerBundle(name, bundle);
    this.registerRoutes(name, bundle);
    this.registerSockets(name, bundle);
    return 0;
  };

  GenerateBundleCommand.prototype.registerBundle = function(name, bundle) {
    var arrayFile, file, line, moduleExportAtLine, newBundle, oldBundleWithSameLine, _i, _len;
    file = process.cwd() + '/app/config/bundles.js';
    arrayFile = file_helper.readFileSync(file).toString().split('\n');
    newBundle = 'use(\'@' + bundle + '/' + name + '\')';
    oldBundleWithSameLine = false;
    moduleExportAtLine = -1;
    for (_i = 0, _len = arrayFile.length; _i < _len; _i++) {
      line = arrayFile[_i];
      if (line.trim().indexOf(newBundle) >= 0) {
        oldBundleWithSameLine = true;
      }
      if (line.trim().indexOf('module.exports') === 0) {
        moduleExportAtLine = _i;
      }
    }
    if (moduleExportAtLine !== -1 & !oldBundleWithSameLine) {
      arrayFile[moduleExportAtLine] = 'bundles.push(' + newBundle + ');\nmodule.exports = bundles;';
      return file_helper.writeFileSync(file, arrayFile.join('\n'));
    }
  };

  GenerateBundleCommand.prototype.registerRoutes = function(name, bundle, shortname) {
    var arrayFile, file, line, moduleExportAtLine, newRoutes, newRoutesExtended, oldRoutesWithSameLine, part, path, _i, _j, _len, _len1;
    if (shortname == null) {
      shortname = '';
    }
    file = process.cwd() + '/app/config/routing.js';
    arrayFile = file_helper.readFileSync(file).toString().split('\n');
    newRoutes = "resource: '@" + bundle + "/Resources/config/routing.js'";
    bundle = bundle.replace(/Bundle/g, '');
    path = bundle.split('/');
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      part = path[_i];
      shortname += part + '_';
    }
    newRoutesExtended = "{\n \tname: '" + shortname.toLowerCase() + "import',\n \t" + newRoutes + "\n }";
    oldRoutesWithSameLine = false;
    moduleExportAtLine = -1;
    for (_j = 0, _len1 = arrayFile.length; _j < _len1; _j++) {
      line = arrayFile[_j];
      if (line.trim().indexOf(newRoutes) >= 0) {
        oldRoutesWithSameLine = true;
      }
      if (line.trim().indexOf('module.exports') === 0) {
        moduleExportAtLine = _j;
      }
    }
    if (moduleExportAtLine !== -1 & !oldRoutesWithSameLine) {
      arrayFile[moduleExportAtLine] = 'routing.push(' + newRoutesExtended + ');\nmodule.exports = routing;';
      return file_helper.writeFileSync(file, arrayFile.join('\n'));
    }
  };

  GenerateBundleCommand.prototype.registerSockets = function(name, bundle, shortname) {
    var arrayFile, file, line, moduleExportAtLine, newSockets, newSocketsExtended, oldSocketsWithSameLine, part, path, _i, _j, _len, _len1;
    if (shortname == null) {
      shortname = '';
    }
    file = process.cwd() + '/app/config/socket.js';
    arrayFile = file_helper.readFileSync(file).toString().split('\n');
    newSockets = "resource: '@" + bundle + "/Resources/config/socket.js'";
    bundle = bundle.replace(/Bundle/g, '');
    path = bundle.split('/');
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      part = path[_i];
      shortname += part + '_';
    }
    newSocketsExtended = "{\n \tname: '" + shortname.toLowerCase() + "import',\n \t" + newSockets + "\n }";
    oldSocketsWithSameLine = false;
    moduleExportAtLine = -1;
    for (_j = 0, _len1 = arrayFile.length; _j < _len1; _j++) {
      line = arrayFile[_j];
      if (line.trim().indexOf(newSockets) >= 0) {
        oldSocketsWithSameLine = true;
      }
      if (line.trim().indexOf('module.exports') === 0) {
        moduleExportAtLine = _j;
      }
    }
    if (moduleExportAtLine !== -1 & !oldSocketsWithSameLine) {
      arrayFile[moduleExportAtLine] = 'socket.push(' + newSocketsExtended + ');\nmodule.exports = socket;';
      return file_helper.writeFileSync(file, arrayFile.join('\n'));
    }
  };

  GenerateBundleCommand.prototype.getBundleClassContent = function(name) {
    return "Bundle = use('@Konsserto/Component/Bundle/Bundle')\n\nclass " + name + " extends Bundle\n\n\n\n\nmodule.exports = new " + name;
  };

  GenerateBundleCommand.prototype.getControllerClassContent = function(name) {
    return "Controller = use('@Konsserto/Bundle/FrameworkBundle/Controller/Controller')\n\nclass HelloController extends Controller\n\n\n\tindexAction:(name) =>\n\n\t\t@render('" + name + ":Hello:index.html.twig',{name:name})\n\n\nmodule.exports = HelloController";
  };

  GenerateBundleCommand.prototype.getRoutingContent = function(name, bundle, empty, route) {
    var part, path, _i, _len;
    if (empty == null) {
      empty = false;
    }
    if (route == null) {
      route = '';
    }
    bundle = bundle.replace(/Bundle/g, '');
    path = bundle.split('/');
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      part = path[_i];
      route += part + '_';
    }
    if (empty) {
      return "var routing = [\n\n\n];\n\n\nmodule.exports = routing;";
    }
    return "var routing = [\n\t{name: '" + (route.toLowerCase()) + "homepage', pattern: '/hello/{name}', controller: '" + name + ":Hello:index', method: 'get'}\n\n];\n\n\nmodule.exports = routing;";
  };

  GenerateBundleCommand.prototype.getServiceContent = function(name, bundle, empty, service) {
    var include, part, path, _i, _len;
    if (empty == null) {
      empty = false;
    }
    if (service == null) {
      service = '';
    }
    include = bundle;
    bundle = bundle.replace(/Bundle/g, '');
    path = bundle.split('/');
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      part = path[_i];
      service += part + '_';
    }
    if (empty) {
      return "var services = [\n\n\n];\n\n\nmodule.exports = services;";
    }
    return "var services = [\n\t//{name: '" + (service.toLowerCase()) + "service', _class: '@" + include + "/Services/" + name + "Service'}\n\n];\n\n\nmodule.exports = services;";
  };

  GenerateBundleCommand.prototype.getSocketContent = function() {
    return "var socket = [\n\n\n];\n\n\nmodule.exports = socket;";
  };

  return GenerateBundleCommand;

})(Command);

module.exports = GenerateBundleCommand;
