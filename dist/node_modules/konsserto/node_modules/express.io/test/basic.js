var io;

io = require('socket.io-client');

describe('a basic express.io app', function() {
  var app, client, otherClient;
  app = null;
  client = null;
  otherClient = null;
  beforeEach(function(done) {
    app = require('../lib/index')();
    app.http().io();
    app.io.route('test-respond', function(request) {
      return request.io.respond('respond works');
    });
    app.io.route('test-emit-no-data-with-callback', function(request) {
      return request.io.respond({
        junk: 'test'
      });
    });
    app.io.route('test-emit', function(request) {
      return request.io.emit('test-emit', 'emit works');
    });
    app.io.route('test-broadcast', function(request) {
      return request.io.broadcast('test-broadcast', 'broadcast works');
    });
    app.io.route('test-broadcast-app', function(request) {
      return app.io.broadcast('test-broadcast-app', 'broadcast app works');
    });
    app.io.route('test-advanced-routing', {
      first: function(request) {
        return request.io.respond('first');
      },
      second: function(request) {
        return request.io.respond('second');
      }
    });
    app.io.route('join', function(request) {
      request.io.join(request.data.room);
      return request.io.respond('');
    });
    app.io.route('leave', function(request) {
      request.io.leave(request.data.room);
      return request.io.respond('');
    });
    app.io.route('test-room', function(request) {
      return app.io.room('test').broadcast('test-room', 'rooms work');
    });
    app.io.route('test-room-leave', function(request) {
      app.io.room('test-leave').broadcast('test-room-leave');
      return request.io.respond('');
    });
    return app.listen(7076, function() {
      client = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      otherClient = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      return done();
    });
  });
  it('should emit', function(done) {
    client.on('test-emit', function(message) {
      message.should.equal('emit works');
      return done();
    });
    return client.emit('test-emit');
  });
  it('should respond', function(done) {
    return client.emit('test-respond', function(message) {
      message.should.equal('respond works');
      return client.emit('test-respond', {}, function(message) {
        message.should.equal('respond works');
        return done();
      });
    });
  });
  it('should broadcast', function(done) {
    otherClient.on('test-broadcast', function(message) {
      message.should.equal('broadcast works');
      return done();
    });
    client.on('test-broadcast', function(message) {
      throw new Error('This client should not receive.');
    });
    return client.emit('test-broadcast');
  });
  it('should broadcast from app', function(done) {
    var total;
    total = 0;
    otherClient.on('test-broadcast-app', function(message) {
      message.should.equal('broadcast app works');
      total += 1;
      if (total === 2) {
        return done();
      }
    });
    client.on('test-broadcast-app', function(message) {
      message.should.equal('broadcast app works');
      total += 1;
      if (total === 2) {
        return done();
      }
    });
    return client.emit('test-broadcast-app');
  });
  it('should have rooms to join', function(done) {
    client.emit('join', {
      room: 'test'
    }, function() {
      return otherClient.emit('test-room');
    });
    client.on('test-room', function(message) {
      message.should.equal('rooms work');
      return done();
    });
    client;
    return otherClient.on('test-room', function(message) {
      throw new Error('should not receive this');
    });
  });
  it('should have rooms to leave', function(done) {
    client.emit('join', {
      room: 'test-leave'
    }, function() {
      return client.emit('leave', {
        room: 'test-leave'
      }, function() {
        return otherClient.emit('test-room-leave', {}, function() {
          return setTimeout(done, 10);
        });
      });
    });
    client.on('test-room-leave', function() {
      throw new Error('should not receive this');
    });
    return otherClient.on('test-room', function() {
      throw new Error('should not receive this');
    });
  });
  return afterEach(function(done) {
    client.disconnect();
    otherClient.disconnect();
    return app.server.close(function() {
      return done();
    });
  });
});
