var app, client, easyrequest, io, other, should, spawn, startExample;

should = require('chai').should();

io = require('socket.io-client');

easyrequest = require('request');

spawn = require('child_process').spawn;

app = null;

other = null;

client = null;

startExample = function(appName, done, next) {
  app = spawn('node', [appName]);
  return setTimeout(function() {
    return next(done);
  }, 750);
};

describe('the routing example', function() {
  return it('should work', function(next) {
    return startExample('../examples/routing/app', next, function(done) {
      client = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      client.on('talk', function(data) {
        data.message.should.equal('io event from an io route on the server');
        client.disconnect();
        return done();
      });
      return client.emit('ready');
    });
  });
});

describe('the route forwarding example', function() {
  return it('should work', function(next) {
    return startExample('../examples/route-forwarding/app', next, function(done) {
      return easyrequest('http://localhost:7076', function(error, response, body) {
        body = JSON.parse(body);
        body.hello.should.equal('from io route');
        return done();
      });
    });
  });
});

describe('the broadcast example', function() {
  return it('should work', function(next) {
    return startExample('../examples/broadcasting/app', next, function(done) {
      client = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      other = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      client.emit('ready');
      other.on('new visitor', function() {
        return done();
      });
      return client.on('new visitor', function() {
        throw new Error('should not receive');
      });
    });
  });
});

describe('the session example', function() {
  return it('should work', function(next) {
    return startExample('../examples/sessions/app', next, function(done) {
      return easyrequest('http://localhost:7076', function(error, response, body) {
        var cookie;
        cookie = response.headers['set-cookie'];
        client = io.connect("http://localhost:7076?cookie=" + (encodeURIComponent(cookie)), {
          'force new connection': true
        });
        client.emit('ready', 'brad');
        client.on('get-feelings', function() {
          return client.emit('send-feelings', 'good');
        });
        return client.on('session', function(session) {
          session.name.should.equal('brad');
          session.feelings.should.equal('good');
          should.exist(session.loginDate);
          return done();
        });
      });
    });
  });
});

describe('the rooms example', function() {
  return it('should work', function(next) {
    return startExample('../examples/rooms/app', next, function(done) {
      client = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      other = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      client.on('announce', function(data) {
        data.message.should.equal('New client in the cool room. ');
        return done();
      });
      client.emit('ready', 'cool');
      return setTimeout(function() {
        return other.emit('ready', 'cool');
      }, 200);
    });
  });
});

describe('the acknowledgements example', function() {
  return it('should work', function(next) {
    return startExample('../examples/acknowledgements/app', next, function(done) {
      client = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      return client.emit('ready', {}, function(data) {
        data.success.should.equal('here is your acknowledegment for the ready event');
        return done();
      });
    });
  });
});

describe('the realtime canvas example', function() {
  return it('should work', function(next) {
    return startExample('../examples/realtime-canvas/app', next, function(done) {
      client = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      other = io.connect('http://localhost:7076', {
        'force new connection': true
      });
      client.emit('drawClick');
      other.on('draw', function() {
        return done();
      });
      return client.on('new visitor', function() {
        throw new Error('should not receive');
      });
    });
  });
});

afterEach(function(done) {
  if (client != null) {
    client.disconnect();
  }
  if (other != null) {
    other.disconnect();
  }
  if (app != null) {
    app.on('exit', function() {
      return done();
    });
  } else {
    return done();
  }
  return app.kill('SIGKILL');
});
